,Document_No,Dominant_Topic_1,Perc_Contribution_1,Topic_Keywords_1,Dominant_Topic_2,Perc_Contribution_2,Topic_Keywords_2,Dominant_Topic_3,Perc_Contribution_3,Topic_Keywords_3,Text,Question
0,0,16,0.1995999962091446,"for, follow, time, complexity, true, give, statement, function, correct, run",6,0.10209999978542328,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly",41,0.033399999141693115,"runtime, part, course, http, answerquestion, mainphpcmd, answer, conference, target, must","['runtime', 'for', 'follow', 'code', 'fragment', 'for', 'for', 'for']","The runtime for the following code fragment is ?(f(n)). What is f(n)?for (int i=0; i<n; i++) for (int j=0; j<i/10; j++) for (int k=1; k<n; k=2*k) System.out.println(i);
  n^2(logn)
  "
1,1,42,0.3075000047683716,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",16,0.1420000046491623,"for, follow, time, complexity, true, give, statement, function, correct, run",24,0.018200000748038292,"hash, element, table, bucket, use, function, close, key, store, insert","['complexity', 'use', 'definition', 'give', 'week', 'lecture', 'slide', 'fix', 'assume', 'low', 'possible', 'value', 'for', 'definition', 'hold']","An algorithm has time complexity . Using the Definition of Big-Oh as given in the 2019 Week 1a Lecture (slide 14), fix B = 4.Assuming, what is the lowest possible value of b for which the definition holds?
   b = 9
 "
2,2,56,0.27970001101493835,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.053300000727176666,"for, follow, time, complexity, true, give, statement, function, correct, run",40,0.045899998396635056,"array, slow, problem, may, random, element, access, integer, anywhere, face","['follow', 'sort', 'algorithm', 'quick', 'for', 'almost', 'sorted', 'array', 'insertion', 'sort']","Which one of the following sorting algorithms is the quickest for an almost sorted array?
 Insertion sort
   "
3,3,56,0.10419999808073044,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",49,0.05990000069141388,"int, result, return, term, many, num, body, function, heap, count",16,0.017000000923871994,"for, follow, time, complexity, true, give, statement, function, correct, run","['complexity', 'heap', 'sort']","What is the Big oh complexity of heap sort?
 O(n log n)
   "
4,4,56,0.14740000665187836,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",55,0.01510000042617321,"datum, search, structure, remove, data, list, store, want, add, use",44,0.014600000344216824,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na","['algorithm', 'without', 'priority']","What is the time complexity of Dijkstra's Algorithm without a min-priority queue?
O(V2)
    "
5,5,19,0.448199987411499,"pile, box, gift, remain, police, back, realise, pole, ask, commercial",14,0.09160000085830688,"tree, binary, order, node, leave, right, follow, avl, search, traversal",29,0.08269999921321869,"find, number, step, item, average, many, index, table, insert, hash","['many', 'beer', 'while', 'fly', 'sleigh', 'back', 'pole', 'police', 'pull', 'police', 'ask', 'for', 'commercial', 'pilot', 'license', 'cpl', 'realise', 'leave', 'remain', 'gift', 'box', 'gift', 'box', 'need', 'find', 'label', 'location', 'put', 'pile', 'remain', 'total', 'pile', 'order', 'name', 'gift', 'box', 'pile', 'use', 'binary', 'search', 'complexity']","Santa has had one too many beers while flying the sleigh back to the North Pole when the police pull him over. The police ask for hisEASA Part-FCL commercial pilot license (CPL) and he realises that he left it in one of 60 remaining gift boxes. The gift box he needs to find is labelled ""Santa Claus"" with ""North Pole"" on. Each location ""e.g Africa"" is put into its own pile, there are 12 remaining piles in total. Each pile is ordered by name ""e.g Mrs Claus"", there are 5 gift boxes in each pile. Using a binary search, what is the worst-case complexity?
   log2(12) + log2(5)
 "
6,6,14,0.21729999780654907,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.11550000309944153,"for, follow, time, complexity, true, give, statement, function, correct, run",43,0.04450000077486038,"space, nlogn, worst, double, do, enough, arraylist, namortise, collection, efficiency","['time', 'complexity', 'for', 'complete', 'search', 'balance', 'binary', 'search', 'tree', 'nlogn']","What is the time complexity for completing 'n' searches in a balanced binary search tree?
nlogn
    "
7,7,16,0.1054999977350235,"for, follow, time, complexity, true, give, statement, function, correct, run",43,0.05959999933838844,"space, nlogn, worst, double, do, enough, arraylist, namortise, collection, efficiency",56,0.015799999237060547,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['time', 'complexity', 'nlogn']","What is the worst case time complexity of the merge sort
 ?(nlogn)
   "
8,8,14,0.16930000483989716,"tree, binary, order, node, leave, right, follow, avl, search, traversal",55,0.09300000220537186,"datum, search, structure, remove, data, list, store, want, add, use",28,0.05990000069141388,"child, add, non, cause, leaf, full, slow, sift, treechild, nodeleaf","['datum', 'structure', 'describe', 'value', 'node', 'value', 'child', 'min']","Which data structure is described by:the value at each node is = the values at its two children.
  Min heap
  "
9,9,13,0.16760000586509705,"second, take, record, long, run, expect, likely, question, information, implementation",11,0.08869999647140503,"complete, digit, count, least, significant, digits, basis, position, share, counting",16,0.047600001096725464,"for, follow, time, complexity, true, give, statement, function, correct, run","['complexity', 'take', 'second', 'complete', 'long', 'take', 'complete']","An algorithm has a time complexity of?(n^3), when n = 2 it takes 2 seconds to complete how long does it take to complete when n = 4
  16
  "
10,10,24,0.4011000096797943,"hash, element, table, bucket, use, function, close, key, store, insert",29,0.22689999639987946,"find, number, step, item, average, many, index, table, insert, hash",14,0.05400000140070915,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['use', 'hash', 'function', 'add', 'function', 'open', 'hash', 'table', 'hash', 'table', 'index', 'bucket', 'length', 'if', 'bucket', 'overflow', 'full', 'element', 'add', 'element', 'add', 'overflow', 'buckethow', 'many', 'element', 'insert', 'overflow', 'bucket', 'follow', 'element', 'insert', 'leave', 'right', 'ie', 'first', 'insert', 'last', 'insert']","I am using the hash function H(x) = x % 7 to add functions to an open hash table. This hash table is indexed 0 to 6, with each bucket having a max length of 3.If a bucket ""overflows"", ie it is full and another element is added, this element is added to an overflow bucket.How many elements are inserted into the overflow bucket after the following elements are inserted?Elements inserted left to right (ie 29 is first insert 69 is last insert) : 29, 64, 63, 16, 48, 74, 143, 39, 80, 281, 4, 69.
  2
  "
11,11,29,0.35040000081062317,"find, number, step, item, average, many, index, table, insert, hash",16,0.0502999983727932,"for, follow, time, complexity, true, give, statement, function, correct, run",24,0.0210999995470047,"hash, element, table, bucket, use, function, close, key, store, insert","['give', 'average', 'number', 'step', 'for', 'closed', 'hash', 'table', 'linear_probing', 'find', 'item', 'step']","Given a load factor of 0.3 what is the average number of steps for a Closed Hash table with linear probing to find an item.
  1.21 steps
  "
12,12,51,0.23909999430179596,"efficient, company, come, condition, stock, sortb, sortc, much, around, deal",56,0.1932000070810318,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",55,0.05950000137090683,"datum, search, structure, remove, data, list, store, want, add, use","['approach', 'company', 'recommend', 'fast', 'efficient', 'sort', 'often', 'deal', 'large', 'inputs', 'numerical', 'datum', 'limited', 'storage', 'sort', 'algorithm', 'suitable', 'quick', 'sort']","You have been approached by a company to recommend a fast and efficient sorting algorithm to use in Java. They often deal with large inputs of numerical data, and have limited storage. Which sorting algorithm is most suitable?
 Quick Sort
   "
13,13,16,0.06270000338554382,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.018300000578165054,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",14,0.017100000753998756,"tree, binary, order, node, leave, right, follow, avl, search, traversal",['follow'],"What is the time complexity of the following algorithm : 0.00001n4 + 100n2 + 19nlogn + (10n2* 5n3 ) ?
 O(n5)
   "
14,14,16,0.06279999762773514,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.018300000578165054,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",14,0.017100000753998756,"tree, binary, order, node, leave, right, follow, avl, search, traversal",['follow'],"What is the time complexity of the following algorithm : 0.00001n4 + 100n2 + 19nlogn + (10n2* 5n3 ) ?
 O(n5)
   "
15,15,42,0.1525000035762787,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",56,0.08940000087022781,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",29,0.05260000005364418,"find, number, step, item, average, many, index, table, insert, hash","['formal', 'definition', 'represent', 'algorithm', 'operate', 'asymptotically', 'equal']","Which formal definition represents an algorithm operating asymptotically equal as f(x)?

    "
16,16,9,0.4147000014781952,"visit, look_like, car, company, manufacture, state, define, previously, hit, dead",14,0.19120000302791595,"tree, binary, order, node, leave, right, follow, avl, search, traversal",29,0.042100001126527786,"find, number, step, item, average, many, index, table, insert, hash","['morning', 'roll', 'workstation', 'unnamed', 'car', 'manufacture', 'company', 'egad', 'find', 'computer', 'strike', 'ransomwarethe', 'state', 'important', 'company', 'relate', 'file', 'encrypt', 'order', 'send', 'address', 'solve', 'follow', 'avl', 'tree', 'questiongiven', 'follow', 'avl', 'tree', 'tree', 'look_like', 'number', 'insert']","It's another Monday morning and you've just rolled up to your workstation at an unnamed car manufacturing company. But, egads! You find that all of the computers have been struck with ransomware!The ransomware states that all of your important, company related files have been encrypted. In order to decrypt them, you can either send 5 BTC to a shady BTC wallet address OR you can solve the following AVL-Tree question.Given the following AVL Tree:what will the tree look like after the number7 has been inserted?
 
   "
17,17,56,0.2248000055551529,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",49,0.05169999971985817,"int, result, return, term, many, num, body, function, heap, count",44,0.031700000166893005,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na","['follow', 'statement', 'regard', 'sort', 'incorrect', 'heap', 'sort', 'stable']","Which one of the following statements regarding sorting is incorrect?
  A heap sort is stable.
  "
18,18,25,0.11590000241994858,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional",55,0.10339999943971634,"datum, search, structure, remove, data, list, store, want, add, use",14,0.01360000018030405,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['edge', 'weight', 'equally', 'breadth_first', 'search']","How does a Dijkstra's Algorithm behave when all of the edges are weighted equally?
Breadth-first search
    "
19,19,16,0.12690000236034393,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.06069999933242798,"tree, binary, order, node, leave, right, follow, avl, search, traversal",44,0.04969999939203262,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na","['give', 'least', 'exactly', 'apply', 'follow', 'true']","Given the functionsf(x) = 0.1 n5g(x) = 50 nlognh(x) = 0.5 2nhint ( O = at least , ? = at most, O = exactly (both O and? apply))Which of the following is true ?
 f is O(g), g is ?(h), and h is O(g)
   "
20,20,14,0.28540000319480896,"tree, binary, order, node, leave, right, follow, avl, search, traversal",0,0.05079999938607216,"pass, point, start, book, page, short, similar, look, dijkstra, repeat",55,0.014299999922513962,"datum, search, structure, remove, data, list, store, want, add, use","['build', 'avl', 'tree', 'follow', 'value', 'value', 'root', 'node', 'point']","Build an AVL Tree with the following values:15, 20, 24, 10, 13, 7, 30, 36, 25Which value does the root node point to?
  13
  "
21,21,56,0.17479999363422394,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.053199999034404755,"for, follow, time, complexity, true, give, statement, function, correct, run",3,0.053199999034404755,"case, fastest, ofbubble, itsb, distinct, description, fit, stableb, performance, nearly","['good', 'for', 'merge', 'sort', 'good', 'case']","What is the best and worst case for Merge Sort?
 Best Case: nlog(n)Worst Case: nlog(n)
   "
22,22,40,0.06080000102519989,"array, slow, problem, may, random, element, access, integer, anywhere, face",29,0.059700001031160355,"find, number, step, item, average, many, index, table, insert, hash",54,0.05889999866485596,"like, could, treelook, book, alphabetical, alphabetically, back, system, wherever, home","['could', 'represent', 'array']","Which of the max heaps A-H could be represented in an array?
     B, C and E.
"
23,23,56,0.16220000386238098,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",51,0.16120000183582306,"efficient, company, come, condition, stock, sortb, sortc, much, around, deal",16,0.11159999668598175,"for, follow, time, complexity, true, give, statement, function, correct, run","['give', 'integ', 'randomly', 'order', 'time', 'complexity', 'sort', 'come', 'efficient', 'sort', 'algorithm', 'give', 'condition']","Given an integer array of randomly ordered 0's and 1's what is the worst case time complexity to sort them so that all the 0's come before the 1's. Use the most efficient sorting algorithm given the conditions of the array.
O(N)
    "
24,24,55,0.11509999632835388,"datum, search, structure, remove, data, list, store, want, add, use",29,0.09359999746084213,"find, number, step, item, average, many, index, table, insert, hash",0,0.05380000174045563,"pass, point, start, book, page, short, similar, look, dijkstra, repeat","['follow', 'method', 'use', 'find', 'number', 'phone', 'book', 'closely', 'resemble', 'interpolation', 'search']","Which of the following does the method used to find a number in a phone book most closely resemble?
  Interpolation Search
  "
25,25,14,0.3490999937057495,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.01489999983459711,"for, follow, time, complexity, true, give, statement, function, correct, run",11,0.011599999852478504,"complete, digit, count, least, significant, digits, basis, position, share, counting","['consider', 'follow', 'binary', 'search', 'treewhen', 'complete', 'post', 'order', 'traversal', 'correct']","Consider the following binary search treeWhen completing a post order traversal what is the correct order
 Jacqueline, Jenny, James, Katherine, Martha , Kenny , Jill
   "
26,26,14,0.38600000739097595,"tree, binary, order, node, leave, right, follow, avl, search, traversal",55,0.04170000180602074,"datum, search, structure, remove, data, list, store, want, add, use",16,0.01080000028014183,"for, follow, time, complexity, true, give, statement, function, correct, run","['consider', 'avl', 'tree', 'follow', 'insert', 'give', 'order', 'remove', 'would', 'output', 'order', 'traversal', 'tree']","Consider an AVL tree where the following have been inserted (in the given order):10, 2, 21, 55, 69, 9, 79, 10After removing 55, what would the output of the In Order traversal of the tree be ?
 2, 9, 10, 10, 21, 69, 79
   "
27,27,16,0.21330000460147858,"for, follow, time, complexity, true, give, statement, function, correct, run",42,0.053199999034404755,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",21,0.013199999928474426,"choose, requirement, rule, carey, understand, meet, simple, possible, mind, define","['follow', 'rule', 'for', 'big', 'false', 'if']","Which of the following rules for big O is FALSE?
   If g1(n) = O(f1(n)) and g2(n) = O(f2(n)), then g1(n)f1(n) = O(g2(n)f2(n))
 "
28,28,35,0.5400999784469604,"number, people, real, create, would, say, quickly, company, change, friend",24,0.13109999895095825,"hash, element, table, bucket, use, function, close, key, store, insert",55,0.05090000107884407,"datum, search, structure, remove, data, list, store, want, add, use","['organise', 'party', 'close', 'friend', 'workplace', 'try', 'figure', 'seating', 'plan', 'work', 'send', 'invite', 'invitee', 'know', 'number', 'friendship', 'large', 'number', 'invitee', 'think', 'graph', 'would', 'help', 'figure', 'seating', 'plan', 'invite', 'vertex', 'friendship', 'person', 'edgesalice', 'also', 'want', 'store', 'name', 'along', 'employee', 'would', 'number', 'digit', 'number', 'order', 'send', 'email', 'invite', 'for', 'partywhich', 'data', 'structure', 'suitable', 'for', 'use', 'for', 'seat', 'plan', 'open', 'hash', 'table', 'for', 'invite']","Alice is organising a dinner party between a few close friends at her workplace. She is trying to figure out the seating plan and working on sending the invites. Most of the invitees know each other, so the number of friendships is larger than the number of invitees. Alice thinks a graph would help her figure out the seating plan where all the invitees are vertices and friendships of each person are edges.Alice also wants to store names along with employee ID numbers, which are 5 digit numbers, in order to send out email invites for the party.Which data structures are most suitable for each of these uses?
  Adjacency matrix for the seating plan, open hash table for the invites.
  "
29,29,14,0.14470000565052032,"tree, binary, order, node, leave, right, follow, avl, search, traversal",24,0.08030000329017639,"hash, element, table, bucket, use, function, close, key, store, insert",16,0.08020000159740448,"for, follow, time, complexity, true, give, statement, function, correct, run","['run', 'time', 'try', 'find', 'element', 'avl', 'tree', 'consist', 'element', 'log']","What is the worst case run time when trying to find an element in an AVL tree that consists of m * 2n elements ?
  T(log m) + T(n)
  "
30,30,16,0.27149999141693115,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.1039000004529953,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",14,0.010900000110268593,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['follow', 'good', 'describe', 'run', 'time', 'for', 'while', 'good', 'luck', 'exam', 'for']","Which of the following best describes the run time of this algorithm:for(int i = 0; i<N; i++){ int j = -1; while(j<i){ System.out.println(""Good luck in your exams""); j++; } for(k=0; k<T; k++){ System.out.println(""You'll smash them!""); }}
T(N2+ NT)
    "
31,31,44,0.20440000295639038,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na",42,0.052000001072883606,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",55,0.051899999380111694,"datum, search, structure, remove, data, list, store, want, add, use","['theoretical', 'analysis', 'predict', 'trend', 'complexity', 'large', 'data', 'set', 'use']","What is theoretical analysis of an algorithm?
  Predicting the trend of the complexity as large data sets are used.
  "
32,32,56,0.3587999939918518,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",1,0.04039999842643738,"measurement, select, precision, option, accuracy, value, close, mathematical, technique, difference",55,0.03689999878406525,"datum, search, structure, remove, data, list, store, want, add, use","['list', 'sort', 'algorithm', 'consider', 'stable', 'however', 'unstable', 'depend', 'implementation', 'select', 'sort', 'selection', 'sort']","Listed below are sorting algorithms that are considered to be stable. However, one of them can be unstable depending on the implementation. Please select that sort.
  Selection Sort
  "
33,33,29,0.21199999749660492,"find, number, step, item, average, many, index, table, insert, hash",24,0.14399999380111694,"hash, element, table, bucket, use, function, close, key, store, insert",55,0.13899999856948853,"datum, search, structure, remove, data, list, store, want, add, use","['consider', 'close', 'hashtable', 'linear_probe', 'suppose', 'want', 'store', 'item', 'want', 'step', 'find', 'item', 'less', 'consider', 'loadl', 'small', 'whole', 'number', 'bucket']","Consider a closed hashtable H with linear probing. Suppose we want to store up to 900 items in H, and we want theaverageamount of steps to find any item to be less than 2.By considering the loadL, what is the smallest (whole) number of buckets H can have?
   1350
 "
34,34,1,0.27559998631477356,"measurement, select, precision, option, accuracy, value, close, mathematical, technique, difference",29,0.07169999927282333,"find, number, step, item, average, many, index, table, insert, hash",25,0.04399999976158142,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional","['many', 'method', 'consider', 'design', 'select', 'option', 'proper', 'design', 'technique', 'static', 'programming']","There are many methods to consider when designing an algorithm. Please select the option that is not a proper design technique.
 Static Programming
   "
35,35,56,0.5271000266075134,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.0746999979019165,"for, follow, time, complexity, true, give, statement, function, correct, run",0,0.0,,"['follow', 'sort', 'algorithm', 'equivalent', 'best', 'bad', 'average', 'time', 'unstable', 'for', 'example', 'selection', 'sort', 'best', 'bad', 'average', 'time', 'complexity', 'also', 'stable', 'thus', 'would', 'correct', 'answer', 'if', 'merge', 'sort']","Of the following sorting algorithms, which one has equivalent Best, Worst and Average time complexitiesandis not unstable?(For example, Selection Sort has a Best, Worst and Average time complexity of n^2. It is also stable, and thus would be a correct answer if it were there.)
 Merge Sort.
   "
36,36,30,0.23559999465942383,"operation, middle, link, array, perform, advantage, make, item, front, either",55,0.22689999639987946,"datum, search, structure, remove, data, list, store, want, add, use",56,0.17980000376701355,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['follow', 'process', 'datum', 'structure', 'singly', 'link', 'list', 'array', 'complete', 'follow', 'task', 'describe', 'fast', 'task', 'get', 'item', 'datum', 'structuretask', 'insert', 'new', 'item', 'front', 'data', 'structuretask', 'remove', 'item', 'middle', 'datum', 'answer', 'would', 'imply', 'link', 'list', 'perform', 'task', 'fast', 'array', 'perform', 'task', 'fastest', 'link', 'list', 'perform', 'task', 'fastest', 'correct', 'answer']","Of the following processes, which data structure (Singly Linked Lists or Arrays) can complete the following tasks described faster:Task 1: Getting to the 1000th item in the data structure.Task 2: Inserting a new item at the front of the data structure.Task 2: Removing an item from the middle of the data structure.Example: An answer of [LL : A : LL] would imply that the Linked List performed task 1 fastest, the Array performed task 2 fastest, and the Linked List performed task 3 fastest.(Not the correct answer).
   [A : LL : LL]
 "
37,37,16,0.10670000314712524,"for, follow, time, complexity, true, give, statement, function, correct, run",24,0.061500001698732376,"hash, element, table, bucket, use, function, close, key, store, insert",5,0.014399999752640724,"looping, letf, invent, queue, default, dump, bsta, legal, mergesort, worst_case","['calculate', 'give', 'hint', 'fact']","Calculate given that . (Hint: Use the fact that [x^p= x mod p] when p is prime).
 a = 3.
   "
38,38,0,0.016699999570846558,"pass, point, start, book, page, short, similar, look, dijkstra, repeat",1,0.016699999570846558,"measurement, select, precision, option, accuracy, value, close, mathematical, technique, difference",2,0.016699999570846558,"require, comparison, estimate, nee, minimum, identify, aka, clockwise, complexityo, outside",[],"What isDijkstra's algorithm?
 A shortest path algorithm
   "
39,39,0,0.016699999570846558,"pass, point, start, book, page, short, similar, look, dijkstra, repeat",1,0.016699999570846558,"measurement, select, precision, option, accuracy, value, close, mathematical, technique, difference",2,0.016699999570846558,"require, comparison, estimate, nee, minimum, identify, aka, clockwise, complexityo, outside",[],"What isDijkstra's algorithm?
 A shortest path algorithm
   "
40,40,56,0.31290000677108765,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.07479999959468842,"for, follow, time, complexity, true, give, statement, function, correct, run",42,0.062199998646974564,"big, definition, bind, set, notation, omega, final, lecture, theta, exact","['decide', 'run', 'sort', 'algorithm', 'row', 'name', 'respectively', 'give', 'function', 'would', 'take', 'large', 'number', 'comparison', 'assume', 'datum', 'begin', 'situation', 'week', 'slide', 'insertion', 'sort', 'insertion', 'sort', 'merge', 'sort']","Bob decides to run three sorting algorithms in a row, named a, b and c respectively. Given n = 16, which of these functions would takes the largest number of comparisons assuming the data begins in a ""worst case"" situation (2019 week 7a slide 5)
 1. insertion sort2. insertion sort3. merge sort
   "
41,41,40,0.2224999964237213,"array, slow, problem, may, random, element, access, integer, anywhere, face",16,0.12870000302791595,"for, follow, time, complexity, true, give, statement, function, correct, run",29,0.1151999980211258,"find, number, step, item, average, many, index, table, insert, hash","['consider', 'follow', 'problem', 'give', 'array', 'integer', 'find', 'maximum', 'product', 'integer', 'array', 'for', 'example', 'consider', 'array', 'maximum', 'product', 'form', 'pairwhat', 'complexity', 'efficient', 'algorithm', 'solve', 'problem']","Consider the following problem:Given an array of integers, find the maximum product of two integers in the array. For example, consider the array [ -10, -3, 5, 6 , -2 ]. The maximum product is formed by either the (-10, 3) or (5, 6) pair.What is the complexity of the most efficient algorithm that solves this problem?
 n
   "
42,42,14,0.26669999957084656,"tree, binary, order, node, leave, right, follow, avl, search, traversal",15,0.16269999742507935,"sequence, know, inorder, postorder, piece, thread, simultaneously, pointerthe, unordered, epre",49,0.09350000321865082,"int, result, return, term, many, num, body, function, heap, count","['consider', 'unordered', 'complete', 'binary', 'tree', 'contain', 'letter', 'know', 'traversal', 'tree', 'result', 'sequence', 'postorder', 'traversal', 'result', 'sequence', 'result', 'inorder', 'traversal']","Consider an unordered complete binary tree containing all letters from A to G. Knowing that a preorder traversal of the tree results in the sequence [ B, G, C, D, A, E, F ] and a postorder traversal results in the sequence [C, D, G, E, F, A, B ], what results from an inorder traversal?
  C, G, D, B, E, A, F
  "
43,43,56,0.1404000073671341,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",2,0.10930000245571136,"require, comparison, estimate, nee, minimum, identify, aka, clockwise, complexityo, outside",24,0.06960000097751617,"hash, element, table, bucket, use, function, close, key, store, insert","['use', 'ascend', 'order', 'merge', 'inputs', 'require', 'high', 'possible', 'number', 'comparison']","Using an ascending order merge sort, which of these inputs requires the highest possible number of comparisons?
     All of the above.
"
44,44,14,0.16009999811649323,"tree, binary, order, node, leave, right, follow, avl, search, traversal",42,0.08569999784231186,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",44,0.04969999939203262,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na","['maximum', 'perfectly', 'balance', 'search', 'tree', 'size', 'lecture', 'slide']","What is the maximum height of a perfectly balanced search tree of size n (2019 Lecture 8a slide 28)
log(n)
    "
45,45,56,0.1459999978542328,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",13,0.12919999659061432,"second, take, record, long, run, expect, likely, question, information, implementation",24,0.08269999921321869,"hash, element, table, bucket, use, function, close, key, store, insert","['bubble', 'take', 'list', 'element', 'long', 'take', 'sort', 'element', 'second']","A bubble sort algorithm takes 2ms to sort a list of 100 elements. How long should it take to sort 100000 (105) elements?
     2000 seconds
"
46,46,14,0.24050000309944153,"tree, binary, order, node, leave, right, follow, avl, search, traversal",39,0.06069999933242798,"node, sub, process, next, link, current, element, list, object, pointer",24,0.04830000177025795,"hash, element, table, bucket, use, function, close, key, store, insert","['order', 'would', 'element', 'follow', 'tree', 'process', 'apost', 'order', 'traversal']","What order would the elements of the following tree be processed in aPost Order Traversal? 5 / \ 3 7 / / \ 2 6 9
 (2,3,6,9,7,5)
   "
47,47,14,0.14329999685287476,"tree, binary, order, node, leave, right, follow, avl, search, traversal",24,0.11339999735355377,"hash, element, table, bucket, use, function, close, key, store, insert",29,0.04919999837875366,"find, number, step, item, average, many, index, table, insert, hash","['maximum', 'possible', 'number', 'element', 'binary', 'tree', 'depth']","What is the maximum possible number of elements in a binary tree of depth 7?
 255
   "
48,48,24,0.31450000405311584,"hash, element, table, bucket, use, function, close, key, store, insert",29,0.0568000003695488,"find, number, step, item, average, many, index, table, insert, hash",56,0.04839999973773956,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['many', 'different', 'insertion', 'sequence', 'key', 'value', 'use', 'hash', 'function', 'close', 'hash', 'table', 'linear_probing', 'give']","How many different insertion sequences of the key values, using the hash function h(k)=k mod 10, will result in the closed hash table with linear probing given below?
   40
 "
49,49,14,0.13979999721050262,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.07540000230073929,"for, follow, time, complexity, true, give, statement, function, correct, run",28,0.07039999961853027,"child, add, non, cause, leaf, full, slow, sift, treechild, nodeleaf","['select', 'correct', 'definition', 'for', 'full', 'binary', 'tree', 'node', 'child']","Select the correct definition for a full binary tree.
 All nodes have 0 or 2 children.
   "
50,50,56,0.16990000009536743,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.11630000174045563,"for, follow, time, complexity, true, give, statement, function, correct, run",39,0.06210000067949295,"node, sub, process, next, link, current, element, list, object, pointer","['list', 'quick', 'average', 'run', 'time', 'for', 'insert', 'if', 'doubly', 'link', 'list']","Which one of the List has the quickest average run time for insert() if n >= 1000;
  Doubly Linked List
  "
51,51,56,0.3061000108718872,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",0,0.21480000019073486,"pass, point, start, book, page, short, similar, look, dijkstra, repeat",55,0.09220000356435776,"datum, search, structure, remove, data, list, store, want, add, use","['imagine', 'sort', 'conscientious', 'computer', 'scientist', 'know', 'well', 'bubble', 'sort', 'algorithm', 'however', 'also', 'tire', 'want', 'implement', 'much', 'complex', 'algorithm', 'decide', 'sort', 'book', 'pass', 'leave', 'right', 'use', 'bubble', 'sort', 'find', 'last', 'book', 'pass', 'right', 'leave', 'use', 'bubble', 'sort', 'find', 'first', 'book', 'actually', 'faster', 'simple', 'bubble', 'sort', 'depend', 'start', 'order', 'book']","Imagine you are sorting a bookshelf. As you are a conscientious computer scientist, you know better than to use the bubble sort algorithm. However, you are also very tired and don't want to implement a much more complex algorithm. You decide to sort the books by doing one pass from left to right using bubble sort to find the last book, and then another pass from right to left, again using bubble sort, to find the first book. Is this actually faster than doing a simple bubble sort?
 Depends on the starting order of the books
   "
52,52,52,0.15649999678134918,"show, factor, prime, distribute, uniformly, distribution, improve, increase, reduce, advice",24,0.05350000038743019,"hash, element, table, bucket, use, function, close, key, store, insert",42,0.052799999713897705,"big, definition, bind, set, notation, omega, final, lecture, theta, exact","['fermat', 'little', 'theorem', 'specifically', 'slide', 'calculate']","Use Fermat's little theorem (specifically xp = x (mod p) where p is prime, Week 11b 2019, slide 12)to calculate 360% 29.
     23
"
53,53,35,0.4634000062942505,"number, people, real, create, would, say, quickly, company, change, friend",55,0.21060000360012054,"datum, search, structure, remove, data, list, store, want, add, use",29,0.0925000011920929,"find, number, step, item, average, many, index, table, insert, hash","['hire', 'housing', 'create', 'system', 'allow', 'keep', 'track', 'address', 'currently', 'available', 'spend', 'many', 'decade', 'support', 'people', 'area', 'find', 'perfect', 'home', 'recently', 'begin', 'fall', 'behind', 'new', 'tech', 'base', 'company', 'determine', 'catch', 'ensure', 'provide', 'high', 'quality', 'service', 'canthe', 'system', 'require', 'follow', 'quality', 'must', 'quick', 'search', 'for', 'give', 'address', 'find', 'whether', 'currently', 'store', 'system', 'access', 'detail', 'speed', 'important', 'space', 'use', 'ensure', 'user', 'leave', 'wait', 'for', 'long', 'while', 'system', 'run', 'easy', 'add', 'new', 'address', 'system', 'become', 'available', 'remove', 'take', 'market', 'datum', 'need', 'sorted', 'employee', 'personally', 'work', 'customer', 'recommend', 'different', 'home', 'search', 'for', 'entry', 'directly', 'rough', 'estimate', 'many', 'address', 'need', 'store', 'give', 'time', 'number', 'tend', 'vary', 'large', 'margin', 'throughout', 'year', 'due', 'seasonal', 'buyerswhich', 'datum', 'structure', 'implement', 'new', 'system', 'open', 'hash', 'table']","You have been hired by the Housing Opportunities of Northern Delaware Association to create a system which allows them to keep track of which addresses they currently have available. They have spent many decades supporting the people of the area in finding the perfect home, but have recently began to fall behind newer tech-based companies, and are determined to catch up and ensure they provide the highest quality service they can.The system is required to have the following qualities:- It must be quick to search for a given address, to find whether or not it is currently stored in the system, and to access its details. Speed is more important than space used, to ensure users are not left waiting for too long while the system runs.- It should be easy to add new addresses to the system as they become available, and to remove them once they are taken off the market.- The data does not need to be sorted, as employees personally work with each customer to recommend different homes, and so will be searching for entries directly.- You have only a rough estimate of how many addresses will need to be stored at a given time, and the number tends to vary by a large margin throughout the year due to seasonal buyers.Which data structure should you implement in the new system?
  An Open Hash Table
  "
54,54,14,0.1485999971628189,"tree, binary, order, node, leave, right, follow, avl, search, traversal",55,0.07000000029802322,"datum, search, structure, remove, data, list, store, want, add, use",3,0.051100000739097595,"case, fastest, ofbubble, itsb, distinct, description, fit, stableb, performance, nearly","['many', 'case', 'remove', 'node', 'binary', 'search', 'tree']","How many cases are there when we are removing a node from a binary search tree?
 3
   "
55,55,14,0.15330000221729279,"tree, binary, order, node, leave, right, follow, avl, search, traversal",29,0.07460000365972519,"find, number, step, item, average, many, index, table, insert, hash",16,0.06620000302791595,"for, follow, time, complexity, true, give, statement, function, correct, run","['many', 'node', 'access', 'search', 'for', 'number', 'follow', 'tree']","How many nodes are accessed during a breadth-first search for the number 11 in the following tree:
     5
"
56,56,56,0.12559999525547028,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",55,0.06210000067949295,"datum, search, structure, remove, data, list, store, want, add, use",43,0.05480000004172325,"space, nlogn, worst, double, do, enough, arraylist, namortise, collection, efficiency","['follow', 'structure', 'space', 'complexity', 'list']","Which of the following data structures has a worst case space complexity of O(n log n)?
   Skip List
 "
57,57,56,0.385699987411499,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.09059999883174896,"for, follow, time, complexity, true, give, statement, function, correct, run",49,0.03579999879002571,"int, result, return, term, many, num, body, function, heap, count","['follow', 'sort', 'algorithm', 'order', 'correct', 'descending', 'order', 'term', 'good', 'run', 'time', 'if', 'selection', 'sort', 'insertion', 'sort', 'merge', 'sort']","Which one of the following sorting algorithms order is the correct descending order in term of best run time if n >= 100?
     Selection sort > Insertion sort > Merge sort
"
58,58,56,0.1404999941587448,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",14,0.06629999727010727,"tree, binary, order, node, leave, right, follow, avl, search, traversal",35,0.014499999582767487,"number, people, real, create, would, say, quickly, company, change, friend","['example', 'follow', 'type', 'algorithm', 'greedy']","Dijkstra algorithm is a example of which of the following type of algorithm
   greedy
 "
59,59,14,0.2513999938964844,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.016100000590085983,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.013100000098347664,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['pre', 'order', 'follow', 'tree', 'give', 'output']","Pre-Order traversal on the following tree will give which output? 9 / \ 6 15 / \ \ 1 8 21 / \ 7 25
 9, 6, 1, 8, 7, 15, 21, 25
   "
60,60,16,0.12630000710487366,"for, follow, time, complexity, true, give, statement, function, correct, run",29,0.09920000284910202,"find, number, step, item, average, many, index, table, insert, hash",55,0.09220000356435776,"datum, search, structure, remove, data, list, store, want, add, use","['follow', 'data', 'structure', 'slow', 'average', 'time', 'complexity', 'for', 'insert', 'item', 'skip', 'list']","Which of the following data structures has the slowest average time complexity for inserting an item?
  Skip List
  "
61,61,16,0.09929999709129333,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.06449999660253525,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",29,0.061799999326467514,"find, number, step, item, average, many, index, table, insert, hash","['average', 'search', 'time', 'for', 'give', 'element', 'skip', 'list', 'average', 'case', 'log']","What is the average and worst case search time for a given element in a skip list?
   Worst Case: O(n)Average Case: O(log n)
 "
62,62,24,0.3833000063896179,"hash, element, table, bucket, use, function, close, key, store, insert",39,0.12839999794960022,"node, sub, process, next, link, current, element, list, object, pointer",29,0.11749999970197678,"find, number, step, item, average, many, index, table, insert, hash","['use', 'hash', 'function', 'add', 'function', 'open', 'hash', 'table', 'hash', 'table', 'index', 'store', 'pointer', 'head', 'element', 'singly', 'link', 'list', 'store', 'value', 'add', 'hash', 'tableafter', 'follow', 'element', 'insert', 'order', 'write', 'many', 'value', 'store', 'link', 'list', 'point', 'index', 'index', 'respectively', 'note', 'head', 'pointer', 'count', 'value', 'store', 'value', 'add', 'hash', 'table', 'respectively']","I am using the hash function H(x) = x % 7 to add functions to an open hash table. This hash table itself is indexed 0 to 6 and stores pointers to the head elements of singly linked lists which store the values added to the hash table.After the following elements are inserted (in the order they are written), how many values are stored in the linked lists that are pointed to by index 0 and index 6 respectively? (Please note that the head pointer does NOT count as a value stored)Values to add to the hash table: 49, 22, 36, 135, 48, 73, 209, 105, 1042, 591, 5, 256.
   2 and 3 respectively
 "
63,63,56,0.1941000074148178,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",38,0.14409999549388885,"small, motorway, occur, strategy, city, major, divisible, scenario, repeatedly, shelf",0,0.08649999648332596,"pass, point, start, book, page, short, similar, look, dijkstra, repeat","['take', 'follow', 'pseudocode', 'for', 'sort', 'book', 'height', 'shelf', 'shelf', 'book', 'for', 'find', 'small', 'book', 'slot', 'swap', 'small', 'type', 'sort', 'occur', 'selection', 'sort']","Take the following pseudocode for sorting books by height on a shelf:void sort(shelf of N books){ for i = 1 to N { find the smallest book between slots i and N swap this smallest book with book i; }}Which type of sort has occurred?
   Selection sort
 "
64,64,29,0.1949000060558319,"find, number, step, item, average, many, index, table, insert, hash",16,0.05009999871253967,"for, follow, time, complexity, true, give, statement, function, correct, run",12,0.04650000110268593,"cost, dealership, factory, location, deliver, car, associate, single, maximise, cheap","['for', 'hash', 'table', 'number', 'occupy', 'location', 'divide', 'capacity']","The load factor for a hash table is:
   The number of occupied locations divided by the capacity
 "
65,65,25,0.2151000052690506,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional",56,0.09920000284910202,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",55,0.07819999754428864,"datum, search, structure, remove, data, list, store, want, add, use","['datum', 'structure', 'good', 'suit', 'description', 'graphand', 'asymptotic', 'memory', 'usagefew', 'vertex', 'many', 'edge', 'dense']","Which Data Structure best suits this description of a graph,and what is it's asymptotic memory usage?few vertices and many edges (dense)
Adjacency Matrix?(v^2)
    "
66,66,32,0.06710000336170197,"log, base, bottom, many, become, simplify, less, allow, level, multiple",1,0.06109999865293503,"measurement, select, precision, option, accuracy, value, close, mathematical, technique, difference",16,0.05700000002980232,"for, follow, time, complexity, true, give, statement, function, correct, run","['follow', 'hashing', 'technique', 'base']","Which of the following hashing techniques is based on randomisation?
   Universal hashing
 "
67,67,14,0.21469999849796295,"tree, binary, order, node, leave, right, follow, avl, search, traversal",30,0.15000000596046448,"operation, middle, link, array, perform, advantage, make, item, front, either",42,0.04500000178813934,"big, definition, bind, set, notation, omega, final, lecture, theta, exact","['produce', 'reverse', 'polish', 'notation', 'rpn', 'tree', 'make', 'operation', 'number', 'post', 'order', 'traversal']","Which method of tree traversal will produce reverse polish notation (RPN) from a tree made of operations and numbers?
  Post-Order Traversal
  "
68,68,56,0.28360000252723694,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.013299999758601189,"for, follow, time, complexity, true, give, statement, function, correct, run",29,0.012600000016391277,"find, number, step, item, average, many, index, table, insert, hash","['sort', 'algorithm', 'good', 'average', 'time', 'complexity', 'sort']","Which two sorting algorithms have a best (O), average (?), and worst-case (O) time complexity of n(log(n))?
  Merge Sort & Heap Sort
  "
69,69,35,0.3880999982357025,"number, people, real, create, would, say, quickly, company, change, friend",56,0.11289999634027481,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",24,0.08190000057220459,"hash, element, table, bucket, use, function, close, key, store, insert","['hire', 'surgery', 'create', 'system', 'hold', 'patient', 'record', 'surgery', 'extremely', 'busy', 'retrieve', 'record', 'must', 'fast', 'possible', 'surgery', 'state', 'previous', 'system', 'allow', 'sort', 'record', 'feature', 'longer', 'require', 'many', 'patient', 'join', 'leave', 'insertion', 'deletion', 'must', 'fast', 'hash', 'table', 'open', 'hashing']","You have been hired by a surgery to create a system that can hold patient records. The surgery is extremely busy, so retrieving records must be as fast as possible. The surgery has stated that the previous system allowed them to sort records, but this feature was no longer required. As many patients join and leave, insertion and deletion must both be very fast.
Hash Table (Open Hashing)
    "
70,70,56,0.2567000091075897,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.1437000036239624,"for, follow, time, complexity, true, give, statement, function, correct, run",49,0.05510000139474869,"int, result, return, term, many, num, body, function, heap, count","['sort', 'arrlength', 'for', 'int', 'for', 'int', 'if', 'name', 'bad', 'complexity', 'average', 'complexity', 'good', 'complexity', 'selection', 'sort']","Analyse the sorting algorithm belowvoid sort(int arr[]){ int n = arr.length; for (int i = 0; i < n-1; i++) { int min_idx = i; for (int j = i+1; j < n; j++) if (arr[j] < arr[min_idx]) min_idx = j; int temp = arr[min_idx]; arr[min_idx] = arr[i]; arr[i] = temp;}State the name of the algorithm, the worst complexity, average complexity and best complexity
  Selection sort, n^2, n^2, n^2
  "
71,71,54,0.4722000062465668,"like, could, treelook, book, alphabetical, alphabetically, back, system, wherever, home",56,0.08489999920129776,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.041600000113248825,"for, follow, time, complexity, true, give, statement, function, correct, run","['like', 'book', 'alphabetically', 'go', 'away', 'mother', 'buy', 'book', 'for', 'monthhowever', 'stick', 'emma', 'system', 'slide', 'book', 'wherever', 'convenient', 'rearrange', 'exist', 'come', 'home', 'vacation', 'want', 'sort', 'book', 'back', 'alphabetical', 'orderwhat', 'fast', 'could', 'insertion', 'sort']","Emma likes to organise her book collection alphabetically. When she goes away to Uni, her mother buys a few books for her every month.However, she doesn't stick to Emma's system and just slides the books wherever it's more convenient. She doesn't rearrange the existing books.When Emma comes home on vacation, she wants to sort her books back into alphabetical order.What's the fastest algorithm that Emma could use?
  Insertion sort
  "
72,72,56,0.18880000710487366,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",39,0.013799999840557575,"node, sub, process, next, link, current, element, list, object, pointer",14,0.013799999840557575,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['equivalent', 'sort', 'insertion', 'sort']","A shell sort where h=1 is equivalent to which other sort?
 Insertion sort
   "
73,73,56,0.2298000007867813,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",3,0.05469999834895134,"case, fastest, ofbubble, itsb, distinct, description, fit, stableb, performance, nearly",55,0.05130000039935112,"datum, search, structure, remove, data, list, store, want, add, use","['follow', 'search', 'algorithm', 'fastest', 'if', 'dataset', 'already', 'sort', 'bubble', 'sort']","Which of the following search algorithms is fastest if the dataset is already sorted?
Bubble sort
    "
74,74,14,0.2240999937057495,"tree, binary, order, node, leave, right, follow, avl, search, traversal",6,0.013399999588727951,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly",56,0.013299999758601189,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['output', 'pre', 'order', 'traversal', 'tree']","What is the output of pre-order traversal on this tree?
 8,3,1,6,4,7,10,14,13
   "
75,75,14,0.3765000104904175,"tree, binary, order, node, leave, right, follow, avl, search, traversal",56,0.01140000019222498,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.010999999940395355,"for, follow, time, complexity, true, give, statement, function, correct, run","['consider', 'follow', 'binary', 'tree', 'would', 'outcome', 'print', 'node', 'via', 'order', 'traversal']","Consider the following binary tree:What would be the outcome of printing each node via in-order traversal?
 D B G E H A C F
   "
76,76,56,0.2567000091075897,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",30,0.0478999987244606,"operation, middle, link, array, perform, advantage, make, item, front, either",0,0.04769999906420708,"pass, point, start, book, page, short, similar, look, dijkstra, repeat","['if', 'perform', 'bubble', 'sort', 'list', 'many', 'swap', 'carry', 'pass']","If you perform a bubble sort on the list:62, 90, 14, 43, 54, 94, 18, 74, 3, 49How many swaps will have been carried out after the 5th pass?
23
    "
77,77,29,0.2827000021934509,"find, number, step, item, average, many, index, table, insert, hash",24,0.11869999766349792,"hash, element, table, bucket, use, function, close, key, store, insert",16,0.08579999953508377,"for, follow, time, complexity, true, give, statement, function, correct, run","['give', 'hash', 'function', 'open', 'hashing', 'table', 'item', 'take', 'comparison', 'find', 'if', 'follow', 'item', 'add', 'use', 'give', 'hashing', 'function']","Given the hash function of % 11 into an open hashing table, which item will take the most comparisons to find if the following items are added using the given hashing function?11, 17, 32, 132, 4, 9, 100, 34, 25, 98, 165, 77, 40.
 77
   "
78,78,56,0.3246000111103058,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",3,0.04560000076889992,"case, fastest, ofbubble, itsb, distinct, description, fit, stableb, performance, nearly",16,0.011599999852478504,"for, follow, time, complexity, true, give, statement, function, correct, run","['sort', 'algorithm', 'good', 'case', 'time', 'complexity', 'insertion', 'sort', 'bubble', 'sort']","Which two sorting algorithms have a best case time complexity of O(n)
   insertion sort and bubble sort
 "
79,79,29,0.37369999289512634,"find, number, step, item, average, many, index, table, insert, hash",24,0.20980000495910645,"hash, element, table, bucket, use, function, close, key, store, insert",0,0.0,,"['consider', 'implement', 'hash', 'table', 'possible', 'bucket', 'intend', 'add', 'maximum', 'key', 'tablethe', 'hash', 'table', 'closed', 'use', 'linear', 'average', 'number', 'step', 'take', 'insert', 'find', 'item', 'hash', 'table']","Consider you are implementing a hash table with 200 possible buckets, and intend to add a maximum of 150 keys to the table.The hash table is closed and uses linear probing.What is the average number of steps taken to insert/find an item in this hash table?
 ~2.5
   "
80,80,56,0.2791000008583069,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",0,0.07779999822378159,"pass, point, start, book, page, short, similar, look, dijkstra, repeat",52,0.043699998408555984,"show, factor, prime, distribute, uniformly, distribution, improve, increase, reduce, advice","['sort', 'show', 'initial', 'list', 'pass', 'pass', 'sort', 'algorithm', 'use', 'quick', 'sort']","The result of each pass of a sorting algorithm is shown below:Initial list: 3 4 2 1 7 5 8 61st pass: 2 1 3 4 7 5 8 62nd pass: 1 2 3 4 7 5 8 63rd pass: 1 2 3 4 5 6 7 84th pass: 1 2 3 4 5 6 7 8Which sorting algorithm was used?
  Quick sort
  "
81,81,55,0.33399999141693115,"datum, search, structure, remove, data, list, store, want, add, use",16,0.04270000010728836,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.013199999928474426,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['datum', 'structure', 'implement', 'enable', 'add', 'begin', 'remove', 'end', 'complexity', 'ring', 'buffer']","Which data structure can be implemented to enable both adding at the beginning and removing at the end to have O(1) complexity?
Ring Buffer
    "
82,82,14,0.1468999981880188,"tree, binary, order, node, leave, right, follow, avl, search, traversal",55,0.10589999705553055,"datum, search, structure, remove, data, list, store, want, add, use",39,0.013799999840557575,"node, sub, process, next, link, current, element, list, object, pointer","['datum', 'structure', 'node', 'leave', 'branch', 'tree']","Which data structure has nodes, leaves and branches?
Tree
    "
83,83,55,0.21709999442100525,"datum, search, structure, remove, data, list, store, want, add, use",14,0.09120000153779984,"tree, binary, order, node, leave, right, follow, avl, search, traversal",56,0.012400000356137753,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['datum', 'structure', 'degenerate', 'binary', 'tree', 'similar', 'linked', 'list']","Which data structure is a degenerate binary tree most similar to?
   Linked List
 "
84,84,38,0.0997999981045723,"small, motorway, occur, strategy, city, major, divisible, scenario, repeatedly, shelf",24,0.08009999990463257,"hash, element, table, bucket, use, function, close, key, store, insert",14,0.029100000858306885,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['divisible', 'small', 'possible', 'value']","(529 - x) is divisible by 29, x>0. What is the smallest possible value of x?
 5
   "
85,85,38,0.0997999981045723,"small, motorway, occur, strategy, city, major, divisible, scenario, repeatedly, shelf",24,0.07999999821186066,"hash, element, table, bucket, use, function, close, key, store, insert",14,0.029200000688433647,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['divisible', 'small', 'possible', 'value']","(529 - x) is divisible by 29, x>0. What is the smallest possible value of x?
 5
   "
86,86,14,0.1728000044822693,"tree, binary, order, node, leave, right, follow, avl, search, traversal",29,0.06239999830722809,"find, number, step, item, average, many, index, table, insert, hash",56,0.013700000010430813,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['type', 'partial', 'order', 'represent', 'horizontal', 'order']","What type of partial order does this represent?(<H) = (=V) ? (<S) ? (=V)
Horizontal order
    "
87,87,39,0.49059998989105225,"node, sub, process, next, link, current, element, list, object, pointer",24,0.0544000007212162,"hash, element, table, bucket, use, function, close, key, store, insert",55,0.036400001496076584,"datum, search, structure, remove, data, list, store, want, add, use","['abstract', 'structure', 'use', 'node', 'contain', 'element', 'pointer', 'indicate', 'head', 'lead', 'element', 'potentially', 'indicate', 'tail', 'element', 'node', 'contain', 'reference', 'node', 'ahead', 'behind', 'doubly', 'link', 'list']","This abstract data structure uses nodes to contains its elements, has a pointer that indicates its head, or leading, element (and potentially one to indicate its tail element) and each of its nodes contains a reference to both the node ahead of it and behind it. What is it?
  Doubly Linked List
  "
88,88,43,0.2928999960422516,"space, nlogn, worst, double, do, enough, arraylist, namortise, collection, efficiency",56,0.22470000386238098,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",13,0.07079999893903732,"second, take, record, long, run, expect, likely, question, information, implementation","['own', 'large', 'selection', 'vinyl', 'record', 'inherit', 'record', 'recently', 'decease', 'motherhis', 'mother', 'exact', 'amount', 'double', 'decide', 'good', 'time', 'finally', 'sort', 'collection', 'arranging', 'record', 'alphabetical', 'order', 'whilst', 'add', 'new', 'onesjimmy', 'preference', 'come', 'sort', 'collection', 'space', 'for', 'sort', 'enough', 'storage', 'for', 'record', 'less', 'large', 'number', 'item', 'sort', 'want', 'do', 'fast', 'possible', 'quick', 'sort']","Jimmy owns a large selection of vinyl records. He has just inherited more records from his recently deceased mother.His mother had the exact amount of records that Jimmy has, doubling Jimmy's collection.Jimmy has decided that now is a good time to finally sort his collection by arranging the records in alphabetical order, whilst adding the new ones.Jimmy has some preferences when it comes to sorting the collection:- He doesn't have any more space for sorting. He has enough storage for all of the records, no more, no less.- With a large number of items to sort, he wants this done as fast as possible.
   Quick sort
 "
89,89,14,0.09600000083446503,"tree, binary, order, node, leave, right, follow, avl, search, traversal",38,0.051899999380111694,"small, motorway, occur, strategy, city, major, divisible, scenario, repeatedly, shelf",16,0.01889999955892563,"for, follow, time, complexity, true, give, statement, function, correct, run","['if', 'divisible', 'value']","If 617 – x is divisible by 17.What is the value of x?
 6
   "
90,90,44,0.25429999828338623,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na",16,0.1868000030517578,"for, follow, time, complexity, true, give, statement, function, correct, run",29,0.040699999779462814,"find, number, step, item, average, many, index, table, insert, hash","['follow', 'statement', 'regard', 'complexity', 'isnot', 'correct', 'computing', 'complexity', 'multi', 'input', 'algorithm', 'need', 'consider', 'size', 'large', 'input']","Which of the following statements regarding complexity isnot correct?
  When computing the complexity of multi-input algorithms, we only need to consider the size of the largest input
  "
91,91,49,0.2554999887943268,"int, result, return, term, many, num, body, function, heap, count",16,0.1746000051498413,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.010099999606609344,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['follow', 'complexity', 'int', 'count', 'for', 'int', 'for', 'count', 'for', 'int', 'count', 'return', 'count']","The following algorithm has time complexity O(f(n))int count = 0;for(int i = 0; i<n; i++){ for(int j = 0; j<(10*n); j++){ count++; } }for(int k = 0; k<n; k++){ count++; }return count;what is f(n)?
   n2
 "
92,92,14,0.4293000102043152,"tree, binary, order, node, leave, right, follow, avl, search, traversal",3,0.039400000125169754,"case, fastest, ofbubble, itsb, distinct, description, fit, stableb, performance, nearly",24,0.013000000268220901,"hash, element, table, bucket, use, function, close, key, store, insert","['see', 'unbalanced', 'tree', 'tree', 'balance', 'right', 'left', 'case', 'output', 'if', 'newly', 'balance', 'tree', 'use', 'order', 'traversal']","Below we see an unbalanced tree. 5 / \ 1 6 \ 4 / 3The tree is balanced with the Right Left case, what is the output if we traverse the newly balanced tree using in order traversal?
 1, 3, 4, 5, 6
   "
93,93,56,0.10790000110864639,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",49,0.09070000052452087,"int, result, return, term, many, num, body, function, heap, count",16,0.08659999817609787,"for, follow, time, complexity, true, give, statement, function, correct, run","['let', 'time', 'taken', 'heap', 'sort', 'number', 'element', 'sort', 'follow', 'true', 'log']","Let the time taken to execute a heap sort be T(n) (where n is the number of elements to be sorted).Which of the following is true?
  T is O(log(n)), T is O(n), and T is O(2n)
  "
94,94,13,0.2840000092983246,"second, take, record, long, run, expect, likely, question, information, implementation",16,0.013000000268220901,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.012299999594688416,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['take', 'second', 'run', 'long', 'take', 'run', 'second']","An algorithm of complexity ?(2^n) takes 2 seconds to run at n=4. How long will it take to run at n=10?
 128 seconds
   "
95,95,42,0.10379999876022339,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",16,0.05959999933838844,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.015399999916553497,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['time', 'week', 'slide']","What is the worst case time complexity of a heap sort (2019 week 7a slide 5)
 O(n*log(n))
   "
96,96,56,0.3131999969482422,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",32,0.04969999939203262,"log, base, bottom, many, become, simplify, less, allow, level, multiple",16,0.011800000444054604,"for, follow, time, complexity, true, give, statement, function, correct, run","['follow', 'sort', 'algorithm', 'unstable', 'average', 'time', 'complexityt', 'log', 'quick', 'sort']","Which of the following sorting algorithms is unstable and has average time complexityT(n log(n))?
     Quick Sort
"
97,97,49,0.24300000071525574,"int, result, return, term, many, num, body, function, heap, count",16,0.16840000450611115,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.010400000028312206,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['time', 'follow', 'function', 'int', 'int', 'int', 'count', 'for', 'for', 'count', 'return', 'count']","What is the time complexity of the following function:int f(int n){ int count = 0; for(int i = 0; i<=n; i++){ for(int j = i; j>0; i++){ j/=2; count++; } } return count;}
n
    "
98,98,14,0.4187000095844269,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.050700001418590546,"for, follow, time, complexity, true, give, statement, function, correct, run",3,0.03720000013709068,"case, fastest, ofbubble, itsb, distinct, description, fit, stableb, performance, nearly","['see', 'unbalanced', 'tree', 'correct', 'case', 'for', 'balance', 'output', 'if', 'traverse', 'tree', 'use', 'post', 'order', 'traversal', 'right', 'left', 'caseoutput']","Below we see an unbalanced tree. 5 / \ 1 6 \ 4 / 3What is the correct case for balancing and what is the output if we traverse the tree using post order traversal?
  Right Left caseOutput of 1, 4, 3, 6, 5
  "
99,99,13,0.1995999962091446,"second, take, record, long, run, expect, likely, question, information, implementation",16,0.12710000574588776,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.04919999837875366,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['if', 'order', 'sqrt', 'take', 'second', 'run', 'expect', 'time', 'for', 'second']","If an algorithm of order O( sqrt(n) ) takes 4 seconds to run at n = 50, what is the expected time for n = 200?
  8 seconds
  "
100,100,29,0.18070000410079956,"find, number, step, item, average, many, index, table, insert, hash",16,0.12700000405311584,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.013700000010430813,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['time', 'complexity', 'high', 'average', 'casekey', 'objecti', 'index', 'add']","Which array function has a worst case time complexity which is higher than its average case?Key:o = objecti = index
 add(o)
   "
101,101,29,0.21539999544620514,"find, number, step, item, average, many, index, table, insert, hash",24,0.1331000030040741,"hash, element, table, bucket, use, function, close, key, store, insert",55,0.0430000014603138,"datum, search, structure, remove, data, list, store, want, add, use","['consider', 'closed', 'hash', 'table', 'index', 'insert', 'follow', 'data', 'value', 'occupy', 'place', 'index']","Consider a closed hash table where h(x) = x% 8 where the index is 0 through 7. When inserting the following data, which value occupies the place indexed 4?27, 145, 87, 45, 23, 56, 79, 135
  56
  "
102,102,14,0.07329999655485153,"tree, binary, order, node, leave, right, follow, avl, search, traversal",9,0.05939999967813492,"visit, look_like, car, company, manufacture, state, define, previously, hit, dead",25,0.05820000171661377,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional","['result', 'use', 'traversal', 'graph', 'printing', 'visit']","What is the result of using a breadth first traversal on this graph, printing every node visited?
   A,B,C,D,E
 "
103,103,24,0.35839998722076416,"hash, element, table, bucket, use, function, close, key, store, insert",29,0.011500000022351742,"find, number, step, item, average, many, index, table, insert, hash",16,0.010999999940395355,"for, follow, time, complexity, true, give, statement, function, correct, run","['closed', 'hash', 'function', 'slot', 'element', 'insert', 'hash', 'table', 'slot', 'respectively']","A closed hash function h(x) = x%13 has slots 0 through to 12. When the elements (2, 55, 4, 26, 11, 14, 37, 30, 43, 40, 44, 6, 23) are inserted into the Hash table, in what slots are 43, 6 and 44 respectively?
 6th, 9th, 8th
   "
104,104,14,0.18639999628067017,"tree, binary, order, node, leave, right, follow, avl, search, traversal",15,0.08479999750852585,"sequence, know, inorder, postorder, piece, thread, simultaneously, pointerthe, unordered, epre",16,0.07540000230073929,"for, follow, time, complexity, true, give, statement, function, correct, run","['binary', 'tree', 'correct', 'for', 'sequence', 'belowin', 'order', 'epre', 'order']","Which binary tree is correct for the sequences below?In-order : B, A, D, C, Epre-order : A, B, C, D, E
 A / \ B C / \ D E
   "
105,105,14,0.26660001277923584,"tree, binary, order, node, leave, right, follow, avl, search, traversal",52,0.04859999939799309,"show, factor, prime, distribute, uniformly, distribution, improve, increase, reduce, advice",16,0.019300000742077827,"for, follow, time, complexity, true, give, statement, function, correct, run","['follow', 'correct', 'post', 'order', 'traversal', 'binary', 'tree', 'show']","Which of the following is the correct post-order traversal of the binary tree shown below? 2 / \ 31 14 / \ / \12 7 25 16
 12, 7, 31, 25, 16, 14, 2
   "
106,106,16,0.26100000739097595,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.09799999743700027,"tree, binary, order, node, leave, right, follow, avl, search, traversal",44,0.03889999911189079,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na","['consider', 'follow', 'statement', 'follow', 'function', 'follow', 'statement', 'correct', 'order', 'least', 'order']","Consider the following statements about the following functions: , , and .Which one of the following statements is correct?
 is of order at least and is of order at most
   "
107,107,56,0.1152999997138977,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.10580000281333923,"for, follow, time, complexity, true, give, statement, function, correct, run",42,0.08550000190734863,"big, definition, bind, set, notation, omega, final, lecture, theta, exact","['average', 'big', 'theta', 'time', 'complexity', 'for', 'quicksort']","What is the average Big Theta time complexity for Quicksort?

    "
108,108,14,0.24300000071525574,"tree, binary, order, node, leave, right, follow, avl, search, traversal",32,0.051600001752376556,"log, base, bottom, many, become, simplify, less, allow, level, multiple",55,0.012900000438094139,"datum, search, structure, remove, data, list, store, want, add, use","['consider', 'height', 'perfectly', 'balance', 'search', 'tree', 'log']","What is considered a maximum height of a perfectly balanced search tree?
   log(n)
 "
109,109,16,0.3111000061035156,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.012299999594688416,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",14,0.011900000274181366,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['consider', 'follow', 'asymptotic', 'time', 'complexity', 'for', 'for', 'for']","Consider the following algorithm with asymptotic time complexity O(f(n)).for (int i=0; i<20*n; i++) for(int j=0; j<n; j++) System.out.println(""A"");for (int i=1; i<n; i++) System.out.println(""B"");What is f(n)?
  
  "
110,110,16,0.31119999289512634,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.012299999594688416,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",14,0.011900000274181366,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['consider', 'follow', 'asymptotic', 'time', 'complexity', 'for', 'for', 'for']","Consider the following algorithm with asymptotic time complexity O(f(n)).for (int i=0; i<20*n; i++) for(int j=0; j<n; j++) System.out.println(""A"");for (int i=1; i<n; i++) System.out.println(""B"");What is f(n)?
  
  "
111,111,39,0.43380001187324524,"node, sub, process, next, link, current, element, list, object, pointer",24,0.08020000159740448,"hash, element, table, bucket, use, function, close, key, store, insert",14,0.033900000154972076,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['make', 'xor', 'memory', 'efficient', 'doubly', 'link', 'list', 'different', 'standard', 'doubly', 'link', 'list', 'node', 'pointer', 'use', 'bitwise', 'exclusive', 'combination', 'previous', 'next', 'pointer', 'for', 'node', 'allow', 'forward', 'backward', 'traversal']","What makes an XOR or memory-efficient doubly-linked list different from a standard doubly-linked list?
 Each node has only one pointer using the bitwise exclusive or combination of the previous and next pointers for that node allowing forward and backward traversal.
   "
112,112,42,0.10300000011920929,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",16,0.055799998342990875,"for, follow, time, complexity, true, give, statement, function, correct, run",49,0.055799998342990875,"int, result, return, term, many, num, body, function, heap, count","['let', 'complexity', 'big', 'notation']","Let , . What is the complexity in big O notation of ?

    "
113,113,56,0.27300000190734863,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.17399999499320984,"for, follow, time, complexity, true, give, statement, function, correct, run",24,0.10670000314712524,"hash, element, table, bucket, use, function, close, key, store, insert","['follow', 'for', 'function', 'sorterb', 'list', 'for', 'length', 'list', 'value', 'list', 'while', 'list', 'value', 'list', 'list', 'end', 'while', 'list', 'value', 'end', 'forreturn', 'list']","Which of the following is the pseudo code for insertion sort?
 function sorterB(list) for i from 1 to length[list]-1 value = list[i] j = i-1 while j >= 0 and list[j] > value list[j+1] = list[j] j = j-1 end while list[j+1] = value end forreturn list
   "
114,114,24,0.3027999997138977,"hash, element, table, bucket, use, function, close, key, store, insert",20,0.04809999838471413,"call, system, avoid, determine, matrix, engine, bugle, pagerank, inthis, involve",16,0.03720000013709068,"for, follow, time, complexity, true, give, statement, function, correct, run","['hash', 'table', 'call', 'element', 'would', 'assign', 'bucket', 'give', 'hash', 'function', 'collision']","In a hash table, what is it called when 2 or more elements would be assigned to the same bucket given their hash function?
  Collision
  "
115,115,13,0.2840000092983246,"second, take, record, long, run, expect, likely, question, information, implementation",44,0.10779999941587448,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na",16,0.043299999088048935,"for, follow, time, complexity, true, give, statement, function, correct, run","['take', 'second', 'run', 'input', 'take', 'second', 'run', 'input', 'if', 'input', 'long', 'likely', 'take']","An algorithm takes 3 seconds to run with an input n = 10 and it takes 81 seconds to run with an input n = 30. If we run the algorithm with an input of n = 100, how long is it most likely to take?
  3000s
  "
116,116,39,0.4374000132083893,"node, sub, process, next, link, current, element, list, object, pointer",55,0.06870000064373016,"datum, search, structure, remove, data, list, store, want, add, use",0,0.0,,"['field', 'store', 'node', 'doubly', 'link', 'list', 'link', 'field', 'datum', 'field', 'pointer', 'next', 'node', 'pointer', 'previous', 'node', 'element', 'node']","What fields are stored in the nodes of a doubly linked list?
Two link fields and one data field - A pointer to the next node, a pointer to the previous node, and the element in the node.
    "
117,117,14,0.2371000051498413,"tree, binary, order, node, leave, right, follow, avl, search, traversal",42,0.09709999710321426,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",28,0.04479999840259552,"child, add, non, cause, leaf, full, slow, sift, treechild, nodeleaf","['define', 'describe', 'week', 'slide', 'binary', 'tree', 'value', 'node', 'less', 'equal', 'value', 'child']","Define a min heap (as described in 2019 week5b slide 4).
     A binary tree such that the value at each node is less than or equal to the value at its two children.
"
118,118,56,0.19259999692440033,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.09200000017881393,"for, follow, time, complexity, true, give, statement, function, correct, run",30,0.052400000393390656,"operation, middle, link, array, perform, advantage, make, item, front, either","['for', 'array', 'list', 'size', 'best', 'bad', 'average', 'runtime', 'complexity', 'for', 'operation']","For an array list of size n what are the best, worst and average runtime complexities for each of it's operations?

    "
119,119,14,0.15049999952316284,"tree, binary, order, node, leave, right, follow, avl, search, traversal",56,0.0786999985575676,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",32,0.04879999905824661,"log, base, bottom, many, become, simplify, less, allow, level, multiple","['runtime', 'binary', 'search', 'tree', 'search', 'average', 'log', 'best', 'worst']","What is the runtime of a Binary Search Tree Search?
Average ?(log n)Best?(1)Worst?(n)
    "
120,120,56,0.21170000731945038,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.013899999670684338,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.013399999588727951,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['follow', 'sort', 'recursive', 'bubble', 'sort']","Which of the following sorts is not recursive?
 Bubble sort
   "
121,121,14,0.23980000615119934,"tree, binary, order, node, leave, right, follow, avl, search, traversal",55,0.05400000140070915,"datum, search, structure, remove, data, list, store, want, add, use",11,0.013500000350177288,"complete, digit, count, least, significant, digits, basis, position, share, counting","['if', 'binary', 'tree', 'label', 'complete', 'binary', 'tree']","Which, if any, of the Binary Trees labelled A-H is a complete binary tree?
   B and C
 "
122,122,14,0.30070000886917114,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.013700000010430813,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.012000000104308128,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['processing', 'follow', 'tree', 'post', 'order', 'give', 'outcome', 'dfgbeca']","Processing the following tree in post-order gives which outcome?
DFGBECA
    "
123,123,14,0.20360000431537628,"tree, binary, order, node, leave, right, follow, avl, search, traversal",29,0.05009999871253967,"find, number, step, item, average, many, index, table, insert, hash",32,0.049300000071525574,"log, base, bottom, many, become, simplify, less, allow, level, multiple","['need', 'rotate', 'follow', 'avl', 'tree', 'become', 'balanced']","Which node needs to be rotated in the following AVL tree to become balanced: 25 / \ 20 30 / \ \10 22 40 \ 50
  30
  "
124,124,56,0.19910000264644623,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",46,0.15240000188350677,"go, likely, stand, adventure, sven, configuration, must, boat, looping, amount",44,0.06639999896287918,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na","['stand', 'bad', 'configuration', 'must', 'order', 'sven', 'go', 'adventure', 'sort', 'sort', 'least', 'amount', 'time', 'merge']","Kristoff has 9823598273 reindeer. The reindeer are stood in the worst configuration. He must order his reindeer before he and Sven can go on an adventure, which sort should he use to sort them in the least amount of time?
 Merge sort
   "
125,125,56,0.21170000731945038,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",0,0.11079999804496765,"pass, point, start, book, page, short, similar, look, dijkstra, repeat",40,0.07090000063180923,"array, slow, problem, may, random, element, access, integer, anywhere, face","['consider', 'array', 'use', 'bubble', 'sort', 'many', 'pass', 'array', 'require', 'sort', 'low', 'highestnote', 'include', 'final', 'pass', 'confirm', 'correct', 'order']","Consider the array: 4, 1, 3, 2, 5.Using Bubble sort, how many passes through the array are required to sort it from lowest to highest?Note: not including a final pass to confirm correct order.
 2
   "
126,126,16,0.32420000433921814,"for, follow, time, complexity, true, give, statement, function, correct, run",44,0.04560000076889992,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na",56,0.011500000022351742,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['consider', 'follow', 'time', 'complexity', 'for', 'input', 'asymptotic', 'time', 'complexity', 'function']","Consider an algorithm with the following time complexity for an input n:What is the asymptotic time complexity of this function?
 
   "
127,127,9,0.22699999809265137,"visit, look_like, car, company, manufacture, state, define, previously, hit, dead",25,0.07680000364780426,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional",24,0.07249999791383743,"hash, element, table, bucket, use, function, close, key, store, insert","['define', 'move', 'forward', 'hit', 'dead', 'end', 'previously', 'visit', 'vertex', 'backtracking', 'find', 'path']","Depth-first Traversal is defined by:
  Moving forward until you hit a dead end or previously visited vertex, then backtracking to find another path.
  "
128,128,56,0.17139999568462372,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.09040000289678574,"for, follow, time, complexity, true, give, statement, function, correct, run",24,0.013799999840557575,"hash, element, table, bucket, use, function, close, key, store, insert","['type', 'sort', 'use', 'pivot', 'partition', 'none']","Which type of sort uses pivots and partitions?
     None of the above.
"
129,129,39,0.3082999885082245,"node, sub, process, next, link, current, element, list, object, pointer",56,0.013500000350177288,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",24,0.012500000186264515,"hash, element, table, bucket, use, function, close, key, store, insert","['singly', 'link', 'list', 'pointer', 'next', 'element', 'current', 'node']","What is stored in each node of a singly linked list?
   A pointer to the next node and the element in the current node.
 "
130,130,25,0.21379999816417694,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional",16,0.07479999959468842,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.06279999762773514,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['for', 'graph', 'follow', 'path', 'length', 'traversable', 'way', 'length', 'node']","For the graph with the following path lengths, which are traversable both ways:A<->B 2A<->C 3B<->C 6B<->E 4C<->D 8D<->E 2D<->F 1E<->F 4What is the length of the shortest path between Nodes A and F?
  9
  "
131,131,14,0.21629999577999115,"tree, binary, order, node, leave, right, follow, avl, search, traversal",53,0.1290999948978424,"mean, new, mistake, county, send, teach, late, limited, incorrectly, incredibly",28,0.11749999970197678,"child, add, non, cause, leaf, full, slow, sift, treechild, nodeleaf","['give', 'follow', 'integer', 'binary', 'search', 'tree', 'new', 'element', 'insert', 'orderfor', 'new', 'element', 'node', 'new', 'element', 'child', 'offor', 'example', 'would', 'mean', 'child', 'child', 'child']","Given the following integer binary search tree, three new elements 12, 8 and 5 are inserted in that order.For each new element which node is each of the new elements a child of?For example, ""4, 49, 2"" would mean that 12 is a child of 4, 8 is a child of 49 and 5 is a child of 2.
  6, 12, 6
  "
132,132,0,0.22349999845027924,"pass, point, start, book, page, short, similar, look, dijkstra, repeat",25,0.04919999837875366,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional",16,0.04500000178813934,"for, follow, time, complexity, true, give, statement, function, correct, run","['follow', 'start', 'end', 'point', 'route', 'edge', 'apart', 'start', 'cend']","A graph has the following adjacency matrix. Which are the only start and end points with 2 routes that are 3 edges apart? a b c da | 0 0 0 1 |b | 0 0 1 0 |c | 1 1 0 1 |d | 0 1 0 0 |
     Start: CEnd: B
"
133,133,14,0.23330000042915344,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.06369999796152115,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.012400000356137753,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['follow', 'avl', 'tree', 'true', 'balanced', 'avl', 'tree']","Which of the following about AVL trees is not true?
   This is not a balanced AVL tree:
 "
134,134,56,0.2623000144958496,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",3,0.0835999995470047,"case, fastest, ofbubble, itsb, distinct, description, fit, stableb, performance, nearly",16,0.013299999758601189,"for, follow, time, complexity, true, give, statement, function, correct, run","['follow', 'sort', 'algorithm', 'fastest', 'good', 'case', 'time', 'complexity', 'insertion']","Which of the following sorting algorithms has the fastest best case time complexity?
Insertion Sort
    "
135,135,56,0.27079999446868896,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",29,0.11779999732971191,"find, number, step, item, average, many, index, table, insert, hash",44,0.011800000444054604,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na","['number', 'swap', 'need', 'swap', 'list', 'number', 'ascend', 'order', 'use', 'bubble', 'sort']","What is the number of swaps needed to swap this list of numbers:8, 22, 7, 9, 31, 5, 13 in ascending order using bubble sort?
   10
 "
136,136,16,0.1096000000834465,"for, follow, time, complexity, true, give, statement, function, correct, run",32,0.057999998331069946,"log, base, bottom, many, become, simplify, less, allow, level, multiple",49,0.048900000751018524,"int, result, return, term, many, num, body, function, heap, count","['follow', 'int', 'while', 'log']","What is the time complexity of the following algorithm?int m = 0;int i = n;while (i > 0) { m = m + 2i; i = i / 2;}
  O(log n)
  "
137,137,42,0.1965000033378601,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",16,0.17550000548362732,"for, follow, time, complexity, true, give, statement, function, correct, run",44,0.043800000101327896,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na","['follow', 'estimation', 'complexity', 'suitable', 'for', 'theunder', 'estimationof', 'time', 'size', 'complexity', 'big', 'omega']","Which of the following estimations of complexity is most suitable for theunder-estimationof time/size complexity?
Big Omega (O)
    "
138,138,56,0.22460000216960907,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",44,0.013299999758601189,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na",16,0.013199999928474426,"for, follow, time, complexity, true, give, statement, function, correct, run","['sort', 'algorithm', 'stable', 'merge', 'sort']","Which of these sorting algorithms is stable
 Merge Sort
   "
139,139,14,0.1817999929189682,"tree, binary, order, node, leave, right, follow, avl, search, traversal",49,0.05550000071525574,"int, result, return, term, many, num, body, function, heap, count",56,0.013299999758601189,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['result', 'pre', 'order', 'traversal', 'tree']","What is the result of pre-order traversal of this tree?
  S T U V Z X Y W
  "
140,140,56,0.1542000025510788,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",55,0.11789999902248383,"datum, search, structure, remove, data, list, store, want, add, use",49,0.0723000019788742,"int, result, return, term, many, num, body, function, heap, count","['suppose', 'independent', 'follow', 'good', 'describe', 'phrase', 'use', 'specific', 'definition', 'data', 'structure', 'term', 'memory', 'size', 'function', 'may', 'run', 'many', 'device', 'possible']","Java is supposed to be ""design-independent"", which of the following best describes this phrase?
 It uses specific definitions of data structures (in terms of memory size and functions) so it may run on as many devices as possible.
   "
141,141,29,0.16949999332427979,"find, number, step, item, average, many, index, table, insert, hash",14,0.11599999666213989,"tree, binary, order, node, leave, right, follow, avl, search, traversal",32,0.045899998396635056,"log, base, bottom, many, become, simplify, less, allow, level, multiple","['perform', 'bst', 'search', 'value', 'average', 'many', 'step', 'require', 'find', 'value', 'log']","When performing a BST search on N values, on average how many steps are required to find our value?
  ?(log N)
  "
142,142,44,0.35040000081062317,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na",16,0.09560000151395798,"for, follow, time, complexity, true, give, statement, function, correct, run",39,0.03750000149011612,"node, sub, process, next, link, current, element, list, object, pointer","['certain', 'quadratic', 'time', 'algorithm', 'use', 'elementary_operation', 'process', 'input', 'size', 'likely', 'number', 'elementary_operation', 'if', 'give', 'input', 'size']","A certain quadratic time algorithm uses 50 elementary operations to process an input of size 20. What is the most likely number of elementary operations it will use if given an input of size 2000?
 500000
   "
143,143,29,0.4738999903202057,"find, number, step, item, average, many, index, table, insert, hash",24,0.10090000182390213,"hash, element, table, bucket, use, function, close, key, store, insert",0,0.0,,"['consider', 'closed', 'hash', 'table', 'linear', 'probingcompute', 'average', 'number', 'step', 'take', 'insert', 'item', 'hash', 'table', 'total', 'number', 'available', 'bucket', 'number', 'unused', 'bucket', 'average', 'noof', 'step']","Consider a closed hash table with linear probing.Compute the average number of steps taken to insert an item into a hash table with total number of available buckets being 10,000 and the number of unused buckets being 1,500.
 Average no.of steps ˜ 4
   "
144,144,44,0.31349998712539673,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na",16,0.09910000115633011,"for, follow, time, complexity, true, give, statement, function, correct, run",39,0.03999999910593033,"node, sub, process, next, link, current, element, list, object, pointer","['quadratic', 'time', 'use', 'elementary_operation', 'process', 'aninput', 'size', 'likely', 'number', 'elementary_operation', 'if', 'give', 'input', 'size']","A quadratic time algorithm uses 50 elementary operations to process aninput of size 10. What is the most likely number of elementary operations it will use if given an input of size 10,000?
   50,000,000
 "
145,145,0,0.3262999951839447,"pass, point, start, book, page, short, similar, look, dijkstra, repeat",14,0.11999999731779099,"tree, binary, order, node, leave, right, follow, avl, search, traversal",29,0.04859999939799309,"find, number, step, item, average, many, index, table, insert, hash","['consider', 'dijkstra', 'find', 'short', 'path', 'node', 'start', 'node', 'follow', 'ordering', 'node', 'could', 'use', 'dijkstra', 'short', 'path', 'start', 'start', 'start', 'end']","Consider graph F. Assume that we use Dijkstra's algorithm to find shortest paths from node START to any other node in F. Which of the following orderings on the nodes of F could be used by Dijkstra's algorithm to compute the shortest paths that start at START?
  START,3,2,4,END,1
  "
146,146,29,0.23080000281333923,"find, number, step, item, average, many, index, table, insert, hash",24,0.21610000729560852,"hash, element, table, bucket, use, function, close, key, store, insert",0,0.0,,"['if', 'open', 'hash', 'table', 'key', 'insert', 'bucket', 'average', 'number', 'step', 'take', 'find', 'element', 'table']","If we have an open hash table with 10 keys inserted and 20 buckets, what is the average number of steps taken to find an element in the table?
 1.25
   "
147,147,37,0.1356000006198883,"sum, codepublic, op, fibonacci, thecounte, alength, elementary_operation, looping, else, letf",49,0.10899999737739563,"int, result, return, term, many, num, body, function, heap, count",16,0.10329999774694443,"for, follow, time, complexity, true, give, statement, function, correct, run","['average', 'time', 'complexity', 'codepublic', 'fibonacci', 'int', 'if', 'return', 'else', 'return', 'fibonacci', 'fibonacci']","what is the average time complexity of this code?public int fibonacci(int x){ if (x<=1){ return x; } else{ return fibonacci(x-2)+ fibonacci(x-1); }}
 O(2^n)
   "
148,148,16,0.09390000253915787,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.06859999895095825,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",4,0.014499999582767487,"looping, letf, invent, queue, default, dump, bsta, legal, mergesort, worst_case","['complexity', 'shell', 'none']","What is the worst case complexity of shell sort?
     None of the above
"
149,149,14,0.5554999709129333,"tree, binary, order, node, leave, right, follow, avl, search, traversal",55,0.05429999902844429,"datum, search, structure, remove, data, list, store, want, add, use",24,0.04019999876618385,"hash, element, table, bucket, use, function, close, key, store, insert","['use', 'follow', 'binary', 'search', 'tree', 'sort', 'alphabetically', 'order', 'store', 'car', 'name', 'order', 'increase', 'name', 'efficiency', 'avl', 'tree', 'however', 'want', 'insert', 'datatherefore', 'choose', 'carry', 'rotation', 'get', 'valid', 'avl', 'minimun', 'number', 'rotation', 'must', 'carry', 'produce', 'valid', 'avl', 'tree', 'right', 'rotate', 'leave', 'rotate']","Honda uses the following binary search tree (sorted alphabetically) in order to store their car names: Amaze / \Accord Jazz / Grace / \ Brio InsightIn order to increase naming efficiency, they wish to convert this into an AVL tree, however do not want to re-insert all of the data.Therefore they choose to carry out 'rotations' to get a valid AVL tree.What is the minimun number of each rotation that must be carried out to produce a valid AVL tree?
1 Right Rotate, 1 Left Rotate
    "
150,150,56,0.3693000078201294,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",24,0.0714000016450882,"hash, element, table, bucket, use, function, close, key, store, insert",16,0.05649999901652336,"for, follow, time, complexity, true, give, statement, function, correct, run","['consider', 'list', 'if', 'begin', 'sort', 'list', 'order', 'low', 'high', 'value', 'use', 'selection', 'sort', 'order', 'element', 'first', 'swap']","Consider the list [420, 69, 80085, 21, 666, 1337].If you begin to sort the list so that it will be ordered from lowest to highest value using selection sort, what order will the elements be in after the first two swaps?
   [21, 69, 420, 80085, 666, 1337]
 "
151,151,55,0.22630000114440918,"datum, search, structure, remove, data, list, store, want, add, use",16,0.12189999967813492,"for, follow, time, complexity, true, give, statement, function, correct, run",29,0.07670000195503235,"find, number, step, item, average, many, index, table, insert, hash","['give', 'list', 'unordere', 'unbounded', 'integer', 'task', 'find', 'small', 'value', 'present', 'list', 'method', 'provide', 'low', 'average', 'time', 'complexity', 'complete', 'task', 'linear', 'search']","Given a list of unordered, unbounded, integers, and the task of finding the smallest value present in the list, what method provides the lowest average time complexity to complete the task?
   Linear Search
 "
152,152,55,0.2142000049352646,"datum, search, structure, remove, data, list, store, want, add, use",14,0.18410000205039978,"tree, binary, order, node, leave, right, follow, avl, search, traversal",28,0.16120000183582306,"child, add, non, cause, leaf, full, slow, sift, treechild, nodeleaf","['unordere', 'list', 'family', 'relative', 'name', 'want', 'put', 'non', 'avl', 'correct', 'add', 'tree', 'add', 'sorted', 'list', 'tree', 'cause', 'tree', 'lopside', 'therefore', 'slow', 'linear', 'search', 'search']","Johnny Jones has a unordered list of twenty family relatives' names that he wants to put into a non-AVL tree.Which is the correct reason as to why Johnny should not sort the list before adding them to the tree?
  Because adding a sorted list to the tree will cause the tree to be lopsided and therefore as slow as linear search to search.
  "
153,153,56,0.24660000205039978,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",6,0.050999999046325684,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly",49,0.05079999938607216,"int, result, return, term, many, num, body, function, heap, count","['consider', 'stable', 'algorithm', 'equal', 'term', 'stay', 'relative', 'position', 'sort']","What algorithm is considered a ""stable"" algorithm?
   Equal terms stay in their relative positions after sorting
 "
154,154,25,0.21080000698566437,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional",16,0.058400001376867294,"for, follow, time, complexity, true, give, statement, function, correct, run",29,0.05820000171661377,"find, number, step, item, average, many, index, table, insert, hash","['consider', 'follow', 'graph', 'multiply', 'resultant', 'represent', 'result', 'matrix', 'show', 'vertex', 'edge']","Consider the following graph and it's adjacency matrix M:When an adjacency matrix is multiplied by itself (i.e. M * M = ?) what does the resultant matrix represent?
 The resulting matrix shows which vertices are two edges from each other.
   "
155,155,55,0.2451999932527542,"datum, search, structure, remove, data, list, store, want, add, use",25,0.05820000171661377,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional",39,0.05389999970793724,"node, sub, process, next, link, current, element, list, object, pointer","['give', 'graph', 'adjacency', 'list', 'form', 'use', 'combination', 'datum', 'structure', 'algorithm', 'efficiently', 'find', 'short', 'distance', 'node']","Given a graph in adjacency list form, using what combination of data structure and algorithm can we efficiently find the shortest distance between two nodes.
   Min Heap and Dijkstra's Algorithm
 "
156,156,56,0.22429999709129333,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",44,0.013299999758601189,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na",16,0.013199999928474426,"for, follow, time, complexity, true, give, statement, function, correct, run","['sort', 'algorithm', 'unstable', 'quick', 'sort']","Which of these sorting algorithms is unstable?
 Quick sort
   "
157,157,16,0.06360000371932983,"for, follow, time, complexity, true, give, statement, function, correct, run",24,0.06310000270605087,"hash, element, table, bucket, use, function, close, key, store, insert",35,0.01510000042617321,"number, people, real, create, would, say, quickly, company, change, friend","['calculate', 'for']","Calculate x for:
   2
 "
158,158,29,0.30970001220703125,"find, number, step, item, average, many, index, table, insert, hash",24,0.15389999747276306,"hash, element, table, bucket, use, function, close, key, store, insert",0,0.0,,"['calculate', 'average', 'number', 'step', 'take', 'find', 'insert', 'item', 'closed', 'hash', 'table', 'number', 'key', 'number', 'bucket']","Calculate the average number of steps taken to find/insert an item into this closed hash table:Number of keys= 3500 Number of Buckets=15750
  1.42
  "
159,159,56,0.23819999396800995,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",39,0.11710000038146973,"node, sub, process, next, link, current, element, list, object, pointer",24,0.061799999326467514,"hash, element, table, bucket, use, function, close, key, store, insert","['singly', 'link', 'list', 'without', 'tail', 'reference', 'time', 'complexity', 'add', 'element', 'end', 'list']","In a singly linked list without a tail reference, what is the time complexity of adding an element to the end of the list?
 T(n)
   "
160,160,14,0.13689999282360077,"tree, binary, order, node, leave, right, follow, avl, search, traversal",56,0.1145000010728836,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",24,0.051100000739097595,"hash, element, table, bucket, use, function, close, key, store, insert","['unstable', 'sort', 'output', 'item', 'value', 'different', 'order', 'way', 'input']","Define an unstable sorting algorithm
 An algorithm that outputs two items with the same value in a different order to the way they were input
   "
161,161,24,0.1559000015258789,"hash, element, table, bucket, use, function, close, key, store, insert",56,0.0908999964594841,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",55,0.07249999791383743,"datum, search, structure, remove, data, list, store, want, add, use","['open', 'hash', 'table', 'type', 'datum', 'bucket', 'point', 'link', 'list']","In an Open Hash Table, what type of data structure does each array bucket point to?
 Linked List
   "
162,162,44,0.11680000275373459,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na",35,0.06340000033378601,"number, people, real, create, would, say, quickly, company, change, friend",25,0.05719999969005585,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional","['dijkstra', 'algorithm', 'number', 'vertice', 'number', 'edge']","What is the time complexity of Dijkstra's Algorithm? (v is the number of vertices, e is the number of edges)
   ?(v2)
 "
163,163,0,0.016699999570846558,"pass, point, start, book, page, short, similar, look, dijkstra, repeat",1,0.016699999570846558,"measurement, select, precision, option, accuracy, value, close, mathematical, technique, difference",2,0.016699999570846558,"require, comparison, estimate, nee, minimum, identify, aka, clockwise, complexityo, outside",[],"What is 2^35 mod 7?
4
    "
164,164,13,0.27570000290870667,"second, take, record, long, run, expect, likely, question, information, implementation",56,0.10939999669790268,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.05380000174045563,"for, follow, time, complexity, true, give, statement, function, correct, run","['implementation', 'run', 'for', 'second', 'sort', 'list', 'recordshow', 'long', 'likely', 'run', 'sort', 'record', 'second']","An implementation of insertion sort runs for 10 seconds to sort a list of 10^8 records.How long will it likely run to sort 10^9 records?
     1000 seconds
"
165,165,14,0.4025000035762787,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.04050000011920929,"for, follow, time, complexity, true, give, statement, function, correct, run",17,0.009999999776482582,"lane, skip, skiplist, combined, sum, organise, difference, many, exactly, assign","['avl', 'tree', 'self', 'balance', 'binary', 'search', 'tree', 'difference', 'height', 'leave', 'right', 'can', 'for', 'node']","What is the definition of an AVL tree?
 A self-balancing Binary Search Tree where the difference between heights of left and right subtrees cannot be more than one for all nodes.
   "
166,166,16,0.24529999494552612,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.013199999928474426,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",14,0.013000000268220901,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['consider', 'follow', 'function', 'nselect', 'true', 'statement']","Consider the following functions:f(n) = 5n^2 , g(n) = 10n^2 and h(n) = 10^nSelect the true statement below:
  g is ?(f), h is O(g), and f is O(h)
  "
167,167,52,0.21230000257492065,"show, factor, prime, distribute, uniformly, distribution, improve, increase, reduce, advice",24,0.08910000324249268,"hash, element, table, bucket, use, function, close, key, store, insert",14,0.06620000302791595,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['follow', 'valid', 'advice', 'hash', 'password', 'salt', 'hash', 'username', 'password', 'together']","Which of the following is valid advice when hashing passwords.
  Salt your hash by hashing the username and the password together.
  "
168,168,56,0.10980000346899033,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.10109999775886536,"for, follow, time, complexity, true, give, statement, function, correct, run",55,0.05649999901652336,"datum, search, structure, remove, data, list, store, want, add, use","['average', 'time', 'complexity', 'for', 'search', 'skip', 'list']","What is the average time complexity for searching in a Skip List?
   T(log(n))
 "
169,169,24,0.45559999346733093,"hash, element, table, bucket, use, function, close, key, store, insert",49,0.038100000470876694,"int, result, return, term, many, num, body, function, heap, count",0,0.0,,"['closed', 'hash', 'table', 'linear_probing', 'use', 'function', 'hash', 'function', 'slot', 'element', 'insert', 'hash', 'table', 'order', 'result', 'hash', 'table']","A closed Hash-table with linear probing uses the function h(x) = x % 5 as a hash function and has slots 0,1,2,3,4.When the elements, (13, 4, 19, 5, 27), are inserted into the Hash-table in order, what is the resulting Hash-table?
19, 5, 27, 13, 4
    "
170,170,0,0.016699999570846558,"pass, point, start, book, page, short, similar, look, dijkstra, repeat",1,0.016699999570846558,"measurement, select, precision, option, accuracy, value, close, mathematical, technique, difference",2,0.016699999570846558,"require, comparison, estimate, nee, minimum, identify, aka, clockwise, complexityo, outside",[],"What is the shortest path from u to z?
   3
 "
171,171,14,0.24740000069141388,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.013399999588727951,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.013000000268220901,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['follow', 'binary', 'tree', 'valid', 'avl', 'treesa']","Which of the following binary trees are valid AVL trees.A: 20 / \ 8 22 / / \ 4 21 40/3B: 20 / \ 25 15C: 20 / \ 8 22 / \ 5 21D: 20 / \ 8 22
     D only
"
172,172,56,0.16830000281333923,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.08009999990463257,"for, follow, time, complexity, true, give, statement, function, correct, run",3,0.047600001096725464,"case, fastest, ofbubble, itsb, distinct, description, fit, stableb, performance, nearly","['insertion', 'good', 'case', 'for', 'time', 'complexity', 'datum', 'already', 'sort']","What is insertion sort's best case for time complexity?
     O(n) when data is already sorted
"
173,173,3,0.19050000607967377,"case, fastest, ofbubble, itsb, distinct, description, fit, stableb, performance, nearly",56,0.12399999797344208,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",29,0.013799999840557575,"find, number, step, item, average, many, index, table, insert, hash","['sort', 'good', 'fit', 'description', 'stableb', 'case', 'average', 'case']","Which sorting algorithm best fits this description:StableBest case : (n log n)Average case: (n log n)Worst case: (n log n)
   Merge sort
 "
174,174,49,0.21150000393390656,"int, result, return, term, many, num, body, function, heap, count",16,0.17430000007152557,"for, follow, time, complexity, true, give, statement, function, correct, run",32,0.040300000458955765,"log, base, bottom, many, become, simplify, less, allow, level, multiple","['runtime', 'complexity', 'for', 'int', 'test', 'int', 'for', 'for', 'int', 'test', 'for', 'int', 'test', 'log']","What is the runtime complexity for this code?for (int i=1; i<n; i++) System.out.println(“test”);int y = n;for (int j=1; j<n; j++) for (int k=1; k<y; k++) System.out.println(“test2”); y = y/2; for(int x = 10; x > 0, x = x-1) System.out.println(""test3"");
  (n log n)
  "
175,175,56,0.4657999873161316,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.014100000262260437,"for, follow, time, complexity, true, give, statement, function, correct, run",0,0.0,,"['follow', 'statement', 'sort', 'algorithm', 'false', 'merge', 'sort', 'insertion', 'sort', 'bubble', 'sort', 'quick', 'sort', 'stable', 'sort', 'algorithm']","Which of the following statements about sorting algorithms is false?
   The merge sort, insertion sort, bubble sort, and quick sort are all stable sorting algorithms.
 "
176,176,56,0.3718000054359436,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",14,0.08269999921321869,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.04430000111460686,"for, follow, time, complexity, true, give, statement, function, correct, run","['follow', 'list', 'sort', 'first', 'letter', 'sort', 'produce', 'follow', 'output', 'property', 'guarantee', 'true', 'sort', 'algorithm', 'use', 'use', 'unstable']","The following list is being sorted by first letter only:hondahalloumibeeThe sorting algorithm produces the following output:beehalloumihondaWhat property is guaranteed to be true about the sorting algorithm used?
 The algorithm used was unstable
   "
177,177,14,0.14949999749660492,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.016599999740719795,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.015300000086426735,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['follow', 'tree', 'balanced']","What will the following tree look like after being balanced?4 2 1 0 -1 3 6 5 7
 4 2 0 -1 1 3 6 5 7
   "
178,178,14,0.3643999993801117,"tree, binary, order, node, leave, right, follow, avl, search, traversal",29,0.05119999870657921,"find, number, step, item, average, many, index, table, insert, hash",52,0.039400000125169754,"show, factor, prime, distribute, uniformly, distribution, improve, increase, reduce, advice","['show', 'binary', 'search', 'tree', 'represent', 'value', 'node', 'tree', 'if', 'value', 'insert', 'order', 'would', 'value']","Below shows a binary search tree where V represents the values of each node in the tree. If the values had been inserted in the order 11, 4, 16, 2, 14, 19, 9, 3, 17, 12, 1, 15, 27, 10, 7 what would the value of X (in diagram) be? V V V V V V VV V V V X V V V
   12
 "
179,179,14,0.35519999265670776,"tree, binary, order, node, leave, right, follow, avl, search, traversal",53,0.03269999846816063,"mean, new, mistake, county, send, teach, late, limited, incorrectly, incredibly",16,0.011099999770522118,"for, follow, time, complexity, true, give, statement, function, correct, run","['consider', 'follow', 'binary', 'tree', 'traversal', 'traversal', 'node', 'print', 'late', 'post', 'order']","Consider the following binary tree 17 / \ 14 43 / \ / \ 7 16 34 68 / \ 1 3By which traversal/traversals will the node 14 be printed out the latest?
  Post-Order
  "
180,180,16,0.13189999759197235,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.06849999725818634,"tree, binary, order, node, leave, right, follow, avl, search, traversal",39,0.017500000074505806,"node, sub, process, next, link, current, element, list, object, pointer","['follow', 'arithmetic', 'expression', 'tree', 'evaluate']","What does the following arithmetic expression tree evaluate to? / \- +/ \ / \8 2 1 2
2
    "
181,181,24,0.398499995470047,"hash, element, table, bucket, use, function, close, key, store, insert",42,0.03999999910593033,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",16,0.01140000019222498,"for, follow, time, complexity, true, give, statement, function, correct, run","['standard', 'closed', 'hash', 'table', 'linear_probing', 'function', 'wish', 'put', 'follow', 'element', 'exact', 'order', 'table', 'afterwards']","I have a standard closed hash table with linear probing, with the function h(x) = x % 7. I wish to put the following elements: 10, 3, 11, 20, 21, 22, 8 (in that exact order). What does the table look like afterwards?
21, 22, 8, 10, 3, 11, 20
    "
182,182,32,0.13300000131130219,"log, base, bottom, many, become, simplify, less, allow, level, multiple",16,0.13259999454021454,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.013000000268220901,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['asymptotic', 'complexity', 'high', 'growth', 'rate', 'log']","Which Asymptotic Complexity has the highest growth rate:
  n log(n)
  "
183,183,35,0.27889999747276306,"number, people, real, create, would, say, quickly, company, change, friend",24,0.1632000058889389,"hash, element, table, bucket, use, function, close, key, store, insert",29,0.11699999868869781,"find, number, step, item, average, many, index, table, insert, hash","['large', 'company', 'look', 'store', 'employee', 'would', 'number', 'open', 'hash', 'table', 'currently', 'employee', 'however', 'would', 'like', 'future', 'proof', 'system', 'design', 'system', 'for', 'capacity', 'would', 'like', 'perform', 'operation', 'certain', 'id', 'average', 'number', 'step', 'many', 'bucket', 'would', 'hash', 'table', 'require', 'fit', 'specification']","A large company is looking to store their employee ID numbers in an open hash table. They currently have 20,000 employees, however they would like to future proof their system and design their system for a capacity of 30,000. They would like to perform operations on certain IDs with an average number of steps at 4. How many buckets would their hash table require to fit these specifications?
 5000
   "
184,184,14,0.2529999911785126,"tree, binary, order, node, leave, right, follow, avl, search, traversal",2,0.05790000036358833,"require, comparison, estimate, nee, minimum, identify, aka, clockwise, complexityo, outside",16,0.04450000077486038,"for, follow, time, complexity, true, give, statement, function, correct, run","['minimum', 'number', 'node', 'nee', 'add', 'empty', 'avl', 'tree', 'order', 'for', 'depth']","What is the minimum number of nodes I need to add to an empty AVL tree in order for it to have a depth of 3?
     7
"
185,185,14,0.3402000069618225,"tree, binary, order, node, leave, right, follow, avl, search, traversal",28,0.014700000174343586,"child, add, non, cause, leaf, full, slow, sift, treechild, nodeleaf",29,0.011300000362098217,"find, number, step, item, average, many, index, table, insert, hash","['binary', 'tree', 'level', 'full', 'exceptfor', 'last', 'level', 'half', 'full', 'manynode']","A binary tree has six levels, and all are full exceptfor the last level, which is only half full. How manynodes does it have?
  47
  "
186,186,17,0.3330000042915344,"lane, skip, skiplist, combined, sum, organise, difference, many, exactly, assign",55,0.1671999990940094,"datum, search, structure, remove, data, list, store, want, add, use",56,0.04749999940395355,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['task', 'build', 'probabilistic', 'skip', 'list', 'many', 'lane', 'skip', 'list', 'if', 'skip', 'list', 'lane', 'label', 'lane', 'assign', 'label', 'lanesa', 'chance', 'assign', 'lane']","You have been tasked with building a probabilistic Skip list with 1,048,576 nodes.How many lanes will the skip list have? i.e.( if a skip list has lanes labeled ""lane 0"",lane 1"" & ""lane 2"" it has 3 lanes).What is the probability that a node will be assigned to the lane labeled ""lane 15""?
 20 LanesA 1/32768 chance of being assigned to the lane
   "
187,187,56,0.2922999858856201,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",44,0.0771000012755394,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na",3,0.04259999841451645,"case, fastest, ofbubble, itsb, distinct, description, fit, stableb, performance, nearly","['follow', 'sort', 'algorithm', 'large', 'good', 'time', 'complexity', 'ie', 'large', 'good', 'case', 'selection', 'sort']","Which of the following sorting algorithms has the largest best time complexity, i.e. the largest O(n) in the best case:
 Selection Sort
   "
188,188,16,0.21040000021457672,"for, follow, time, complexity, true, give, statement, function, correct, run",24,0.20180000364780426,"hash, element, table, bucket, use, function, close, key, store, insert",44,0.07400000095367432,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na","['give', 'hash', 'function', 'for', 'follow', 'input', 'statement', 'true', 'for', 'input', 'use', 'open', 'hashing', 'element', 'hash', 'value']","Given the hash function f(x) = x % 10, for the following input (1234,60,1264,3456,638,3666,349,201,470,1000,84,3), which statement is true for this input using open hashing:
  The elements 1234, 1264 and 84 hash to the same value
  "
189,189,55,0.4113999903202057,"datum, search, structure, remove, data, list, store, want, add, use",29,0.16680000722408295,"find, number, step, item, average, many, index, table, insert, hash",39,0.05000000074505806,"node, sub, process, next, link, current, element, list, object, pointer","['implement', 'datum', 'structure', 'insert', 'new', 'item', 'front', 'datum', 'structure', 'do', 'simple', 'step', 'try', 'access', 'th', 'item', 'must', 'pass', 'other', 'first', 'if', 'want', 'remove', 'item', 'remove', 'item', 'step', 'find', 'previous', 'pointer', 'data', 'structure', 'implement', 'link', 'list']","You are implementing a data structure. When you insert a new items at the front of data structure, it can be done in just a few simple steps. When you try to access the 1500th item, you must pass through 1499 others first. If you want to remove an item, you can remove any item in just a few steps once you have found it. It does not have a previous pointer. What data structure have you implemented?
 Linked list
   "
190,190,24,0.4239000082015991,"hash, element, table, bucket, use, function, close, key, store, insert",16,0.05260000005364418,"for, follow, time, complexity, true, give, statement, function, correct, run",44,0.03629999980330467,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na","['draw', 'closed', 'hash', 'table', 'linear_probing', 'size', 'hash', 'function', 'follow', 'element', 'insert', 'hash', 'table', 'correct', 'order', 'element', 'hash', 'table']","Draw a closed hash table with linear probing of size 7. The hash function is h(x) = x % 7.The following elements are inserted into the hash table: 2, 7, 13, 19, 21, 25, 29What is the correct order of the elements now in the hash table?
   7, 21, 2, 29, 25, 19, 13
 "
191,191,55,0.4390000104904175,"datum, search, structure, remove, data, list, store, want, add, use",29,0.09650000184774399,"find, number, step, item, average, many, index, table, insert, hash",56,0.07670000195503235,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['need', 'search', 'keep', 'divide', 'search', 'area', 'half', 'sorted', 'data', 'arrive', 'word', 'however', 'twist', 'algorithm', 'clever', 'if', 'for', 'example', 'word', 'start', 'start', 'search', 'towards', 'end', 'step', 'take', 'average', 'follow', 'algorithm', 'implement', 'interpolation', 'search']","Billy Bob needs to implement a searching algorithm. His algorithm keeps dividing the search area in half (on sorted data) until it arrives at his word. However, there's a twist! The algorithm is very clever, and, if for example the word starts with 'z', it will start searching towards the end. The steps taken by this algorithm is log_base2(log_base2(n)) on average. Which of the following algorithms did Mr. Bob implement?
  Interpolation search
  "
192,192,16,0.44850000739097595,"for, follow, time, complexity, true, give, statement, function, correct, run",49,0.010300000198185444,"int, result, return, term, many, num, body, function, heap, count",0,0.0,,"['give', 'follow', 'for', 'for', 'int', 'love', 'dsa', 'follow', 'follow', 'describe', 'correct', 'time', 'complexity', 'bound', 'correct']","Given the following algorithm:for(int i = 0; i < n; i++) for(int j = 0; j < n; j++) System.out.println(""I love DSA!!!"");Which of the following following describes the correct time complexity bounds?
   They are all correct.
 "
193,193,56,0.25540000200271606,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.013199999928474426,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.012799999676644802,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['follow', 'sort', 'algorithm', 'stable', 'merge', 'sort']","Which of the following sorting algorithms is stable?
     Merge sort
"
194,194,56,0.25540000200271606,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.013199999928474426,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.012799999676644802,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['follow', 'sort', 'algorithm', 'stable', 'merge', 'sort']","Which of the following sorting algorithms is stable?
     Merge sort
"
195,195,56,0.2870999872684479,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.06030000001192093,"for, follow, time, complexity, true, give, statement, function, correct, run",43,0.04729999974370003,"space, nlogn, worst, double, do, enough, arraylist, namortise, collection, efficiency","['good', 'average', 'bad', 'time', 'complexity', 'shell', 'good', 'nlog', 'average', 'varie', 'worst']","What is the best, average and worst time complexity of shell sort?
   Best: O(nlog(n)), Average: Varies, Worst: O(n^2).
 "
196,196,56,0.2425999939441681,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",43,0.04989999905228615,"space, nlogn, worst, double, do, enough, arraylist, namortise, collection, efficiency",16,0.01549999974668026,"for, follow, time, complexity, true, give, statement, function, correct, run","['follow', 'sort', 'algorithm', 'average', 'time', 'complexity', 'nlogn']","Which of the following sorting algorithms does not have an average time complexity of nlogn?
   Shell sort
 "
197,197,6,0.29829999804496765,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly",42,0.04740000143647194,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",16,0.04280000180006027,"for, follow, time, complexity, true, give, statement, function, correct, run","['follow', 'ontology', 'language', 'notation', 'commercial', 'support', 'globally', 'universal', 'modelling', 'language', 'uml']","Which of the following ontology languages and notations has the most commercial support globally?
     Universal Modelling Language (UML)
"
198,198,56,0.3073999881744385,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",44,0.014100000262260437,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na",16,0.012500000186264515,"for, follow, time, complexity, true, give, statement, function, correct, run","['bad', 'possible', 'time', 'complexity', 'insertion', 'sort', 'list', 'size']","What is the worst possible time complexity of an insertion sort on a list of size n?
 T(n2)
   "
199,199,56,0.09600000083446503,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",47,0.05779999867081642,"look, green, purple, red, orange, pink, blue, yellow, matter, searchin",24,0.03759999945759773,"hash, element, table, bucket, use, function, close, key, store, insert","['look', 'use', 'sort', 'value']","How will the array look after using h-sort with an h-value of 2 on: 5,9,3,7,2
  2,7,3,9,5
  "
200,200,56,0.2989000082015991,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",43,0.04659999907016754,"space, nlogn, worst, double, do, enough, arraylist, namortise, collection, efficiency",16,0.012900000438094139,"for, follow, time, complexity, true, give, statement, function, correct, run","['follow', 'sort', 'algorithm', 'average', 'time', 'complexity', 'space', 'merge', 'sort']","Which of the following sorting algorithms has an average time complexity ofT(n)=nlog(n) and space complexityT(n)=n?
   Merge Sort
 "
201,201,14,0.3499000072479248,"tree, binary, order, node, leave, right, follow, avl, search, traversal",29,0.05649999901652336,"find, number, step, item, average, many, index, table, insert, hash",24,0.01140000019222498,"hash, element, table, bucket, use, function, close, key, store, insert","['follow', 'tree', 'legit', 'binary', 'search', 'tree', 'contain', 'number', 'represent', 'pre', 'order', 'traversal']","Which of the following trees is a legit binary search tree containing the numbers (2,7,9,12,18,23,26,37,43,75)? Represented in PRE-ORDER traversal!
26, 12, 7, 2, 9, 18, 23, 43, 37, 75
    "
202,202,25,0.17170000076293945,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional",29,0.06849999725818634,"find, number, step, item, average, many, index, table, insert, hash",32,0.04619999974966049,"log, base, bottom, many, become, simplify, less, allow, level, multiple","['give', 'graph', 'many', 'path', 'length', 'less', 'vertex']","Given this graph:How many paths of length 2 or less are there from vertex C to F?
  2
  "
203,203,16,0.218299999833107,"for, follow, time, complexity, true, give, statement, function, correct, run",49,0.09380000084638596,"int, result, return, term, many, num, body, function, heap, count",6,0.047200001776218414,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly","['follow', 'code', 'for', 'int', 'for', 'int', 'for', 'for', 'int']","What is the runtime of the following code ?for (int i=1; i<n; i=i*2) System.out.println(“hello”);for (int j=1; j<m; j++) for (int k=1; k<10; k++) for (int l=1; l<j; j++) System.out.println(“CM20254”);
   
 "
204,204,14,0.43650001287460327,"tree, binary, order, node, leave, right, follow, avl, search, traversal",28,0.061900001019239426,"child, add, non, cause, leaf, full, slow, sift, treechild, nodeleaf",20,0.061400000005960464,"call, system, avoid, determine, matrix, engine, bugle, pagerank, inthis, involve","['correct', 'description', 'pre', 'order', 'traversal', 'view', 'content', 'root', 'leave', 'ie', 'call', 'preorder', 'left', 'child', 'traverse', 'right', 'subtree', 'ie', 'call', 'preorder', 'right', 'child']","Which algorithm is the correct description of pre-order traversal
 1. View contents of root.2. Traverse the left subtree, i.e., call Preorder(left-child)3. Traverse the right subtree, i.e., call Preorder(right-child)
   "
205,205,56,0.1071000024676323,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.018300000578165054,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.015799999237060547,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['follow', 'list']","Which of the following is a graph representation?
  Adjacency List
  "
206,206,1,0.3255999982357025,"measurement, select, precision, option, accuracy, value, close, mathematical, technique, difference",16,0.09080000221729279,"for, follow, time, complexity, true, give, statement, function, correct, run",55,0.03799999877810478,"datum, search, structure, remove, data, list, store, want, add, use","['accuracy', 'precision', 'important', 'factor', 'consider', 'take', 'datum', 'correct', 'definition', 'accuracy', 'precision', 'accuracy', 'close', 'value', 'true', 'valueprecision', 'repeatable', 'measurement']","Accuracy and precision are two important factors to consider when taking data measurements.What are the correct definitions of accuracy and precision?
  Accuracy is how close a value is to its true value.Precision is how repeatable a measurement is.
  "
207,207,24,0.13989999890327454,"hash, element, table, bucket, use, function, close, key, store, insert",29,0.06360000371932983,"find, number, step, item, average, many, index, table, insert, hash",50,0.013700000010430813,"lot, waste, disadvantage, looping, verticesfew, suitable, letf, invent, memory, say","['calculate', 'load', 'hash', 'table']","What is the formula to calculate the load on a hash table?

    "
208,208,56,0.2362000048160553,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.10499999672174454,"for, follow, time, complexity, true, give, statement, function, correct, run",30,0.059300001710653305,"operation, middle, link, array, perform, advantage, make, item, front, either","['answer', 'always', 'true', 'for', 'link', 'list', 'link', 'list', 'best', 'runtime', 'for', 'operation', 'add']","Which answer is always TRUE for Linked Lists?
  In a Linked List, the best and worst case runtime for the operation add(o) is the same.
  "
209,209,35,0.24150000512599945,"number, people, real, create, would, say, quickly, company, change, friend",29,0.15610000491142273,"find, number, step, item, average, many, index, table, insert, hash",24,0.1006999984383583,"hash, element, table, bucket, use, function, close, key, store, insert","['management', 'ask', 'change', 'close', 'open', 'currently', 'change', 'average', 'number', 'step', 'find', 'bucket', 'change', 'close', 'positive', 'negative', 'decrease']","Management has asked you to change a closed hashtable to an open hashtable. It currently has a load factor of 0.75.What is the change in the average number of steps to find a bucket after you change the hashtable?Answer is: open av. - closed av, can be positive or negative
  -1.125, Decrease
  "
210,210,16,0.15209999680519104,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.015200000256299973,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",25,0.014399999752640724,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional","['asymptotic', 'time', 'complexity']","An algorithm has runtime, what is the asymptotic time complexity of this algorithm?
  
  "
211,211,39,0.10790000110864639,"node, sub, process, next, link, current, element, list, object, pointer",14,0.0843999981880188,"tree, binary, order, node, leave, right, follow, avl, search, traversal",28,0.05620000138878822,"child, add, non, cause, leaf, full, slow, sift, treechild, nodeleaf","['define', 'node', 'tree', 'node', 'child']","Define what a leaf node in a tree is.
 A node with zero children
   "
212,212,32,0.16949999332427979,"log, base, bottom, many, become, simplify, less, allow, level, multiple",16,0.08449999988079071,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.049800001084804535,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['order', 'complexitie', 'low', 'high', 'growth', 'rate', 'log']","Order the complexities from lowest to highest growth rate:a = log(n)b = n log (n)c = (log(n))^2d = sqrt(n)e = 2^nf = n^3g = n
   a, c, d, g, b, f, e
 "
213,213,14,0.1492999941110611,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.017000000923871994,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.015300000086426735,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['follow', 'avl', 'tree']","Which of the following is an AVL Tree:
  
  "
214,214,14,0.27799999713897705,"tree, binary, order, node, leave, right, follow, avl, search, traversal",29,0.016499999910593033,"find, number, step, item, average, many, index, table, insert, hash",44,0.013000000268220901,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na","['insert', 'follow', 'number', 'avl', 'tree', 'order', 'tree']","Insert the following numbers lexicographically in an AVL tree: {5,20,8,9,3,11,4,65,85,35,15,1}.What is the in-order transversal of the tree?
   1, 11, 15, 20, 3, 35, 4, 5, 65, 8, 85, 9
 "
215,215,0,0.32839998602867126,"pass, point, start, book, page, short, similar, look, dijkstra, repeat",55,0.17409999668598175,"datum, search, structure, remove, data, list, store, want, add, use",24,0.07649999856948853,"hash, element, table, bucket, use, function, close, key, store, insert","['task', 'organize', 'store', 'book', 'available', 'library', 'use', 'isbn', 'number', 'assume', 'copy', 'book', 'own', 'library', 'datum', 'structure', 'complete', 'tasksome', 'key', 'consideration', 'must', 'able', 'remove', 'add', 'book', 'neededlookup', 'time', 'must', 'short', 'possiblespace', 'issuebook', 'need', 'sort', 'merely', 'store', 'retrieve', 'open', 'hash', 'table']","You have been tasked with organizing and storing the books available in a library using their ISBN number. Assuming there is only one copy of any book owned by the library, what data structure should you use to complete your task?Some key considerations:You must be able to remove and add books as neededLookup times must be as short as possibleSpace is not an issueBooks do not need to be sorted, merely stored and retrieved
     Open Hash Table
"
216,216,29,0.12700000405311584,"find, number, step, item, average, many, index, table, insert, hash",2,0.0868000015616417,"require, comparison, estimate, nee, minimum, identify, aka, clockwise, complexityo, outside",56,0.05350000038743019,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['log', 'minimum', 'number', 'comparison', 'need', 'sort', 'item']","log212! = 28.8355. What is the minimum number of comparisons needed to sort 12 items?
  30
  "
217,217,6,0.26489999890327454,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly",39,0.19529999792575836,"node, sub, process, next, link, current, element, list, object, pointer",14,0.1462000012397766,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['give', 'link', 'list', 'purpose', 'follow', 'method', 'if', 'method', 'call', 'doessomethe', 'head', 'public', 'void', 'doessomethe', 'node', 'node', 'if', 'node', 'null', 'return', 'doessomethe', 'nodenext', 'nodevalue', 'output', 'value', 'node', 'link', 'list', 'last', 'first']","Given a Linked List, what is the purpose of the following method, if the method call is doesSomething(head):public void doesSomething(Node node) {if(node== null)return;doesSomething(node.next);System.out.println(node.value);}
     To output the value of each node in the linked list, from last to first
"
218,218,14,0.3384999930858612,"tree, binary, order, node, leave, right, follow, avl, search, traversal",39,0.23649999499320984,"node, sub, process, next, link, current, element, list, object, pointer",0,0.0,,"['follow', 'text', 'describe', 'type', 'tree', 'traversal', 'process', 'current', 'node', 'process', 'node', 'leave', 'sub', 'tree', 'process', 'node', 'sub', 'treewhich', 'follow', 'traversal', 'describe', 'pre', 'order', 'traversal']","The following text describes a type of tree traversal: - Process current node - Process nodes in the left sub-tree - Process nodes in the right sub-treeWhich of the following traversals does the above describe?
 Pre-Order Traversal.
   "
219,219,14,0.29170000553131104,"tree, binary, order, node, leave, right, follow, avl, search, traversal",24,0.06589999794960022,"hash, element, table, bucket, use, function, close, key, store, insert",0,0.04270000010728836,"pass, point, start, book, page, short, similar, look, dijkstra, repeat","['output', 'pre', 'order', 'avl', 'tree', 'start', 'empty', 'follow', 'element', 'insert', 'order']","What is the output of the pre-order traversal of the AVL tree which started empty and had the following elements inserted in this order:6, 43, 11, 23, 9, 15
 11, 6, 9, 23, 15, 43
   "
220,220,25,0.32440000772476196,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional",46,0.021299999207258224,"go, likely, stand, adventure, sven, configuration, must, boat, looping, amount",35,0.011800000444054604,"number, people, real, create, would, say, quickly, company, change, friend","['graph', 'edge', 'go', 'vertex', 'specific', 'direction', 'know', 'direct', 'graph']","A graph in which all edges go from one vertex to another in a specific direction is known as what?
  Directed Graph
  "
221,221,55,0.06340000033378601,"datum, search, structure, remove, data, list, store, want, add, use",56,0.061900001019239426,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",44,0.016200000420212746,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na","['structure', 'algorithm']","Finish the name of this module:Data Structures and _____
   Algorithms
 "
222,222,55,0.06340000033378601,"datum, search, structure, remove, data, list, store, want, add, use",56,0.061900001019239426,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",44,0.016200000420212746,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na","['structure', 'algorithm']","Finish the name of this module:Data Structures and _____
   Algorithms
 "
223,223,24,0.23199999332427979,"hash, element, table, bucket, use, function, close, key, store, insert",56,0.06289999932050705,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",14,0.05510000139474869,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['hash', 'table', 'slot', 'many', 'insertion', 'likely', 'ie', 'probability', 'great', 'collision']","In a hash table with 600 slots, after how many insertions is there likely to be (i.e. with probability 0.5 or greater) a collision?
   29
 "
224,224,52,0.4740000069141388,"show, factor, prime, distribute, uniformly, distribution, improve, increase, reduce, advice",24,0.10239999741315842,"hash, element, table, bucket, use, function, close, key, store, insert",29,0.08049999922513962,"find, number, step, item, average, many, index, table, insert, hash","['hash', 'table', 'prime', 'number', 'bucket', 'always', 'increase', 'distribution', 'reduce', 'collision', 'explain', 'prime', 'number', 'sometimes', 'improve', 'distribution', 'reduce', 'collision', 'depend', 'distribution', 'input', 'value', 'if', 'uniformly', 'distribute', 'prime', 'number', 'little', 'effect', 'skewed', 'distribution', 'prime', 'number', 'help', 'since', 'significantly', 'reduce', 'common', 'factor']","Do hash tables that use a prime number of buckets always increase distribution and reduce collisions, explain why?
  Prime numbers can sometimes improve distributions and reduce collisions depending on the distribution of the input values. If uniformly distributed, primes numbers will have very little effect. On a skewed distribution, the prime numbers can help since you're significantly reducing the no. of common factors.
  "
225,225,14,0.3433000147342682,"tree, binary, order, node, leave, right, follow, avl, search, traversal",51,0.04280000180006027,"efficient, company, come, condition, stock, sortb, sortc, much, around, deal",24,0.011099999770522118,"hash, element, table, bucket, use, function, close, key, store, insert","['insert', 'order', 'empty', 'avl', 'tree', 'leaf', 'node', 'rebalance', 'satisfy', 'avl', 'condition']","Insert 28, 29, 16, 9, 34, 8, 20 in order into an empty AVL Tree. What are the leaf nodes after rebalancing to satisfy the AVL Condition?
8, 20, 34
    "
226,226,2,0.14239999651908875,"require, comparison, estimate, nee, minimum, identify, aka, clockwise, complexityo, outside",56,0.07270000129938126,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",40,0.05090000107884407,"array, slow, problem, may, random, element, access, integer, anywhere, face","['minimum', 'number', 'comparison', 'require', 'sort', 'permutation', 'integer']","What is the minimum number of comparisons required to sort any permutation of 7 integers?
  13
  "
227,227,56,0.15070000290870667,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",29,0.050200000405311584,"find, number, step, item, average, many, index, table, insert, hash",16,0.04960000142455101,"for, follow, time, complexity, true, give, statement, function, correct, run","['scenario', 'for', 'find', 'element', 'singly', 'link', 'list', 'size']","What is the worst case scenario for finding an element in a singly linked list of size n?
     n
"
228,228,56,0.17880000174045563,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",17,0.1362999975681305,"lane, skip, skiplist, combined, sum, organise, difference, many, exactly, assign",32,0.06279999762773514,"log, base, bottom, many, become, simplify, less, allow, level, multiple","['difference', 'singly', 'link', 'list', 'skip', 'list', 'skip', 'list', 'multiple', 'lane', 'allow', 'for', 'faster', 'search']","What is the difference between a singly linked list and a skip list?
 A skip list has multiple lanes to allow for faster searching.
   "
229,229,55,0.20550000667572021,"datum, search, structure, remove, data, list, store, want, add, use",58,0.18060000240802765,"amortise, total, archive, identification, tablewith, legacy, sensitive, technology, natureyou, standing",24,0.1420000046491623,"hash, element, table, bucket, use, function, close, key, store, insert","['start', 'work', 'long', 'standing', 'technology', 'company', 'first', 'project', 'update', 'old', 'legacy', 'datum', 'structure', 'give', 'close', 'hash', 'tablewith', 'linear_probe', 'contain', 'identification', 'number', 'longer', 'use', 'go', 'archive', 'due', 'sensitive', 'natureyou', 'task', 'copy', 'datum', 'array', 'for', 'archive', 'first', 'need', 'close', 'hash', 'table', 'key', 'store', 'tell', 'item', 'access', 'step', 'average']","You've just started work at a long standing Technology company and your first project is to update old legacy data structures. You are given a closed hash tablewith linear probing containing identification numbers that is no longer being used, but is going to be archived due to its sensitive nature.You are tasked to copy this data into an array for archiving, but first the Load factor needs to be calculated.The closed hash table has 10,000 keys stored in it and you are told any item can be accessed in 3 steps on average. What is the Load Factor?
  0.8
  "
230,230,55,0.20839999616146088,"datum, search, structure, remove, data, list, store, want, add, use",53,0.18230000138282776,"mean, new, mistake, county, send, teach, late, limited, incorrectly, incredibly",43,0.05820000171661377,"space, nlogn, worst, double, do, enough, arraylist, namortise, collection, efficiency","['course', 'number', 'datum', 'structure', 'teach', 'generally', 'structure', 'space', 'complexity', 'single', 'exception', 'teach', 'datum', 'structure', 'space', 'complexity', 'teach', 'data', 'structure', 'represent', 'exception', 'skip', 'list']","During this course a number of data structures have been taught. Generally these structures have worst case space complexity of O(n), with a single exception. One taught data structure has worst case space complexity O(n log(n)). Which of the taught data structures represents this exception?
     Skip List
"
231,231,24,0.4287000000476837,"hash, element, table, bucket, use, function, close, key, store, insert",39,0.06639999896287918,"node, sub, process, next, link, current, element, list, object, pointer",56,0.05040000006556511,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['wish', 'open', 'hashing', 'array', 'slot', 'contain', 'pointer', 'link', 'list', 'hash', 'function', 'form', 'hash', 'table', 'slot', 'if', 'insert', 'element', 'order', 'minimum', 'list', 'length', 'end']","You wish to use open hashing (where each array slot contains a pointer to a linked list). The hash function has the form h(x) = x % 6 and the hash table has slots 0, ... , 5. If you insert the elements 5, 6, 7, 9, 15, 21, 22, 61 in that order, what is the minimum list length at the end?
0
    "
232,232,16,0.17440000176429749,"for, follow, time, complexity, true, give, statement, function, correct, run",44,0.09369999915361404,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na",56,0.013299999758601189,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['for', 'input', 'size', 'asymptotic', 'time', 'complexity']","An algorithm has runtime T(n) = 0.00149n14+ 100n2+ 48nlog(n) for input of size n. What is the asymptotic time complexity of this algorithm?
  
  "
233,233,14,0.19779999554157257,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.05480000004172325,"for, follow, time, complexity, true, give, statement, function, correct, run",46,0.014000000432133675,"go, likely, stand, adventure, sven, configuration, must, boat, looping, amount","['context', 'avl', 'tree', 'avl', 'stand', 'for']","In the context of an AVL Tree, AVL stands for:
 Adelson-Velskii and Landis
   "
234,234,35,0.20440000295639038,"number, people, real, create, would, say, quickly, company, change, friend",55,0.13030000030994415,"datum, search, structure, remove, data, list, store, want, add, use",17,0.09390000253915787,"lane, skip, skiplist, combined, sum, organise, difference, many, exactly, assign","['imagine', 'software', 'engineer', 'boss', 'ask', 'implement', 'probabilistic', 'skip', 'list', 'node', 'add', 'lane', 'decrease', 'factor', 'for', 'lane', 'number', 'increase', 'however', 'due', 'lack', 'server', 'space', 'say', 'may', 'size', 'great', 'define', 'set', 'pointer', 'for', 'node', 'roughly', 'many', 'item', 'skip', 'list', 'hold', 'longer', 'consider', 'binary', 'search', 'search', 'for', 'node']","Imagine you are a software engineer a Honda. Your boss asks you to implement a probabilistic skip list in Java with the probability of a new node being added to each lane decreasing by a factor of 0.5 for each lane as the lane number increases. However, due to lack of server space, she says that you may not use any arrays of size greater than 10 when defining the set of pointers for each node. Roughly how many items can this skip list hold before it can no longer be considered binary search when searching for nodes?
   1024
 "
235,235,24,0.13099999725818634,"hash, element, table, bucket, use, function, close, key, store, insert",50,0.09149999916553497,"lot, waste, disadvantage, looping, verticesfew, suitable, letf, invent, memory, say",35,0.054999999701976776,"number, people, real, create, would, say, quickly, company, change, friend","['disadvantage', 'use', 'hash', 'table', 'small', 'load', 'say', 'for', 'lot', 'memory', 'waste']","What is one disadvantage of using a Hash Table with a small load L?(say, for L < 0.2)
   A lot of memory is wasted.
 "
236,236,56,0.2538999915122986,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",55,0.11869999766349792,"datum, search, structure, remove, data, list, store, want, add, use",16,0.11110000312328339,"for, follow, time, complexity, true, give, statement, function, correct, run","['consider', 'average', 'time', 'complexity', 'for', 'search', 'algorithmselect', 'true', 'statement', 'array', 'list', 'search', 'faster', 'link', 'list', 'search', 'array', 'list', 'link', 'list']","Consider average time complexity for each search algorithm.Select the only true statement.
   Array List search is faster than Linked List search, with Array List O(1) and Linked List O(n)
 "
237,237,29,0.2791000008583069,"find, number, step, item, average, many, index, table, insert, hash",24,0.148499995470047,"hash, element, table, bucket, use, function, close, key, store, insert",13,0.010200000368058681,"second, take, record, long, run, expect, likely, question, information, implementation","['suppose', 'close', 'hash', 'table', 'load', 'take', 'average', 'step', 'find', 'item', 'table', 'value', 'sigfig']","Suppose I have a Close Hash Table with load L, and it takes me on average 1.15 steps to find an item in the table. What is the value of L (to 2 sig.fig.) ?
  0.23
  "
238,238,25,0.05950000137090683,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional",16,0.05849999934434891,"for, follow, time, complexity, true, give, statement, function, correct, run",6,0.05779999867081642,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly","['main', 'measure', 'for', 'efficiency']","Two main measures for the efficiency of an algorithm are_________________
 Time and Space
   "
239,239,56,0.17739999294281006,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",44,0.11140000075101852,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na",30,0.07639999687671661,"operation, middle, link, array, perform, advantage, make, item, front, either","['follow', 'input', 'make', 'insertion', 'sort', 'ascend', 'order', 'perform', 'large', 'number', 'comparison']","Which of the following input Arrays makes insertion sort in ascending order perform the largest number of comparisons?
  (7,6,5,3,2,0)
  "
240,240,39,0.4291999936103821,"node, sub, process, next, link, current, element, list, object, pointer",14,0.08649999648332596,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.06800000369548798,"for, follow, time, complexity, true, give, statement, function, correct, run","['consider', 'follow', 'doubly', 'link', 'list', 'head', 'tailwhere', 'node', 'object', 'integer', 'value', 'prev', 'head', 'next', 'object', 'type', 'similar', 'for', 'remain', 'list', 'perform', 'follow', 'operation', 'value', 'prev', 'next', 'onenext', 'temp', 'threeprev', 'temp', 'head', 'temp', 'tail']","Consider the following doubly linked list:HEAD - one - two - three - four - five - TAILwhere one is a Node object with integer value 1, prev = HEAD, next = two. This object type is similar for the remaining nodes.What will the list be after performing the following operations:Node temp = New Node(value=7, prev=one, next=three)one.next = temp;three.prev = temp;
  HEAD - one - temp - three - four - five - TAIL
  "
241,241,35,0.5558000206947327,"number, people, real, create, would, say, quickly, company, change, friend",55,0.10809999704360962,"datum, search, structure, remove, data, list, store, want, add, use",16,0.032600000500679016,"for, follow, time, complexity, true, give, statement, function, correct, run","['application', 'for', 'supermarket', 'checkout', 'need', 'store', 'product', 'serial', 'number', 'application', 'must', 'able', 'quickly', 'find', 'product', 'link', 'serial', 'number', 'scan', 'cashiershould', 'serial', 'number', 'product', 'change', 'application', 'also', 'able', 'quickly', 'change', 'serial', 'number', 'associate', 'relevant', 'product', 'follow', 'datum', 'structure', 'would', 'appropriate', 'store', 'product', 'serial', 'number']","An application for a supermarket checkout needs to store products with their serial numbers, and the application must be able to quickly find the product linked to the serial number which has been scanned by the cashier.Should the serial number of the product change, the application should also be able to quickly change the serial number associated with the relevant product. Which of the following data structures would be most appropriate to store the products and serial numbers in memory?
 Open hashtable
   "
242,242,56,0.2964000105857849,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.13840000331401825,"for, follow, time, complexity, true, give, statement, function, correct, run",32,0.03889999911189079,"log, base, bottom, many, become, simplify, less, allow, level, multiple","['correct', 'for', 'good', 'time', 'complexity', 'for', 'follow', 'sort', 'selection', 'sort', 'bubble', 'sort', 'quick', 'sort', 'log']","Which of these is correct for the BEST time complexity for the following Algorithms?
  Insertion Sort: T(n)Selection Sort: T(n^2)Bubble Sort: T(n)Quick Sort: T(n log n)Merge Sort: T(n log n)
  "
243,243,14,0.15279999375343323,"tree, binary, order, node, leave, right, follow, avl, search, traversal",26,0.014399999752640724,"looping, letf, invent, queue, default, dump, bsta, legal, mergesort, worst_case",45,0.014399999752640724,"looping, letf, invent, queue, default, dump, bsta, legal, mergesort, worst_case","['post', 'traversal', 'tree']","What is the Post-Order Traversal of the tree: 20 / \ 10 28 / \ 5 18 \ 19
 [5,19,18,10,28,20]
   "
244,244,24,0.4505999982357025,"hash, element, table, bucket, use, function, close, key, store, insert",56,0.03929999843239784,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",0,0.0,,"['use', 'open', 'hash', 'ahash', 'function', 'form', 'hash', 'table', 'slot', 'if', 'insert', 'element', 'order', 'maximum', 'list', 'length', 'end']","Using open hashing with ahash function of the form h(x) = x % 7 and a hash table with slots 0, …,6, if you insert the elements 15, 7, 22, 8, 19, 31, 30, 29, 40, 81 in that order, what is the maximum list length at the end?
   4
 "
245,245,16,0.17319999635219574,"for, follow, time, complexity, true, give, statement, function, correct, run",39,0.1137000024318695,"node, sub, process, next, link, current, element, list, object, pointer",56,0.053199999034404755,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['recurrence', 'relation', 'for', 'quicksort', 'time', 'complexity', 'case', 'recurrence', 'time', 'complexity']","What is the recurrence relation for worst case QuickSort, and what is the time complexity in this case?
     Recurrence: T(n) = T(n-1) + O(n)Time Complexity: O(n^2)
"
246,246,44,0.325300008058548,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na",16,0.07270000129938126,"for, follow, time, complexity, true, give, statement, function, correct, run",39,0.04100000113248825,"node, sub, process, next, link, current, element, list, object, pointer","['quadratic', 'time', 'use', 'elementary_operation', 'process', 'input', 'size', 'predict', 'number', 'elementary_operation', 'for', 'input', 'size']","A quadratic time algorithm uses 70 elementary operations to process an input of size 20. What is the predicted number of elementary operations it will use for an input of size 200?
 7000
   "
247,247,1,0.29170000553131104,"measurement, select, precision, option, accuracy, value, close, mathematical, technique, difference",56,0.25929999351501465,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.08820000290870667,"for, follow, time, complexity, true, give, statement, function, correct, run","['consider', 'follow', 'hypothetical', 'situation', 'sort', 'use', 'quicksort', 'time', 'insertion', 'sort', 'time', 'average', 'input', 'list', 'arrive', 'give', 'list', 'already', 'completely', 'sort', 'probability', 'rest', 'randomgive', 'equality', 'for', 'term', 'for', 'approach', 'quicker', 'always', 'use', 'selection', 'sortyou', 'may', 'refer', 'note', 'hypothetical', 'nature', 'question', 'answer', 'may', 'seem', 'counter', 'intuitive', 'make', 'mathematical', 'sense']","Consider the following hypothetical situation:You have a sorting algorithm which uses quicksort 50% of the time, and insertion sort 50% of the time, on average. n input lists arrive such a given list is already completely sorted with probability x, and the rest are random.Give an equality for x in terms of n for when this approach will be quicker than always using Selection sortYou may refer to the below:(Note that because of the hypothetical nature of the question, the answer may seem counter-intuitive, but will make mathematical sense)
  
  "
248,248,55,0.3458000123500824,"datum, search, structure, remove, data, list, store, want, add, use",0,0.2651999890804291,"pass, point, start, book, page, short, similar, look, dijkstra, repeat",16,0.05590000003576279,"for, follow, time, complexity, true, give, statement, function, correct, run","['work', 'for', 'spotazon', 'music', 'ask', 'implement', 'data', 'structure', 'store', 'music', 'playlist', 'user', 'want', 'able', 'easily', 'add', 'remove', 'track', 'point', 'playlist', 'able', 'skip', 'forward', 'backwards', 'track', 'brief', 'datum', 'structure', 'maximise', 'speed', 'function', 'follow', 'datum', 'structure', 'would', 'appropriate', 'doubly', 'link', 'list']","You work for Spotazon music, and have been asked to implement a data structure to store music playlists. Users will want to be able to easily add/remove tracks from any point in the playlist, and they should be able to skip forward/skip backwards a track. Your brief is to use a data structure that will maximise the speed of these functions. Which of the following data structures would be most appropriate.
  Doubly-Linked List
  "
249,249,24,0.4092000126838684,"hash, element, table, bucket, use, function, close, key, store, insert",16,0.07689999788999557,"for, follow, time, complexity, true, give, statement, function, correct, run",29,0.03759999945759773,"find, number, step, item, average, many, index, table, insert, hash","['close', 'linear_probing', 'right', 'ie', 'direction', 'high', 'index', 'hash', 'function', 'form', 'hash', 'table', 'slot', 'if', 'insert', 'element', 'order', 'unknown', 'integer', 'none', 'correct']","You use a standard closed hashtable with linear probing (to the right, i.e. in the direction of higher indices). The hash function has the form h(x) = x % 7 and the hash table has slots 0, … , 6. If you insert the elements 18,19,25,701,77,74,y in that order, where y is an unknown integer, what does the hashtable look like at the end?a) 77,701,74,y,18,19,25b) 77,25,701,y,18,19,74c) 77,701,y,19,18,25,74d) 77,18,19,701,25,74,ye) None of the above are correct
77,701,74,y,18,19,25
    "
250,250,56,0.5162000060081482,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",40,0.0560000017285347,"array, slow, problem, may, random, element, access, integer, anywhere, face",0,0.0,,"['consider', 'follow', 'list', 'list', 'list', 'integer', 'inclusive', 'ascend', 'orderlist', 'random', 'permutation', 'list', 'xwhich', 'statement', 'false', 'average', 'quicksort', 'sort', 'list', 'fast', 'insertion', 'sort', 'sort', 'list']","Consider the following two lists:List X: List of integers from 1 to 100 (inclusive) in ascending orderList Y: Random permutation of list XWhich of the statements A-D is FALSE (on average)?
   Quicksort will sort list Y faster than Insertion sort will sort list X
 "
251,251,16,0.27619999647140503,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.017000000923871994,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",6,0.013100000098347664,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly","['follow', 'algorithm', 'low', 'complexity', 'class', 'while', 'sum']","Which of the following algorithms has the lowest complexity class
  k = n;while (k > 1){ sum++; k = k/2;}
  "
252,252,11,0.3384000062942505,"complete, digit, count, least, significant, digits, basis, position, share, counting",56,0.13689999282360077,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",29,0.06629999727010727,"find, number, step, item, average, many, index, table, insert, hash","['step', 'take', 'complete', 'list', 'integer', 'assume', 'key', 'digit', 'number', 'complete', 'count', 'sort', 'individual', 'value', 'share', 'least', 'significant', 'position', 'continue', 'next', 'least', 'significant', 'digit', 'complete', 'stable', 'counting', 'sort']","What are the steps taken to complete a Radix Sort on a list of integers?
 Assume the key is a d-digit number, with d? {0, ..., k-1}. Complete a counting sort on the individual values that share the least significant position, and then continue to the next least-significant digit to complete a stable counting sort and so on.
   "
253,253,16,0.22679999470710754,"for, follow, time, complexity, true, give, statement, function, correct, run",49,0.059700001031160355,"int, result, return, term, many, num, body, function, heap, count",35,0.04650000110268593,"number, people, real, create, would, say, quickly, company, change, friend","['follow', 'codefor', 'int', 'for', 'if', 'for', 'int', 'even']","What is the runtime of the following code?for (int i=0; i < N; ++i) { for (int j=0; j < M/2; j=j*2) { System.out.println(j); if (i%2 == 0) { for (int k=0; k < 2*N; ++k) { System.out.println(i + "" is even""); } } }}

    "
254,254,14,0.3467000126838684,"tree, binary, order, node, leave, right, follow, avl, search, traversal",29,0.05900000035762787,"find, number, step, item, average, many, index, table, insert, hash",44,0.01119999960064888,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na","['give', 'follow', 'number', 'construct', 'perfectly', 'balancedbinary', 'search', 'tree', 'number', 'order', 'number', 'root']","Given the following numbers: 6,2,18,34,13,14.When constructing a perfectly balancedbinary search tree from the numbers in that order, which number is its root?
  13
  "
255,255,13,0.23360000550746918,"second, take, record, long, run, expect, likely, question, information, implementation",16,0.13429999351501465,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.07209999859333038,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['selection', 'sort', 'run', 'for', 'second', 'for', 'record', 'likely', 'likely', 'run', 'for', 'record', 'second']","Selection Sort runs for 5 seconds for 100 records. How likely is it likely to run for 10,000 records?
   50,000 seconds
 "
256,256,6,0.3005000054836273,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly",39,0.10209999978542328,"node, sub, process, next, link, current, element, list, object, pointer",16,0.09730000048875809,"for, follow, time, complexity, true, give, statement, function, correct, run","['incomplete', 'code', 'for', 'class', 'get', 'find', 'element', 'link', 'list', 'code', 'must', 'go', 'for', 'object', 'get', 'int', 'if', 'return', 'error', 'nodeelement', 'for', 'nodenext']","Below is an incomplete code for the class LinkedList.Method 'Get' finds the ith element in the linked list. Which code must go at 'X' for the code to work.public Object get(int i){ if (i<0 || i>=n) { return error; } ListNode node = head; Xreturn node.element;}
  for (int j=0; j<i; j++){node = node.next;}
  "
257,257,16,0.18150000274181366,"for, follow, time, complexity, true, give, statement, function, correct, run",17,0.09889999777078629,"lane, skip, skiplist, combined, sum, organise, difference, many, exactly, assign",55,0.08100000023841858,"datum, search, structure, remove, data, list, store, want, add, use","['element', 'list', 'lane', 'follow', 'statement', 'true', 'new', 'element', 'must', 'point', 'for', 'lane', 'exist', 'apart', 'lane', 'exist']","You have to insert the element ""20"" in this skip list, p = 0.5, max lanes = 5:Which one of the following statements are true?
The new element must point to ""30"" for each lane it exists on, apart from the lanes ""30"" doesn't exist on.
    "
258,258,25,0.09920000284910202,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional",29,0.056699998676776886,"find, number, step, item, average, many, index, table, insert, hash",16,0.05480000004172325,"for, follow, time, complexity, true, give, statement, function, correct, run","['follow', 'matrix', 'represent', 'graph']","Below is an example graph. Which of the following adjacency matrices represent this graph?
  
  "
259,259,56,0.06350000202655792,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",42,0.05829999968409538,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",55,0.0568000003695488,"datum, search, structure, remove, data, list, store, want, add, use","['sort', 'data', 'set', 'gap', 'size']","What is the result of shell sorting the data set below with a gap size of 3.56 21 30 43 98 23
 43 21 23 56 98 30
   "
260,260,16,0.11819999665021896,"for, follow, time, complexity, true, give, statement, function, correct, run",42,0.11129999905824661,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",56,0.06499999761581421,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['follow', 'true', 'always', 'possible', 'make', 'big', 'theta', 'statement']","Which of the following is TRUE?
  It is not always possible to make a Big Theta (?) statement about an algorithm
  "
261,261,14,0.21660000085830688,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.020899999886751175,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.013299999758601189,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['correct', 'order', 'traversal', 'binary', 'tree']","What is the correct in order traversal of this Binary tree?
 abcde
   "
262,262,0,0.17080000042915344,"pass, point, start, book, page, short, similar, look, dijkstra, repeat",14,0.10930000245571136,"tree, binary, order, node, leave, right, follow, avl, search, traversal",56,0.08590000122785568,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['use', 'dijkstra', 'algorithm', 'start', 'node', 'state', 'order', 'nodestraverse', 'reach', 'node']","Using Dijkstra's algorithm, starting at node S, state the order of nodestraversed before reaching the node B.
  S, A, E, C, D, F, B
  "
263,263,14,0.2840000092983246,"tree, binary, order, node, leave, right, follow, avl, search, traversal",35,0.012299999594688416,"number, people, real, create, would, say, quickly, company, change, friend",29,0.012299999594688416,"find, number, step, item, average, many, index, table, insert, hash","['example', 'binary', 'tree', 'pre', 'order', 'traversal', 'tree']","Below is an example binary tree. What is the pre-order traversal of this tree?
  21, 16, 2, 1, 11, 5, 13, 45, 22, 44, 23, 50, 48
  "
264,264,56,0.13379999995231628,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",30,0.11840000003576279,"operation, middle, link, array, perform, advantage, make, item, front, either",16,0.07540000230073929,"for, follow, time, complexity, true, give, statement, function, correct, run","['link', 'list', 'array', 'true', 'fast', 'search', 'for', 'item', 'middle', 'array', 'link', 'list']","Which statement about linked lists and arrays is TRUE?
 It is faster to search for an item in the middle of an array than a linked list.
   "
265,265,29,0.273499995470047,"find, number, step, item, average, many, index, table, insert, hash",24,0.1543000042438507,"hash, element, table, bucket, use, function, close, key, store, insert",56,0.011099999770522118,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['consider', 'closed', 'hash', 'table', 'bucket', 'store', 'average', 'many', 'step', 'would', 'take', 'find', 'item']","Consider a closed hash table with 150 buckets storing 100 items.On average, how many steps of linear probing would it take to find an item?
 2
   "
266,266,14,0.2782999873161316,"tree, binary, order, node, leave, right, follow, avl, search, traversal",55,0.07079999893903732,"datum, search, structure, remove, data, list, store, want, add, use",28,0.04410000145435333,"child, add, non, cause, leaf, full, slow, sift, treechild, nodeleaf","['list', 'number', 'store', 'avl', 'leave', 'child', 'leave', 'subtree', 'root', 'tree', 'balance']","The list of numbers {10, 36, 27 22, 4} is to be stored as an AVL Tree.Which numbers, will be the leaves (subtrees with no children) of the left subtree from the root when the tree is balanced?
     4, 22
"
267,267,14,0.6251999735832214,"tree, binary, order, node, leave, right, follow, avl, search, traversal",56,0.03180000185966492,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",38,0.023399999365210533,"small, motorway, occur, strategy, city, major, divisible, scenario, repeatedly, shelf","['follow', 'integer', 'insert', 'empty', 'alv', 'tree', 'follow', 'order', 'tree', 'put', 'great', 'integer', 'right', 'small', 'one', 'leave', 'would', 'somewhere', 'right', 'tree', 'keep', 'balanced', 'insertion', 'node', 'tree', 'print', 'use', 'pre', 'separate', 'print', 'if', 'encounter', 'use', 'method', 'follow', 'correct', 'output', 'produce']","The following integers are inserted into an empty ALV Tree in the following order: 4, 8, 15, 16, 23, 42. The tree puts the greater integers on the right, and smaller ones on the left e.g 8 would be somewhere to the right of 4. The tree is kept balanced after each insertion. Each node of the tree is then printed using pre-order traversal separated by commas. Nothing is printed if a null node is encountered using this method. Which of the following is the correct output produced?
 16,8,4,15,23,42
   "
268,268,42,0.16210000216960907,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",43,0.05260000005364418,"space, nlogn, worst, double, do, enough, arraylist, namortise, collection, efficiency",56,0.05009999871253967,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['correct', 'assigment', 'big', 'notation', 'fortheta', 'worst', 'good']","Correct assigments of big O notation forTheta, Omega, Oare:
  Exact, Worst, Best
  "
269,269,56,0.17479999363422394,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",30,0.09139999747276306,"operation, middle, link, array, perform, advantage, make, item, front, either",16,0.013500000350177288,"for, follow, time, complexity, true, give, statement, function, correct, run","['follow', 'sort', 'algorithm', 'shellsort', 'make', 'sort']","Which of the following sorting algorithms does shellsort make use of?
  h-sort
  "
270,270,14,0.14229999482631683,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.11509999632835388,"for, follow, time, complexity, true, give, statement, function, correct, run",28,0.05090000107884407,"child, add, non, cause, leaf, full, slow, sift, treechild, nodeleaf","['follow', 'true', 'for', 'binary', 'tree', 'node', 'child']","Which of the following is true for all binary trees?
Every node has at most 2 children
    "
271,271,14,0.1712000072002411,"tree, binary, order, node, leave, right, follow, avl, search, traversal",25,0.09449999779462814,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional",56,0.013899999670684338,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['main', 'type', 'graph', 'traversal', 'depth', 'first']","What are the 2 main types of graph traversal?
 Breadth-first, depth-first
   "
272,272,29,0.08780000358819962,"find, number, step, item, average, many, index, table, insert, hash",24,0.06859999895095825,"hash, element, table, bucket, use, function, close, key, store, insert",55,0.06030000001192093,"datum, search, structure, remove, data, list, store, want, add, use","['closed', 'hashtable', 'remove', 'item']","What can't/shouldn't you do with closed hashtables?
  Remove items
  "
273,273,56,0.1023000031709671,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",30,0.0575999990105629,"operation, middle, link, array, perform, advantage, make, item, front, either",24,0.054499998688697815,"hash, element, table, bucket, use, function, close, key, store, insert","['advantage', 'sort', 'merge', 'place']","What is an advantage of Heap Sort over Merge Sort?
  It is an in-place sort
  "
274,274,16,0.25130000710487366,"for, follow, time, complexity, true, give, statement, function, correct, run",49,0.08619999885559082,"int, result, return, term, many, num, body, function, heap, count",33,0.0430000014603138,"else, looping, letf, random, invent, fibonacci, queue, default, value, dump","['int', 'int', 'for', 'for', 'if', 'for', 'int', 'true', 'else', 'false']","What is the Big-Theta of this code:void myProgram (int a, int b, int c){ for(int i=0; i<a*a; i++){ for(int j=0; j<b; j++){ if(j==b/2){ for(int k=0; k<c; k++){ System.out.println(""TRUE""); } } else { System.out.println(""FALSE""); } } }}
   
 "
275,275,56,0.3555999994277954,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.011099999770522118,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.010999999940395355,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['follow', 'sort', 'algorithm', 'stable', 'selection', 'sortinsertion', 'sortbubble', 'insertion', 'sortbubble', 'sort']","Which three of the following sorting algorithms are stable?:Selection sort,Insertion sort,Bubble sort,Shell sort,Quick sort,Merge sort,Heap sort.
     Insertion sort,Bubble sort,Merge sort.
"
276,276,32,0.17299999296665192,"log, base, bottom, many, become, simplify, less, allow, level, multiple",16,0.16750000417232513,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.05510000139474869,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['function', 'respective', 'time', 'complexity', 'define', 'log', 'base', 'for', 'value', 'become', 'faster']","Two functions have respective time complexities defined by:where log is of base-2.For what value of n does g become faster than f?
 n=107
   "
277,277,14,0.3628999888896942,"tree, binary, order, node, leave, right, follow, avl, search, traversal",49,0.04399999976158142,"int, result, return, term, many, num, body, function, heap, count",56,0.010900000110268593,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['consider', 'follow', 'tree', 'would', 'result', 'printing', 'value', 'node', 'via', 'post', 'order', 'traversal']","Consider the following tree:What would be the result of printing the values of each node via POST-ORDER traversal?
  D G H E B F C A
  "
278,278,6,0.13899999856948853,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly",56,0.11980000138282776,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",39,0.06620000302791595,"node, sub, process, next, link, current, element, list, object, pointer","['follow', 'code', 'snippet', 'would', 'correctly', 'remove', 'nthelement', 'doubly', 'link', 'list']","Which of the following code snippets would correctly remove the nthelement, n, of a doubly-linked list?
  n.prev.next = n.next;n.next.prev = n.prev;
  "
279,279,56,0.22540000081062317,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.09730000048875809,"for, follow, time, complexity, true, give, statement, function, correct, run",29,0.012299999594688416,"find, number, step, item, average, many, index, table, insert, hash","['follow', 'sort', 'algorithm', 'stable', 'average', 'time', 'complexity', 'nlog']","Which of the following sorting algorithm is stable and has average time complexity of nlog(n)
  Merge
  "
280,280,39,0.38089999556541443,"node, sub, process, next, link, current, element, list, object, pointer",35,0.08910000324249268,"number, people, real, create, would, say, quickly, company, change, friend",17,0.0786999985575676,"lane, skip, skiplist, combined, sum, organise, difference, many, exactly, assign","['assume', 'perfect', 'skip', 'list', 'describe', 'coursework', 'element', 'link', 'next', 'even', 'number', 'element', 'also', 'link', 'ahead', 'element', 'number', 'divisible', 'also', 'link', 'ahead', 'power', 'skip', 'list', 'contain', 'element', 'many', 'element', 'least', 'lane']","Assume that we have a perfect skip list (as described in 2019 coursework 2 Q3... ""every element is linked to the next, even numbered elements are also linked to the one 2 ahead, elements whose number is divisible by 4 are also linked to the one 4 ahead, and so on by powers of 2."").The skip list contains 32768 elements. How many elements have at least 11 lanes?
 31
   "
281,281,14,0.29739999771118164,"tree, binary, order, node, leave, right, follow, avl, search, traversal",32,0.12280000001192093,"log, base, bottom, many, become, simplify, less, allow, level, multiple",16,0.03929999843239784,"for, follow, time, complexity, true, give, statement, function, correct, run","['binary', 'tree', 'depth', 'full', 'level', 'except', 'for', 'bottom', 'bottom', 'level', 'contain', 'node', 'many', 'node', 'tree']","A binary tree has a depth of 6, it is full on all levels except for the bottom. The bottom level contains 4 nodes, how many nodes are there in the tree?
  67
  "
282,282,56,0.15000000596046448,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",24,0.148499995470047,"hash, element, table, bucket, use, function, close, key, store, insert",16,0.0794999971985817,"for, follow, time, complexity, true, give, statement, function, correct, run","['follow', 'statement', 'true', 'add', 'value', 'open', 'hash', 'table', 'current', 'index', 'already', 'algorithm', 'add', 'end', 'link', 'list', 'associate']","Which of the following statements are true?
  When adding a value to an Open Hash Table the current index is already in use the algorithm will add it to the end of a linked list associated with that index.
  "
283,283,49,0.2102999985218048,"int, result, return, term, many, num, body, function, heap, count",16,0.1573999971151352,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.01119999960064888,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['time', 'follow', 'extract', 'hello_world', 'for', 'int', 'test', 'for', 'int', 'test']","What is the time complexity of the following extract of code?System.out.println(""Hello world"");for(int i = 0; i < n; i++){ System.out.println(""Test"");}for(int j = 0; j < n; j++){ System.out.println(""Test"");}
 O(n)
   "
284,284,42,0.1412999927997589,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",16,0.05490000173449516,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.015799999237060547,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['follow', 'define', 'big', 'notation']","which of the following defines Big-O notation where g(n) = O(f(n))?
? c>0 n0>0 | ?n>n0 : g(n) = c f(n)
    "
285,285,55,0.13940000534057617,"datum, search, structure, remove, data, list, store, want, add, use",16,0.11420000344514847,"for, follow, time, complexity, true, give, statement, function, correct, run",24,0.07519999891519547,"hash, element, table, bucket, use, function, close, key, store, insert","['follow', 'data', 'structure', 'average', 'search', 'time', 'complexity', 'oft', 'hash', 'table']","Which one of the following data structures has the average search time complexity ofT(1)?
     Hash Table
"
286,286,25,0.18850000202655792,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional",49,0.049400001764297485,"int, result, return, term, many, num, body, function, heap, count",52,0.048900000751018524,"show, factor, prime, distribute, uniformly, distribution, improve, increase, reduce, advice","['if', 'direct', 'graph', 'happen', 'result', 'show', 'matrix', 'arcs', 'apart']","If we cube the adjacency matrix of a directed graph, what should happen?
  The resulting matrix should show all the matrices that are 3 arcs apart from each other.
  "
287,287,16,0.3052999973297119,"for, follow, time, complexity, true, give, statement, function, correct, run",6,0.08720000088214874,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly",13,0.0494999997317791,"second, take, record, long, run, expect, likely, question, information, implementation","['for', 'follow', 'piece', 'print', 'string', 'console', 'take', 'constant', 'timepublic', 'static', 'void', 'function', 'for', 'for']","For the following piece of Java code, select the worst case runtime from the options given.N.B. You can assume that printing a string to console takes constant time.public static void function (int N) { for (int i = 1; i < N; i++) { for (int j = 1; j < N; j = j * 2) { System.out.println(""hello world""); } }}
  O(NlogN)
  "
288,288,14,0.3553999960422516,"tree, binary, order, node, leave, right, follow, avl, search, traversal",28,0.1931000053882599,"child, add, non, cause, leaf, full, slow, sift, treechild, nodeleaf",42,0.03139999881386757,"big, definition, bind, set, notation, omega, final, lecture, theta, exact","['option', 'correct', 'definition', 'follow', 'leafcomplete', 'full', 'binary', 'treebinary', 'tree', 'leaf', 'full', 'binary', 'tree', 'leaf', 'node', 'depth', 'non', 'leaf', 'exactly', 'childrenbinary', 'tree', 'tree', 'node', 'child']","What option has the correct definitions of each of the following:leafComplete (Full) Binary treeBinary tree
  leaf - A node with 0 childrenComplete (Full) Binary tree - Every leaf node has the same depth, Every non-leaf has exactly two childrenBinary tree - A tree where every node has at most two children
  "
289,289,39,0.3772999942302704,"node, sub, process, next, link, current, element, list, object, pointer",14,0.35199999809265137,"tree, binary, order, node, leave, right, follow, avl, search, traversal",0,0.0,,"['option', 'order', 'pre', 'order', 'traversalin', 'order', 'traversalpost', 'order', 'traversal', 'process', 'current', 'node', 'process', 'node', 'leave', 'sub', 'tree', 'process', 'node', 'right', 'sub', 'tree', 'process', 'node', 'leave', 'sub', 'tree', 'process', 'current', 'node', 'process', 'node', 'right', 'sub', 'tree', 'process', 'node', 'leave', 'sub', 'tree', 'process', 'node', 'right', 'sub', 'tree', 'process', 'current', 'node']","which of these options is in the order of:pre-order TraversalIn-order TraversalPost-order Traversal
   1. Process the current node2. Process the nodes in the left sub-tree3. process the nodes in the right sub-tree1. Process the nodes in the left sub-tree2. Process the Current node3. Process the nodes in the right sub-tree1. Process the nodes in the left sub-tree2. Process the nodes in the right sub-tree3. Process the current node
 "
290,290,32,0.08739999681711197,"log, base, bottom, many, become, simplify, less, allow, level, multiple",14,0.07930000126361847,"tree, binary, order, node, leave, right, follow, avl, search, traversal",42,0.04919999837875366,"big, definition, bind, set, notation, omega, final, lecture, theta, exact","['order', 'follow', 'big', 'runtime', 'large', 'small', 'log', 'log']","Order the following Big O runtimes from largest to smallest:O(log n), O(1), O(n log n), O(n), O(), O()
   O(), O(), O(n log n), O(n), O(log n), O(1)
 "
291,291,29,0.2549999952316284,"find, number, step, item, average, many, index, table, insert, hash",24,0.13619999587535858,"hash, element, table, bucket, use, function, close, key, store, insert",14,0.010700000450015068,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['if', 'close', 'hash', 'table', 'linear_probing', 'average', 'number', 'step', 'insert', 'find', 'item']","If the closed hash table with linear probing has a load factor of 0.30, what is the average number of steps to insert/find an item.
  ~1.21
  "
292,292,39,0.18930000066757202,"node, sub, process, next, link, current, element, list, object, pointer",16,0.12460000067949295,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.12060000002384186,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['correct', 'recurrence', 'relation', 'for', 'merge', 'sort', 'number', 'element', 'list', 'sort', 'great', 'positive', 'power', 'for', 'simplicity']","What is the correct recurrence relation for merge sort (when N, the number of elements of the list being sorted, is greater than 1 and a positive power of 2 for simplicity)?
  T(N) = 2T(N/2) + O(N)
  "
293,293,56,0.2231999933719635,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",29,0.014100000262260437,"find, number, step, item, average, many, index, table, insert, hash",16,0.013700000010430813,"for, follow, time, complexity, true, give, statement, function, correct, run","['good', 'average', 'complexity', 'selection', 'sort']","What is the best, average and worst case complexity of selection sort?

    "
294,294,56,0.1137000024318695,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",40,0.07989999651908875,"array, slow, problem, may, random, element, access, integer, anywhere, face",30,0.05689999833703041,"operation, middle, link, array, perform, advantage, make, item, front, either","['perform', 'pass', 'sort', 'follow', 'array', 'take', 'array', 'output']","Perform 1 pass of h-sort on the following array taking h to be 4.1D array = 31, 6, 4, 21, 12, 84, 19, 62, 4, 11, 1, 91Output will be?
12, 6, 4, 21, 4, 11, 1, 62, 31, 84, 19, 91
    "
295,295,16,0.25859999656677246,"for, follow, time, complexity, true, give, statement, function, correct, run",42,0.16699999570846558,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",24,0.010499999858438969,"hash, element, table, bucket, use, function, close, key, store, insert","['formal', 'definition', 'big', 'omega', 'for', 'positive', 'function', 'function', 'equalso', 'if', 'if', 'constant', 'for']","What is the formal definition of 'Big-Omega' , for a positive function f(n)?
A function g(n) equalsO(f(n)) if and only if there are constants c>0 and n0>0 so that for all n>n0, g(n)= cf(n).
    "
296,296,39,0.20059999823570251,"node, sub, process, next, link, current, element, list, object, pointer",6,0.18729999661445618,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly",56,0.14100000262260437,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['assume', 'deleting', 'element', 'call', 'doubly', 'link', 'list', 'equip', 'prev', 'next', 'reference', 'follow', 'line', 'code', 'would', 'correctly', 'delete', 'element', 'list', 'nodenext', 'nodenextprev', 'nodeprev']","Assume you are deleting an element (called 'node') from the middle of a doubly-linked list equipped with prev and next references. Which of the following lines of code would correctly delete the element in the list?
  node.prev.next = node.next; node.next.prev = node.prev;
  "
297,297,55,0.3352999985218048,"datum, search, structure, remove, data, list, store, want, add, use",14,0.12849999964237213,"tree, binary, order, node, leave, right, follow, avl, search, traversal",24,0.035999998450279236,"hash, element, table, bucket, use, function, close, key, store, insert","['type', 'search', 'find', 'element', 'order', 'set', 'data', 'binary', 'search', 'interpolation', 'search', 'linear', 'search', 'complexitie', 'binary', 'search', 'interpolation', 'search', 'search']","Three types of search that we can use to find an element in an ordered set of data are binary search, interpolation search and linear search. What are their complexities?
  Binary Search is ?(log(n)), Interpolation Search is ?(log(log(n))), Linear Search is ?(n)
  "
298,298,14,0.39730000495910645,"tree, binary, order, node, leave, right, follow, avl, search, traversal",29,0.1054999977350235,"find, number, step, item, average, many, index, table, insert, hash",55,0.020400000736117363,"datum, search, structure, remove, data, list, store, want, add, use","['add', 'follow', 'number', 'binary', 'search', 'tree', 'order', 'depth', 'tree', 'minimum', 'number', 'node', 'would', 'need', 'add', 'make', 'complete', 'depth', 'node']","I add the following numbers to a Binary Search Tree in this order: 13, 5, 19, 8, 7, 16, 18, 12, 17What is the depth of the tree? What is the minimum number of nodes I would need to add to make it complete?
     depth:4, nodes:22
"
299,299,56,0.22380000352859497,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.013799999840557575,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.013399999588727951,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['follow', 'algorithm', 'stable', 'merge', 'sort']","Which of the following algorithms is stable?
Merge sort
    "
300,300,14,0.3880999982357025,"tree, binary, order, node, leave, right, follow, avl, search, traversal",2,0.04100000113248825,"require, comparison, estimate, nee, minimum, identify, aka, clockwise, complexityo, outside",16,0.010200000368058681,"for, follow, time, complexity, true, give, statement, function, correct, run","['give', 'avl', 'tree', 'value', 'insert', 'rotation', 'require', 'order', 'balance', 'tree', 'right', 'left', 'rotation']","Given the AVL tree:When the value of 12 is inserted, which rotation is required in order to balance the tree?
   Right-left rotation
 "
301,301,39,0.3928000032901764,"node, sub, process, next, link, current, element, list, object, pointer",16,0.08579999953508377,"for, follow, time, complexity, true, give, statement, function, correct, run",6,0.03550000116229057,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly","['follow', 'code', 'for', 'for', 'particular', 'adt', 'itclass', 'public', 'object', 'element', 'public', 'node', 'next', 'public', 'node', 'object', 'element', 'next', 'list', 'lane']","The following is code for a Node for a particular ADT. Which ADT is it?class Node{ public Object element; public Node[ ] next; public Node(Object o){ element = o; next = new Node[5]; }}
   Skip List with 5 lanes
 "
302,302,24,0.2978000044822693,"hash, element, table, bucket, use, function, close, key, store, insert",56,0.10970000177621841,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",52,0.03720000013709068,"show, factor, prime, distribute, uniformly, distribution, improve, increase, reduce, advice","['use', 'hash', 'function', 'insert', 'element', 'open', 'hash', 'table', 'slot', 'follow', 'option', 'show', 'third', 'element', 'long', 'list', 'insertion']","Using the hash function h(x) = x%5, insert the elements 31, 60, 7, 46, 73, 82, 9, 57, 23, 92, 28 into an open hash table with slots 0,...,4. Which of the following options shows the third element of the longest list after the insertions?
  57
  "
303,303,56,0.21739999949932098,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",52,0.013399999588727951,"show, factor, prime, distribute, uniformly, distribution, improve, increase, reduce, advice",18,0.013299999758601189,"looping, letf, invent, queue, default, dump, bsta, legal, mergesort, worst_case","['invariant', 'insertion', 'sort', 'always', 'sort']","What is the loop invariant of insertion sort?
  The subarray A[0 to i-1] is always sorted
  "
304,304,14,0.38670000433921814,"tree, binary, order, node, leave, right, follow, avl, search, traversal",24,0.04859999939799309,"hash, element, table, bucket, use, function, close, key, store, insert",43,0.03139999881386757,"space, nlogn, worst, double, do, enough, arraylist, namortise, collection, efficiency","['suppose', 'binary', 'search', 'tree', 'contain', 'collection', 'surname', 'type', 'tree', 'traversal', 'would', 'print', 'name', 'alphabetically', 'order']","Suppose a Binary Search Tree contains a collection of surnames. Which type of tree traversal would you use to print these names alphabetically?
 In-order
   "
305,305,39,0.3314000070095062,"node, sub, process, next, link, current, element, list, object, pointer",15,0.03680000081658363,"sequence, know, inorder, postorder, piece, thread, simultaneously, pointerthe, unordered, epre",24,0.03180000185966492,"hash, element, table, bucket, use, function, close, key, store, insert","['define', 'singly', 'link', 'list', 'store', 'reference', 'object', 'element', 'sequence', 'pointer', 'next', 'node']","Define Singly Linked List.
     Each node stores a reference to the object that is the element of the sequence and a pointer to the next node only.
"
306,306,14,0.34599998593330383,"tree, binary, order, node, leave, right, follow, avl, search, traversal",53,0.020400000736117363,"mean, new, mistake, county, send, teach, late, limited, incorrectly, incredibly",39,0.011099999770522118,"node, sub, process, next, link, current, element, list, object, pointer","['mean', 'binary', 'tree', 'identical', 'binary', 'tree', 'structurally', 'identical', 'value', 'node']","What is mean by binary trees are identical?
 When the binary trees are structurally identical and have same value in the nodes.
   "
307,307,56,0.09380000084638596,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",29,0.053199999034404755,"find, number, step, item, average, many, index, table, insert, hash",21,0.05299999937415123,"choose, requirement, rule, carey, understand, meet, simple, possible, mind, define","['choose', 'correct', 'step', 'insertion', 'sort', 'array']","Choose the correct steps of insertion sorting on the array below: 7 6 2 5 1
6 7 2 5 12 6 7 5 12 5 6 7 11 2 5 6 7
    "
308,308,56,0.09380000084638596,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",29,0.053199999034404755,"find, number, step, item, average, many, index, table, insert, hash",21,0.05299999937415123,"choose, requirement, rule, carey, understand, meet, simple, possible, mind, define","['choose', 'correct', 'step', 'insertion', 'sort', 'array']","Choose the correct steps of insertion sorting on the array below: 7 6 2 5 1
6 7 2 5 12 6 7 5 12 5 6 7 11 2 5 6 7
    "
309,309,14,0.09300000220537186,"tree, binary, order, node, leave, right, follow, avl, search, traversal",6,0.025299999862909317,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly",17,0.01730000041425228,"lane, skip, skiplist, combined, sum, organise, difference, many, exactly, assign","['tree', 'see']","What is the in-order traversal of the tree seen below? 8 / \ 6 9 / \ \ 2 7 15 /1
  1, 2, 6, 7, 8, 15, 9
  "
310,310,16,0.15209999680519104,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.01489999983459711,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",14,0.014700000174343586,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['follow', 'statement', 'correct']","f(n) = 2, g(n) = 56 log(n), h(n) = 17n log(n)Which of the following statements is correct?
 g is O(f), g is O(h), f is (h)
   "
311,311,35,0.29100000858306885,"number, people, real, create, would, say, quickly, company, change, friend",24,0.13220000267028809,"hash, element, table, bucket, use, function, close, key, store, insert",52,0.08659999817609787,"show, factor, prime, distribute, uniformly, distribution, improve, increase, reduce, advice","['create', 'create', 'prime', 'number', 'bucketsie', 'create', 'hashtable', 'prime', 'number', 'bucket', 'for', 'example', 'bucket', 'rather', 'ensure', 'few', 'collision', 'even', 'distribution', 'value']","When creating a new hashtable, why should we create it such that it has a prime number of buckets?I.e. we should only create hashtables w/ a prime number of buckets, for example 2021 buckets rather than 2000.
 Ensures fewer collisions and more even distribution of values
   "
312,312,14,0.09839999675750732,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.02019999921321869,"for, follow, time, complexity, true, give, statement, function, correct, run",24,0.017500000074505806,"hash, element, table, bucket, use, function, close, key, store, insert","['if', 'value']","If N = 91, and k 1 mod 72, then mod N.What is the value of ?
  x = 14
  "
313,313,14,0.22269999980926514,"tree, binary, order, node, leave, right, follow, avl, search, traversal",56,0.013899999670684338,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",24,0.01360000018030405,"hash, element, table, bucket, use, function, close, key, store, insert","['binary', 'tree', 'would', 'preorder', 'traversal']","Here is a binary tree: 10 / \ 5 15 / / \2 11 20 / 18What would the preorder traversal be?
  10, 5, 2, 15, 11, 20, 18
  "
314,314,30,0.14309999346733093,"operation, middle, link, array, perform, advantage, make, item, front, either",56,0.11829999834299088,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",49,0.04830000177025795,"int, result, return, term, many, num, body, function, heap, count","['take', 'input', 'iteration', 'sort', 'underlie', 'operation', 'shellsort', 'result', 'array']","Take the input array: [49, 42, 67, 85, 23, 56, 34, 15]. After one iteration of h-sorting (the underlying operation in Shellsort) with h = 4, what is the resulting array?
 [23, 42, 34, 15, 49, 56, 67, 85]
   "
315,315,24,0.38940000534057617,"hash, element, table, bucket, use, function, close, key, store, insert",14,0.0632999986410141,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.04910000041127205,"for, follow, time, complexity, true, give, statement, function, correct, run","['let', 'standard', 'closed', 'hash', 'table', 'linear_probing', 'leave', 'right', 'slot', 'consider', 'hash', 'function', 'insert', 'element', 'order', 'hash', 'table', 'end', 'none']","Let there be a standard, closed hash table with linear probing from left to right, with slots from 0 to 10. Consider a hash function h(x) = x % 11. Inserting elements in order: 19, 30, 41, 1110, 9, 17, 108, 555, 125, 234, 5. What does the hash table look like at the end?
     None of the above
"
316,316,24,0.47040000557899475,"hash, element, table, bucket, use, function, close, key, store, insert",52,0.03530000150203705,"show, factor, prime, distribute, uniformly, distribution, improve, increase, reduce, advice",0,0.0,,"['closed', 'hash', 'table', 'length', 'use', 'hash', 'function', 'linear_probe', 'insert', 'value', 'empty', 'hash', 'table', 'table', 'show', 'order', 'value', 'insert']","An closed hash table of length 10 is used with hash function h(k)=k%10, and linear probing. After inserting 6 values into an empty hash table, the table is as shown below.012 423 234 345 526 467 3389In what order where the values inserted?
  46, 34, 42, 23, 52, 33
  "
317,317,8,0.13189999759197235,"apart, dictating, natural, areedge, whereis, matrix, looping, happen, letf, arcs",25,0.11630000174045563,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional",29,0.11420000344514847,"find, number, step, item, average, many, index, table, insert, hash","['represent', 'graph', 'follow', 'matrix', 'represent', 'vertex', 'areedge', 'apart', 'whereis', 'natural', 'number']","Supposeis the adjacency matrix representing a graph. Which of the following is the matrix representing vertices that areedges apart, whereis a natural number?
 
   "
318,318,16,0.23010000586509705,"for, follow, time, complexity, true, give, statement, function, correct, run",6,0.08869999647140503,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly",56,0.08579999953508377,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['good', 'case', 'time', 'complexity', 'for', 'follow', 'void', 'sort', 'int', 'array', 'for', 'minindex', 'for', 'arraylength', 'if']","What is the best case time complexity for the following code snippet:public static void sort(int[]array) { for(int i = 0; i<array.length-1; i++) { int min = array[I]; int minIndex = I; for(int j = i+1; j<array.length;j++) { if(array[j]<min) { min = array[j]; minIndex = j; } } int temp = array[minIndex]; array[minIndex] = array[I]; array[i] = temp; }}
O(n2)
    "
319,319,14,0.3831999897956848,"tree, binary, order, node, leave, right, follow, avl, search, traversal",56,0.04050000011920929,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.037700001150369644,"for, follow, time, complexity, true, give, statement, function, correct, run","['diagram', 'tree', 'econsidere', 'list', 'value', 'describe', 'post', 'order', 'search', 'traversal', 'do', 'show', 'output', 'would', 'for', 'search', 'traversal', 'method']","Below this paragraph is a diagram of tree; A / \ B C / \D EConsidering with the list of values, describe how 'Post-order' search / traversal is done by showing what the output would be for this search / traversal method:
  D, E, B, C, A
  "
320,320,29,0.18729999661445618,"find, number, step, item, average, many, index, table, insert, hash",24,0.14219999313354492,"hash, element, table, bucket, use, function, close, key, store, insert",39,0.08049999922513962,"node, sub, process, next, link, current, element, list, object, pointer","['regard', 'hash', 'table', 'false', 'open', 'hash', 'tableshandle', 'collision', 'insert', 'object', 'next', 'sequentially', 'available', 'index']","Regarding Hash Tables, which of the followingstatements is false?
  Open Hash Tableshandle collisions by inserting objects to the next sequentially available index.
  "
321,321,56,0.3061000108718872,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.0625,"for, follow, time, complexity, true, give, statement, function, correct, run",55,0.01209999993443489,"datum, search, structure, remove, data, list, store, want, add, use","['good', 'time', 'complexity', 'for', 'sort', 'sorted', 'list', 'use', 'selection', 'sort']","What is the best time complexity for sorting a sorted list using selection sort?
  O(n2)
  "
322,322,42,0.06430000066757202,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",49,0.06270000338554382,"int, result, return, term, many, num, body, function, heap, count",56,0.04340000078082085,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['let', 'equivalent', 'lecture']","Let p = 5. What is 29equivalent to mod p? Hint: see lecture 11b 2019

    "
323,323,56,0.17669999599456787,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",3,0.055399999022483826,"case, fastest, ofbubble, itsb, distinct, description, fit, stableb, performance, nearly",16,0.01759999990463257,"for, follow, time, complexity, true, give, statement, function, correct, run","['average', 'case', 'time', 'complexity', 'insertion']","What is the average case time complexity of insertion sort?
 
   "
324,324,56,0.2554999887943268,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.013199999928474426,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.012799999676644802,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['follow', 'sort', 'algorithm', 'stable', 'merge', 'sort']","Which of the following sorting algorithms is stable?
Merge sort
    "
325,325,24,0.33480000495910645,"hash, element, table, bucket, use, function, close, key, store, insert",29,0.125900000333786,"find, number, step, item, average, many, index, table, insert, hash",16,0.051100000739097595,"for, follow, time, complexity, true, give, statement, function, correct, run","['company', 'want', 'store', 'value', 'close', 'hash', 'table', 'use', 'linear_probe', 'find', 'valuesto', 'fast', 'enough', 'require', 'value', 'find', 'step', 'linear_probe', 'averagewhat', 'minimum', 'number', 'bucket', 'use', 'for', 'closed', 'hash', 'table', 'for', 'condition', 'meet', 'bucket']","A company wants to store 10,000 values in a closed hash table using linear probing to find values.To be fast enough, they require values to be found in no more than three steps of linear probing on average.What is the minimum number of buckets that should be used for the closed hash table for this condition to be met?
 12,500 buckets
   "
326,326,14,0.48840001225471497,"tree, binary, order, node, leave, right, follow, avl, search, traversal",2,0.03359999880194664,"require, comparison, estimate, nee, minimum, identify, aka, clockwise, complexityo, outside",15,0.028200000524520874,"sequence, know, inorder, postorder, piece, thread, simultaneously, pointerthe, unordered, epre","['consider', 'follow', 'avl', 'tree', 'insert', 'value', 'sequence', 'rotation', 'would', 'require', 'rebalance', 'tree', 'subtree', 'rotation', 'apply', 'leave', 'unspecified', 'left', 'rotation', 'right', 'rotation']","Consider the following AVL tree:After inserting the value 7, what sequence of rotations would be required to rebalance the tree?(The subtrees at which rotations are applied are left unspecified)
  A left rotation, then a right rotation.
  "
327,327,52,0.10080000013113022,"show, factor, prime, distribute, uniformly, distribution, improve, increase, reduce, advice",49,0.060600001364946365,"int, result, return, term, many, num, body, function, heap, count",18,0.014499999582767487,"looping, letf, invent, queue, default, dump, bsta, legal, mergesort, worst_case","['let', 'prime', 'qif']","Let p and q be primes such that p*q = N and p != q.If (p-1)(q-1) = 36What is N?
  N = 57
  "
328,328,35,0.11860000342130661,"number, people, real, create, would, say, quickly, company, change, friend",52,0.06849999725818634,"show, factor, prime, distribute, uniformly, distribution, improve, increase, reduce, advice",39,0.05570000037550926,"node, sub, process, next, link, current, element, list, object, pointer","['show', 'friend', 'whowhich', 'node', 'friend']","This adjacency matrix shows who is friends with who.Which node has the most friends?
1
    "
329,329,6,0.09600000083446503,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly",29,0.05649999901652336,"find, number, step, item, average, many, index, table, insert, hash",55,0.05249999836087227,"datum, search, structure, remove, data, list, store, want, add, use","['measure', 'number', 'millisecond', 'since']","What doesSystem.currentTimeMillis() measure?
 The number of milliseconds since 1 Jan 1970.
   "
330,330,0,0.016699999570846558,"pass, point, start, book, page, short, similar, look, dijkstra, repeat",1,0.016699999570846558,"measurement, select, precision, option, accuracy, value, close, mathematical, technique, difference",2,0.016699999570846558,"require, comparison, estimate, nee, minimum, identify, aka, clockwise, complexityo, outside",[],"What is 413 mod 7?
   4
 "
331,331,35,0.4636000096797943,"number, people, real, create, would, say, quickly, company, change, friend",55,0.14489999413490295,"datum, search, structure, remove, data, list, store, want, add, use",25,0.06729999929666519,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional","['suppose', 'create', 'new', 'social', 'medium', 'platform', 'allow', 'people', 'create', 'single', 'account', 'for', 'add', 'people', 'friend', 'also', 'use', 'platform', 'list', 'friendsas', 'platform', 'still', 'fairly', 'new', 'number', 'people', 'use', 'platform', 'significantly', 'less', 'total', 'number', 'friend', 'assign', 'peopleyou', 'want', 'represent', 'graph', 'show', 'people', 'platform', 'vertex', 'graph', 'friend', 'person', 'edge', 'better', 'represent', 'graph', 'use', 'adjacency', 'list']","Suppose you are creating a new social media platform that allows people to create a single account for themself. Then they can add any people that they are friends with who are also using the platform to their list of friends.As the platform is still fairly new, the number of people using the platform is significantly less than the total number of friends assigned between people.You want to represent a graph showing all people on the platform (as vertices on the graph) and the friends each person has (as the edges on the graph).Is it better to represent this graph using an adjacency matrix or an adjacency list?
Adjacency Matrix
    "
332,332,56,0.3066999912261963,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.05640000104904175,"for, follow, time, complexity, true, give, statement, function, correct, run",44,0.03849999979138374,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na","['give', 'large', 'datum', 'set', 'sort', 'follow', 'sort', 'algorithm', 'would', 'best', 'base', 'average', 'time', 'complexity', 'quick', 'sort']","Given a large data set to sort, which of the following sorting algorithms would be the best to use based on its average time complexity?
  Quick Sort
  "
333,333,56,0.22100000083446503,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",51,0.18129999935626984,"efficient, company, come, condition, stock, sortb, sortc, much, around, deal",24,0.06710000336170197,"hash, element, table, bucket, use, function, close, key, store, insert","['place', 'follow', 'algorithm', 'order', 'least', 'efficient', 'deal', 'around', 'item', 'bubble', 'sortb', 'quick', 'sortc', 'bucket', 'average', 'case', 'complexity', 'cba']","Place the following algorithms in order of most to least efficient when dealing with around 10,000 items:A: Bubble sortB: Quick sortC: Bucket sortConsider the average case complexities.
 CBA
   "
334,334,56,0.09870000183582306,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",14,0.08560000360012054,"tree, binary, order, node, leave, right, follow, avl, search, traversal",29,0.05050000175833702,"find, number, step, item, average, many, index, table, insert, hash","['line', 'best', 'represent', 'time', 'complexity', 'binary', 'search']","Which of these lines best represents the time complexity of a binary search algorithm?
  Graph C
  "
335,335,16,0.2700999975204468,"for, follow, time, complexity, true, give, statement, function, correct, run",6,0.04899999871850014,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly",49,0.016200000420212746,"int, result, return, term, many, num, body, function, heap, count","['follow', 'code', 'for', 'for', 'for', 'for', 'for', 'int']","What is the time complexity of the following code:for (int i=1; i<n; i++) for (int j=1; j<2*n; j*2) for (int k=1; j<n+1; k++) System.out.println(""hello world"");for (int l=1; l<10; l++) for (int m=1; m<n; m++) System.out.println(""HELLO WORLD"");
    
"
336,336,0,0.1680999994277954,"pass, point, start, book, page, short, similar, look, dijkstra, repeat",16,0.15119999647140503,"for, follow, time, complexity, true, give, statement, function, correct, run",13,0.04619999974966049,"second, take, record, long, run, expect, likely, question, information, implementation","['give', 'lecture', 'line', 'nee', 'go', 'print', 'time', 'take', 'for', 'myclassm', 'run', 'end', 'start']","Here is some code given in lectures:What line will need to go at X to print the time taken for MyClass.m() to run?
 System.out.println(end-start);
   "
337,337,32,0.3490000069141388,"log, base, bottom, many, become, simplify, less, allow, level, multiple",55,0.07540000230073929,"datum, search, structure, remove, data, list, store, want, add, use",40,0.011599999852478504,"array, slow, problem, may, random, element, access, integer, anywhere, face","['semantic', 'application', 'integration', 'allow', 'multiple', 'application', 'access', 'multiple', 'datum', 'source', 'base', 'meaning', 'datum']","What is semantic application integration?
  Allows multiple applications to access multiple data sources based on the meaning of the data
  "
338,338,14,0.37529999017715454,"tree, binary, order, node, leave, right, follow, avl, search, traversal",44,0.05040000006556511,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na",16,0.01119999960064888,"for, follow, time, complexity, true, give, statement, function, correct, run","['give', 'follow', 'number', 'arrange', 'complete', 'balanced', 'binary', 'search', 'tree', 'follow', 'preordere', 'traversal', 'tree']","Given the following numbers 58, 4, 102, 13, 27, 99, 1, arrange them in a complete balanced binary search tree. Which of the following is the preordered traversal of the tree?
27,4,1,13,99,58,102
    "
339,339,16,0.1665000021457672,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.1298000067472458,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",40,0.1177000030875206,"array, slow, problem, may, random, element, access, integer, anywhere, face","['follow', 'statement', 'array', 'list', 'false', 'if', 'none', 'false', 'choose', 'option', 'insert', 'element', 'anywhere', 'non', 'full', 'array', 'list', 'without', 'resize', 'take', 'time', 'complexity', 'log']","Which of the following statements from a to d about array lists is FALSE? If none of them is false, choose option e.
 The worst case to insert an element anywhere in a non-full array list without resizing takes a time complexity of O(log n).
   "
340,340,56,0.13269999623298645,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.10450000315904617,"for, follow, time, complexity, true, give, statement, function, correct, run",13,0.013700000010430813,"second, take, record, long, run, expect, likely, question, information, implementation","['run', 'time', 'complexity', 'selection', 'sort']","What is the worst case run time complexity of selection sort?
   O(n^2)
 "
341,341,30,0.1889999955892563,"operation, middle, link, array, perform, advantage, make, item, front, either",56,0.16769999265670776,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",46,0.04039999842643738,"go, likely, stand, adventure, sven, configuration, must, boat, looping, amount","['real', 'world', 'application', 'would', 'link', 'list', 'array', 'list', 'go', 'insert', 'middle', 'list', 'list', 'large']","In a real world application when would you use a linked list over an array list?
  When every you are going to be inserting into the middle of the list and the list is large
  "
342,342,56,0.18170000612735748,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.10679999738931656,"for, follow, time, complexity, true, give, statement, function, correct, run",34,0.012299999594688416,"looping, letf, invent, queue, default, dump, bsta, legal, mergesort, worst_case","['follow', 'statement', 'true', 'stooge', 'sort', 'faster', 'merge']","Which of the following statement is not true?
 Stooge sort is faster than Merge sort
   "
343,343,14,0.21250000596046448,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.09120000153779984,"for, follow, time, complexity, true, give, statement, function, correct, run",15,0.07320000231266022,"sequence, know, inorder, postorder, piece, thread, simultaneously, pointerthe, unordered, epre","['consider', 'follow', 'binary', 'tree', 'follow', 'traversal', 'true', 'preorder', 'postorder', 'inorder']","Consider the following binary tree, which of the following traversal is true? 15 / \ 7 19 / \ / \ 6 8 16 21
   Preorder: 15,7,6,8,19,16,21.Postorder: 6,8,7,16,21,19,15.Inorder: 6,7,8, 15, 16,19,21.
 "
344,344,16,0.20280000567436218,"for, follow, time, complexity, true, give, statement, function, correct, run",49,0.11259999871253967,"int, result, return, term, many, num, body, function, heap, count",29,0.0738999992609024,"find, number, step, item, average, many, index, table, insert, hash","['find', 'bind', 'challenge', 'average', 'run', 'time', 'function', 'int', 'void', 'foo', 'for', 'for', 'for', 'count']","Find the Bound Challenge! (What is the average run time of the function below)int count = 0;void foo(){ for (int i = 0; i <n; i++) for(int j = 0; j < 100*n; j++) for(int k = 0; k < n*m; k++) count++}

    "
345,345,41,0.5863000154495239,"runtime, part, course, http, answerquestion, mainphpcmd, answer, conference, target, must",56,0.12250000238418579,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.02669999934732914,"for, follow, time, complexity, true, give, statement, function, correct, run","['vs', 'if', 'answer', 'part', 'question', 'first', 'part', 'http', 'course', 'mainphpcmd', 'answerquestion', 'would', 'part', 'http', 'course', 'mainphpcmd', 'answerquestion', 'would', 'part', 'http', 'course', 'mainphpcmd', 'answerquestion', 'would', 'receive', 'information', 'payment', 'client', 'must', 'attempt', 'kill', 'target', 'target', 'press', 'conference', 'recent', 'success', 'look', 'route', 'length', 'give', 'minute', 'use', 'djikstra', 'algorithm', 'minimum', 'time', 'take', 'home', 'conference']","Honda vs Lamborghini pt 4if you haven't answered part 1-3 of this question please do so first:part 1: https://peerwise.cs.auckland.ac.nz/course/main.php?cmd=answerQuestion&id=4250213part 2: https://peerwise.cs.auckland.ac.nz/course/main.php?cmd=answerQuestion&id=4250257part 3: https://peerwise.cs.auckland.ac.nz/course/main.php?cmd=answerQuestion&id=4250259Having received information and payment from a client about a new target the hitman must now attempt to kill his target. The target is having a press conference about their recent success. Looking at his route (lengths given in minutes) and using Djikstra's shortest path algorithm, what is the minimum time it will take him to get from his home at C to the conference at E?
  5
  "
346,346,56,0.16290000081062317,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.14910000562667847,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.1444000005722046,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['follow', 'sort', 'algorithm', 'good', 'case', 'time', 'complexity', 'for', 'element', 'time', 'complexity', 'tree', 'traversal', 'method', 'for', 'tree', 'node', 'insertion']","Which of the following sorting algorithms has its best case time complexity (for n elements), to be the same as the time complexity of tree traversal methods (for a tree of n nodes)?
   Insertion sort
 "
347,347,14,0.4189999997615814,"tree, binary, order, node, leave, right, follow, avl, search, traversal",1,0.03759999945759773,"measurement, select, precision, option, accuracy, value, close, mathematical, technique, difference",24,0.02630000002682209,"hash, element, table, bucket, use, function, close, key, store, insert","['suppose', 'follow', 'avl', 'tree', 'select', 'correct', 'order', 'follow', 'tree', 'traversal', 'way', 'display', 'pre', 'orderiii', 'post', 'order']","Suppose you have the following AVL tree:Select the correct order in which the following 3 tree traversal ways are displayed: i) A > B > D > E > C > F > Gii) D > B > E > A > F > C > Giii) D > E > B > F > G > C > A
  i) pre-orderii) in-orderiii) post-order
  "
348,348,35,0.4205000102519989,"number, people, real, create, would, say, quickly, company, change, friend",55,0.08179999887943268,"datum, search, structure, remove, data, list, store, want, add, use",56,0.0706000030040741,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['look', 'net', 'profit', 'next', 'year', 'hire', 'specialist', 'take', 'look', 'company', 'see', 'save', 'time', 'money', 'vehicle', 'make', 'equipped', 'digit', 'would', 'find', 'linear', 'search', 'unsorte', 'list', 'vehicle', 'id', 'shipping', 'vehicle', 'retailer', 'datum', 'structure', 'store', 'vehicle', 'id', 'order', 'reduce', 'time', 'processing', 'power', 'need', 'find', 'would', 'result', 'beat', 'slow', 'lamborghinis', 'hash', 'table']","Honda are looking to overtake Lamborghini in net profit next year. They hired a specialist to take a look at their company and see where they can save time and money. Each vehicle they make is equipped with a 10 digit ID. They found that they use a linear search algorithm to search through an unsorted list of vehicle IDs when shipping these vehicles to the retailers. What data structure should they use to store the vehicle IDs in order to reduce time and processing power needed to find each ID and as a result beat the slow lamborghinis?
     Hash Table
"
349,349,14,0.30379998683929443,"tree, binary, order, node, leave, right, follow, avl, search, traversal",24,0.013799999840557575,"hash, element, table, bucket, use, function, close, key, store, insert",30,0.013299999758601189,"operation, middle, link, array, perform, advantage, make, item, front, either","['avl', 'tree', 'make', 'contain', 'node', 'minimum', 'height', 'tree']","An AVL Tree is made containing 35 nodes. What is the minimum height of the tree
  6
  "
350,350,16,0.22589999437332153,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.20880000293254852,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",13,0.051600001752376556,"second, take, record, long, run, expect, likely, question, information, implementation","['run', 'time', 'for', 'sort', 'algorithm', 'for', 'list', 'size', 'time', 'take', 'second', 'follow', 'run', 'time', 'complexity', 'algorithm']","The run times for a sorting algorithm, for a list size and time taken in seconds , are as follows: = 420, = 69 = 840, = 1104 = 1680, = 17664What is the run time complexity of the algorithm?
  
  "
351,351,0,0.4943999946117401,"pass, point, start, book, page, short, similar, look, dijkstra, repeat",14,0.1559000015258789,"tree, binary, order, node, leave, right, follow, avl, search, traversal",35,0.04170000180602074,"number, people, real, create, would, say, quickly, company, change, friend","['work', 'bath', 'while', 'work', 'create', 'binary', 'tree', 'deliver', 'power', 'point', 'presentation', 'tree', 'projector', 'look', 'like', 'also', 'pass', 'round', 'handout', 'comment', 'text', 'explain', 'aspect', 'presentationbut', 'environmentally', 'friendly', 'decide', 'save', 'paper', 'print', 'tree', 'line', 'later', 'ask', 'tree', 'tree', 'get', 'output', 'reply', 'order']","Before working at the University of Bath, while working in Honda, Dr. Tom Finch created a binary tree about one of Honda's competitors.When delivering the Power Point presentation, the tree on the projector looked like this:He also passed round some handouts, with his comments and text explaining some of the aspects of the presentation.But to be more environmentally friendly, he decided to save some paper, and print the tree in one line:He was later asked:""Which tree traversal algorithm did you use on the binary tree to get this output?""What was his reply?
In-order
    "
352,352,14,0.29910001158714294,"tree, binary, order, node, leave, right, follow, avl, search, traversal",30,0.04670000076293945,"operation, middle, link, array, perform, advantage, make, item, front, either",55,0.012000000104308128,"datum, search, structure, remove, data, list, store, want, add, use","['search', 'tree', 'output', 'if', 'perform', 'level', 'order', 'traversal', 'tree']","Insert the arrayinto a Self-BalancingBinary Search Tree. What is the output if you perform a Level-Order Traversal on the tree?
 4,2,6,1,3,5,7,8
   "
353,353,56,0.2621999979019165,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",0,0.16349999606609344,"pass, point, start, book, page, short, similar, look, dijkstra, repeat",30,0.04230000078678131,"operation, middle, link, array, perform, advantage, make, item, front, either","['best', 'describe', 'happen', 'pass', 'ashell', 'sort', 'assume', 'compare', 'if', 'compare', 'if', 'small', 'if', 'perform', 'swap', 'reach', 'array', 'repeat', 'otherwise', 'do']","Which statement best describes what happens when you sort an array, arr, of length n during one pass of aShell (k-)Sort(assuming k<n)?
  1) Compare elements arr[0] and arr[k]2) Swap if arr[k] is smaller3) Compare arr[1] and arr[k+1]4) Swap if arr[k+1] is smaller and so on5) If we performed a swap before reaching the end of the array, repeat. Otherwise we're done.
  "
354,354,29,0.35670000314712524,"find, number, step, item, average, many, index, table, insert, hash",16,0.07569999992847443,"for, follow, time, complexity, true, give, statement, function, correct, run",13,0.03189999982714653,"second, take, record, long, run, expect, likely, question, information, implementation","['consider', 'closed', 'hash', 'table', 'linear_probing', 'load_factor', 'for', 'low', 'value', 'expect', 'number', 'step', 'find', 'item', 'exceed']","Consider a closed hash table with linear probing and load factor L. For what lowest value of L does the expected number of steps to find an item exceed 2?
     L 0.666...
"
355,355,56,0.32760000228881836,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",51,0.14350000023841858,"efficient, company, come, condition, stock, sortb, sortc, much, around, deal",55,0.010999999940395355,"datum, search, structure, remove, data, list, store, want, add, use","['follow', 'sort', 'stable', 'if', 'retain', 'order', 'equal', 'elementsie', 'if', 'come', 'unsorted', 'list', 'come', 'sorted', 'list', 'sort']","Which of the following sorting algorithms is NOT stable?An algorithm is stable if it retains the order of equal elements.Ie: if x = y and x comes before y in the unsorted list, then x will come before y in the sorted list.
 Quick Sort
   "
356,356,14,0.27079999446868896,"tree, binary, order, node, leave, right, follow, avl, search, traversal",39,0.13689999282360077,"node, sub, process, next, link, current, element, list, object, pointer",16,0.05260000005364418,"for, follow, time, complexity, true, give, statement, function, correct, run","['correct', 'order', 'operation', 'for', 'post', 'order', 'traversal', 'binary', 'tree', 'process', 'leave', 'process', 'right', 'process', 'current', 'node']","What is the correct order of operations for a post-order traversal of a binary tree?
  1) process left node, 2) process right node, 3) process current node
  "
357,357,14,0.12919999659061432,"tree, binary, order, node, leave, right, follow, avl, search, traversal",29,0.0828000009059906,"find, number, step, item, average, many, index, table, insert, hash",28,0.06310000270605087,"child, add, non, cause, leaf, full, slow, sift, treechild, nodeleaf","['maximum', 'number', 'child', 'node', 'leaf', 'node']","What is the maximum number of child nodes that a leaf node can have?
0
    "
358,358,16,0.16760000586509705,"for, follow, time, complexity, true, give, statement, function, correct, run",44,0.09009999781847,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na",41,0.05090000107884407,"runtime, part, course, http, answerquestion, mainphpcmd, answer, conference, target, must","['runtime', 'for', 'input', 'size', 'asymptotic', 'time', 'complexity']","An algorithm has a runtime, for input size n, of T(n)=10000n4+0.075n2+0.091n+102500.What is the asymptotic time complexity of this algorithm?
   ?(n4)
 "
359,359,42,0.31949999928474426,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",16,0.164000004529953,"for, follow, time, complexity, true, give, statement, function, correct, run",24,0.013899999670684338,"hash, element, table, bucket, use, function, close, key, store, insert","['time', 'complexity', 'use', 'definition', 'give', 'week', 'lecture', 'slide', 'fix', 'assume', 'low', 'possible', 'value', 'ofb', 'for', 'definition', 'hold']","An algorithmhas time complexity. Using the Definition of Big-Oh as given in the 2019 Week 1a Lecture (slide 14), fix B = 5.Assuming, what is the lowest possible value ofb for which the definition holds?
   
 "
360,360,35,0.5819000005722046,"number, people, real, create, would, say, quickly, company, change, friend",55,0.11860000342130661,"datum, search, structure, remove, data, list, store, want, add, use",16,0.02710000053048134,"for, follow, time, complexity, true, give, statement, function, correct, run","['phone', 'network', 'provider', 'wish', 'store', 'mobile', 'number', 'for', 'customer', 'large', 'amount', 'people', 'application', 'need', 'able', 'remove', 'new', 'mobile', 'number', 'quickly', 'for', 'customer', 'join', 'leave', 'provider', 'company', 'want', 'able', 'determine', 'quickly', 'whether', 'individual', 'specific', 'name', 'customer', 'able', 'retrieve', 'phone', 'number', 'datum', 'structure', 'would', 'appropriate', 'store', 'phone', 'number', 'memory']","A phone network provider wishes to store the mobile numbers for their customers (a large amount of people). The application needs to be able to add and remove new mobile numbers quickly, for when a customer joins or leaves the provider, and the company wants to be able to determine quickly whether an individual with a specific name is a customer, and be able to retrieve their phone number. Which data structure would be MOST appropriate to store the phone numbers in memory?
  Open hashtable
  "
361,361,12,0.5127999782562256,"cost, dealership, factory, location, deliver, car, associate, single, maximise, cheap",24,0.0560000017285347,"hash, element, table, bucket, use, function, close, key, store, insert",55,0.04089999943971634,"datum, search, structure, remove, data, list, store, want, add, use","['suppose', 'employee', 'sale', 'department', 'large', 'car', 'manufacture', 'company', 'task', 'reduce', 'cost', 'transport', 'new', 'car', 'dealership', 'factory', 'order', 'maximise', 'profitsbelow', 'graph', 'cost', 'associate', 'deliver', 'single', 'car', 'dealership', 'location', 'factory', 'location', 'use', 'djikstra', 'algorithm', 'calculate', 'cheap', 'cost', 'deliver', 'dealership', 'factory']","Suppose that you are an employee in the sales department at a large car manufacturing company, (i.e. Honda). Your boss has tasked you with reducing the cost of transporting new cars to dealerships from the factory, in order to maximise profits.Below is a graph with the costs associated with delivering a single car to dealerships from other locations, our factory is at location A. Using Djikstra's Algorithm, calculate the cheapest costs to deliver to each dealership from our factory at A.
   B = 7C = 9D = 20E = 20F = 11
 "
362,362,14,0.36970001459121704,"tree, binary, order, node, leave, right, follow, avl, search, traversal",40,0.0406000018119812,"array, slow, problem, may, random, element, access, integer, anywhere, face",55,0.03840000182390213,"datum, search, structure, remove, data, list, store, want, add, use","['provide', 'follow', 'number', 'if', 'perfectly', 'balance', 'binary', 'search', 'tree', 'construct', 'array', 'number', 'root', 'node']","An array is provided with the following numbers: {16, 87, 54, 98, 61, 33, 74}. If a perfectly balanced binary search tree is constructed from this array, which number will be in the root node?
 61
   "
363,363,56,0.3147999942302704,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",21,0.04830000177025795,"choose, requirement, rule, carey, understand, meet, simple, possible, mind, define",3,0.046799998730421066,"case, fastest, ofbubble, itsb, distinct, description, fit, stableb, performance, nearly","['for', 'list', 'fastest', 'try', 'sort', 'define', 'list', 'without', 'mind', 'memory', 'quick', 'sort', 'pivot', 'choose', 'end', 'list']","For the list: 9,1,2,3,10,4,5,6,8Which of the algorithm will be the fastest when trying to sort the above defined list without minding about the memory.
 Quick sort with pivot being chosen by the end of the list
   "
364,364,32,0.13920000195503235,"log, base, bottom, many, become, simplify, less, allow, level, multiple",16,0.09430000185966492,"for, follow, time, complexity, true, give, statement, function, correct, run",24,0.0142000000923872,"hash, element, table, bucket, use, function, close, key, store, insert","['function', 'low', 'growth', 'rate', 'log']","Which of these functions has the lowest growth rate?
  log(n)
  "
365,365,25,0.28859999775886536,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional",14,0.07419999688863754,"tree, binary, order, node, leave, right, follow, avl, search, traversal",20,0.012500000186264515,"call, system, avoid, determine, matrix, engine, bugle, pagerank, inthis, involve","['order', 'vertex', 'settle', 'apply', 'graph', 'determine', 'length', 'short', 'path', 'vertex']","In what order are the vertices 'settled' whenDijkstra’s Algorithm is applied to the below graph to determine the lengths of the shortest paths from A to all other vertices?
 A C F B D E
   "
366,366,25,0.13989999890327454,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional",16,0.054999999701976776,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.01590000092983246,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['execute', 'follow', 'graph', 'acfe']","After executing the Dijkstra's algorithm on the following graph what is the shortest path from A to E?
  ACFE
  "
367,367,14,0.22220000624656677,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.014100000262260437,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.01360000018030405,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['follow', 'bst', 'valid', 'avl', 'tree']","Which of the following BSTs is not a valid AVL Tree?
   D
 "
368,368,14,0.2599000036716461,"tree, binary, order, node, leave, right, follow, avl, search, traversal",52,0.0502999983727932,"show, factor, prime, distribute, uniformly, distribution, improve, increase, reduce, advice",24,0.0406000018119812,"hash, element, table, bucket, use, function, close, key, store, insert","['picture', 'show', 'balanced', 'avl', 'tree', 'balanced', 'avl', 'tree', 'look_like']","The picture below shows a balanced AVL Tree.If I were to insert 10 (or '0010') into the tree. What will the balanced AVL Tree look like after?
 
   "
369,369,56,0.17440000176429749,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",2,0.05290000140666962,"require, comparison, estimate, nee, minimum, identify, aka, clockwise, complexityo, outside",49,0.051600001752376556,"int, result, return, term, many, num, body, function, heap, count","['follow', 'sort', 'algorithm', 'comparison', 'sort', 'count']","Which one of the following sorting algorithms, is a non-comparison sorting algorithm?
Counting Sort
    "
370,370,39,0.0869000032544136,"node, sub, process, next, link, current, element, list, object, pointer",24,0.08290000259876251,"hash, element, table, bucket, use, function, close, key, store, insert",16,0.07150000333786011,"for, follow, time, complexity, true, give, statement, function, correct, run","['follow', 'hash', 'function', 'current', 'reccomendation']","Which one of the following hash functions is the current reccomendation?
  SHA-3
  "
371,371,56,0.21279999613761902,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",41,0.05220000073313713,"runtime, part, course, http, answerquestion, mainphpcmd, answer, conference, target, must",44,0.01360000018030405,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na","['follow', 'sort', 'algorithm', 'use', 'sort', 'part']","Which of the following sorting algorithms, uses h-sorting as part of its alogorithm?
   Shell Sort
 "
372,372,14,0.30880001187324524,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.07729999721050262,"for, follow, time, complexity, true, give, statement, function, correct, run",25,0.012199999764561653,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional","['time', 'complexity', 'tree', 'traversal', 'method', 'binary', 'treeie', 'pre', 'order', 'post', 'order']","What is the time complexity of Tree traversal Methods in a binary tree?i.e. Pre-Order, Post-Order etc
  (n)
  "
373,373,56,0.22380000352859497,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.013799999840557575,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.013399999588727951,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['follow', 'sort', 'algorithm', 'stable', 'sort']","Which one of the following sorting algorithms, is not a stable sorting algorithm?
Heap Sort
    "
374,374,32,0.328000009059906,"log, base, bottom, many, become, simplify, less, allow, level, multiple",24,0.0729999989271164,"hash, element, table, bucket, use, function, close, key, store, insert",56,0.01899999938905239,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['consider', 'question', 'cryptography', 'ensure', 'replace', 'public', 'key', 'alice', 'public', 'key', 'sign', 'certificate', 'authority']","Consider this question on cryptography: To ensure Eve doesn't replace Alice's public key with her own, what can Alice do?
   Have her public key signed by a Certificate Authority
 "
375,375,20,0.2199999988079071,"call, system, avoid, determine, matrix, engine, bugle, pagerank, inthis, involve",40,0.048700001090765,"array, slow, problem, may, random, element, access, integer, anywhere, face",44,0.048500001430511475,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na","['rsa', 'encryption', 'system', 'base', 'presumed', 'difficulty', 'offactore', 'large', 'integer']","What is the RSA encryption system based on?
  The presumed difficulty offactoring large integers
  "
376,376,56,0.15600000321865082,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.1387999951839447,"for, follow, time, complexity, true, give, statement, function, correct, run",40,0.1039000004529953,"array, slow, problem, may, random, element, access, integer, anywhere, face","['run', 'sort', 'shellsorting', 'follow', 'sort', 'sort', 'follow', 'array', 'give', 'follow', 'array']","Running a 7-sort (Shellsorting) followed by a 4-sort and then a 2-sort on the following array [10,5,7,11,15,3,4,9] will give which of the following arrays.
   [4,3,7,5,9,10,15,11]
 "
377,377,56,0.26750001311302185,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",55,0.050200000405311584,"datum, search, structure, remove, data, list, store, want, add, use",14,0.012400000356137753,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['quick', 'sort', 'ascend', 'complexity', 'datum', 'enter', 'descend', 'order']","When is quick sort (ascending) not of O(nlogn) complexity?
   When the data is entered in descending order
 "
378,378,29,0.45399999618530273,"find, number, step, item, average, many, index, table, insert, hash",24,0.18780000507831573,"hash, element, table, bucket, use, function, close, key, store, insert",42,0.020500000566244125,"big, definition, bind, set, notation, omega, final, lecture, theta, exact","['use', 'formula', 'taught', 'lecture', 'average', 'number', 'step', 'take', 'find', 'element', 'close', 'hash', 'table', 'use', 'linear_probe', 'many', 'step', 'take', 'find', 'if', 'hash', 'algorithmhash', 'table', 'hashing', 'hash', 'table', 'total', 'bucket', 'average', 'number', 'step', 'number', 'step', 'find']","Using the formula we were taught in lectures, what is the average number of steps it will take to find an element in this closed hash table using linear probing? And, how many steps will it take to find '4' if we use this hashing algorithm?Hash Table:[ , , , ,12,1,4,7]Hashing Algorithm:(x2-4) % 8(Hint: Hash table has 8 total buckets)
   Average number of steps: 1.5Number of steps to find '4': 3
 "
379,379,56,0.22259999811649323,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.013799999840557575,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.013399999588727951,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['follow', 'sort', 'algorithm', 'unstable', 'shell']","Which of the following sorting algorithms is unstable?
     Shell Sort
"
380,380,24,0.14069999754428864,"hash, element, table, bucket, use, function, close, key, store, insert",55,0.08330000191926956,"datum, search, structure, remove, data, list, store, want, add, use",40,0.07810000330209732,"array, slow, problem, may, random, element, access, integer, anywhere, face","['follow', 'reason', 'different', 'datum', 'structure', 'algorithm', 'may', 'use', 'for', 'different', 'problem']","Which of the following are reasons why different data structures or algorithms might be used for different problems?
     All of the above
"
381,381,16,0.11460000276565552,"for, follow, time, complexity, true, give, statement, function, correct, run",32,0.05790000036358833,"log, base, bottom, many, become, simplify, less, allow, level, multiple",49,0.04450000077486038,"int, result, return, term, many, num, body, function, heap, count","['follow', 'for', 'int', 'log']","what is O(n) of the following function,for(int i = 0; i <= n; i++){ for(int j = 0; j <= n; j++){ j++; }}
 n*log2(n^2)
   "
382,382,14,0.2160000056028366,"tree, binary, order, node, leave, right, follow, avl, search, traversal",39,0.13249999284744263,"node, sub, process, next, link, current, element, list, object, pointer",16,0.12110000103712082,"for, follow, time, complexity, true, give, statement, function, correct, run","['follow', 'statement', 'avl', 'tree', 'true', 'for', 'node', 'node', 'right', 'sub', 'treemust', 'strictly', 'great', 'node', 'value']","Which of the following statements about AVL trees is NOT true?
  For any node, all nodes in its right sub-treemust be strictly greater than the node’s value.
  "
383,383,56,0.14259999990463257,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",29,0.09080000221729279,"find, number, step, item, average, many, index, table, insert, hash",44,0.014499999582767487,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na","['use', 'represent', 'average', 'complexity', 'algorithm']","Which one is used to represent the average complexity of an algorithm?
?(…)
    "
384,384,6,0.41449999809265137,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly",16,0.17820000648498535,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.04839999973773956,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['accord', 'follow', 'source', 'code', 'file', 'statement', 'code', 'theformula', 'for', 'elementary', 'for', 'big', 'complexity', 'class', 'code', 'measure', 'runtime', 'code', 'time', 'average', 'running', 'time', 'get', 'fairly', 'precise', 'runtime', 'change', 'type', 'input', 'output', 'stringbuffer', 'resultappend', 'reduce', 'runtime', 'follow', 'statement', 'true']","According to thethe following source code file StringRepeater.java:There are four statements about this code:(1). Theformula for the elementary operationsin this code is T(n)= 4+4n.(2). For big n, the complexity class of this code is O(n^2).(3).To measure the runtime of this code, we can test this code in 500 times or more, and average the running time to get a fairly precise runtime.(4).Changing the type of the input and output as StringBuffer, and change the loop code ""result.append(s)"" can reduce the runtime of the code.Which of the following statements are true?
   (2)(3)(4)
 "
385,385,15,0.16580000519752502,"sequence, know, inorder, postorder, piece, thread, simultaneously, pointerthe, unordered, epre",6,0.05620000138878822,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly",16,0.05090000107884407,"for, follow, time, complexity, true, give, statement, function, correct, run","['piece', 'code', 'run', 'simultaneously', 'know', 'thread']","Two or more pieces of code running simultaneously are known as what?
   Threads
 "
386,386,24,0.3725000023841858,"hash, element, table, bucket, use, function, close, key, store, insert",56,0.12999999523162842,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",54,0.03280000016093254,"like, could, treelook, book, alphabetical, alphabetically, back, system, wherever, home","['suppose', 'follow', 'hash', 'table', 'implement', 'use', 'linear_probing', 'hash', 'function', 'use', 'function', 'element', 'enter', 'follow', 'order', 'element', 'could', 'add', 'table', 'iv']","Suppose you have the following hash table, implemented using linear probing, and that the hash function we are using is the function, h(x) = x mod 9.0 1 2 3 4 5 6 7 8 [hash ids]9 18 12 3 14 4 21 [elements entered]Which of the following are orders in which the elements could have been added to the table:(i) 9, 14, 4, 18, 12, 3, 21(ii) 12, 3, 14, 18, 4, 9, 21(iii) 12, 14, 3, 9, 4, 18, 21(iv) 9, 12, 14, 3, 4, 21, 18(v) 12, 9, 18, 3, 14, 21, 4 ?
 (iii) and (iv)
   "
387,387,13,0.19259999692440033,"second, take, record, long, run, expect, likely, question, information, implementation",56,0.1527000069618225,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",40,0.12770000100135803,"array, slow, problem, may, random, element, access, integer, anywhere, face","['implementation', 'selection', 'take', 'second', 'sort', 'random', 'integer', 'long', 'algorithm', 'likely', 'take', 'sort', 'random', 'integer', 'second']","An implementation of the selection sort algorithm takes 2 seconds to sort 10^5 random Integers. How long will the same algorithm likely take to sort 10^6 random integers?
   200 seconds
 "
388,388,56,0.2045000046491623,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",32,0.05119999870657921,"log, base, bottom, many, become, simplify, less, allow, level, multiple",51,0.049800001084804535,"efficient, company, come, condition, stock, sortb, sortc, much, around, deal","['follow', 'efficient', 'unstable', 'sort', 'algorithm', 'base', 'time']","Which of the following is the most efficient unstable sorting algorithm based on time complexity?
  Heap sort
  "
389,389,56,0.2046000063419342,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",32,0.05119999870657921,"log, base, bottom, many, become, simplify, less, allow, level, multiple",51,0.049800001084804535,"efficient, company, come, condition, stock, sortb, sortc, much, around, deal","['follow', 'efficient', 'unstable', 'sort', 'algorithm', 'base', 'time']","Which of the following is the most efficient unstable sorting algorithm based on time complexity?
  Heap sort
  "
390,390,21,0.1923000067472458,"choose, requirement, rule, carey, understand, meet, simple, possible, mind, define",56,0.11969999969005585,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",40,0.04670000076293945,"array, slow, problem, may, random, element, access, integer, anywhere, face","['carey', 'rule', 'sort', 'choose', 'sort', 'algorithm', 'understand', 'requirement', 'problem']","Which one of these is one of Carey's rules of sorting
 Don't choose a sorting algorithm until you understand the requirements of the problem.
   "
391,391,24,0.1835000067949295,"hash, element, table, bucket, use, function, close, key, store, insert",29,0.08799999952316284,"find, number, step, item, average, many, index, table, insert, hash",2,0.053700000047683716,"require, comparison, estimate, nee, minimum, identify, aka, clockwise, complexityo, outside","['calculate', 'for', 'hash', 'table', 'load', 'maxno', 'bucket', 'require', 'total', 'bucket', 'array']","How do you calculate the load factor for a Hash Table
 Load = max.no of buckets required / total buckets in array
   "
392,392,14,0.2791999876499176,"tree, binary, order, node, leave, right, follow, avl, search, traversal",39,0.1468999981880188,"node, sub, process, next, link, current, element, list, object, pointer",16,0.010200000368058681,"for, follow, time, complexity, true, give, statement, function, correct, run","['follow', 'order', 'binary', 'tree', 'traversal', 'process', 'node', 'leave', 'subtreeprocess', 'current', 'nodeprocess', 'node', 'subtree']","Which of the following is in-order binary tree traversal?
 Process nodes in left subtree.Process current node.Process nodes in right subtree.
   "
393,393,42,0.13819999992847443,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",16,0.0925000011920929,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.015200000256299973,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['follow', 'property', 'upper', 'bind', 'if']","Which of the following is not a property of the Upper Bound O(n)?
   If f1(n) = O(g(n)) and f2(n) = O(g(n)), then f1(n)f2(n)=O(g(n))
 "
394,394,56,0.3276999890804291,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",14,0.016100000590085983,"tree, binary, order, node, leave, right, follow, avl, search, traversal",29,0.013000000268220901,"find, number, step, item, average, many, index, table, insert, hash","['stable', 'sort', 'sort', 'keep', 'equal', 'value', 'item', 'order', 'sort']","What is a stable sorting algorithm?
  A sorting algorithm that keeps equal valued items in the same order as before sorting.
  "
395,395,42,0.22450000047683716,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",2,0.20409999787807465,"require, comparison, estimate, nee, minimum, identify, aka, clockwise, complexityo, outside",16,0.08569999784231186,"for, follow, time, complexity, true, give, statement, function, correct, run","['big', 'theta', 'big', 'omega', 'mean', 'use', 'for', 'estimate', 'complexity', 'run', 'time', 'instruction', 'require', 'estimate', 'identify', 'upper', 'bind', 'aka', 'wherever', 'possible', 'complexityo', 'estimate', 'identify', 'lower', 'bind', 'aka', 'good', 'case']","When are O(Big-Oh), ?(Big-Theta), and O(Big-Omega), meant to be used for estimating complexity/run times/instructions required?
O - To over-estimate and identify the upper-bound, aka Worst case.? - Wherever possible, as it states the exact complexity.O - To under-estimate and identify the lower-bound, aka Best case.
    "
396,396,16,0.11649999767541885,"for, follow, time, complexity, true, give, statement, function, correct, run",29,0.0575999990105629,"find, number, step, item, average, many, index, table, insert, hash",55,0.05609999969601631,"datum, search, structure, remove, data, list, store, want, add, use","['for', 'array', 'if', 'datum', 'for', 'non', 'parent']","For a heap in an array if the data for a non-root node is in array[i], where is its parent?
 array[(i-1)/2]
   "
397,397,29,0.3603000044822693,"find, number, step, item, average, many, index, table, insert, hash",16,0.09839999675750732,"for, follow, time, complexity, true, give, statement, function, correct, run",24,0.012199999764561653,"hash, element, table, bucket, use, function, close, key, store, insert","['follow', 'true', 'for', 'open', 'hash', 'table', 'increase', 'affect', 'average', 'number', 'step', 'need', 'insert', 'find', 'item']","Which of the following is NOT true for an open hash table:
 Increasing the load factor does not affect the average number of steps needed to insert/find an item.
   "
398,398,42,0.24690000712871552,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",16,0.07559999823570251,"for, follow, time, complexity, true, give, statement, function, correct, run",23,0.011699999682605267,"looping, letf, invent, queue, default, dump, bsta, legal, mergesort, worst_case","['definition', 'lower', 'bind', 'big', 'omega', 'iff', 'constant', 'for']","Which of these is the definition of the lower bound?
 g(n) = O(f(n)) (""g(n) is Big- Omega of f(n)"") iff there are constants c>0 and n0>0 so that for all n>n0 : g(n) = c f(n)
   "
399,399,16,0.18979999423027039,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.014100000262260437,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",14,0.013899999670684338,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['follow', 'statement', 'true', 'none']","Which are the following statements are true?
     None of the above
"
400,400,29,0.2513999938964844,"find, number, step, item, average, many, index, table, insert, hash",24,0.22750000655651093,"hash, element, table, bucket, use, function, close, key, store, insert",0,0.0,,"['closed', 'hash', 'table', 'slot', 'number', 'element', 'store', 'hash', 'table', 'currently', 'average', 'number', 'step', 'need', 'find', 'element']","There is a closed hash table with 120 slots, the number of elements stored in this hash table currently is 90.What is the average number of steps needed to find an element?
 2.5
   "
401,401,14,0.23919999599456787,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.11980000138282776,"for, follow, time, complexity, true, give, statement, function, correct, run",25,0.015699999406933784,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional","['complexity', 'for', 'intree', 'method', 'for', 'binary', 'avl', 'tree', 'height', 'layer']","What is the worstcase complexity for the ""inTree"" method for a binary AVL tree with height of m layers?
m
    "
402,402,56,0.22139999270439148,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",49,0.05380000174045563,"int, result, return, term, many, num, body, function, heap, count",29,0.04740000143647194,"find, number, step, item, average, many, index, table, insert, hash","['sort', 'would', 'result', 'follow', 'step', 'while', 'sort', 'insertion', 'sort']","Which sorting algorithm would result in the following steps while sorting [2,9,7,4] ?[2,9,7,4] ?[2,9,7,4][2,9,7,4] ?[2,9,4,7][2,9,4,7] ?[2,4,7,9]
 Insertion Sort
   "
403,403,14,0.1525000035762787,"tree, binary, order, node, leave, right, follow, avl, search, traversal",52,0.014399999752640724,"show, factor, prime, distribute, uniformly, distribution, improve, increase, reduce, advice",22,0.014399999752640724,"looping, letf, invent, queue, default, dump, bsta, legal, mergesort, worst_case","['valid', 'avl', 'tree']","Which of these IS a valid AVL Tree?
   10 / \ 7 14 / \ \ 5 9 18
 "
404,404,56,0.1762000024318695,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",55,0.11429999768733978,"datum, search, structure, remove, data, list, store, want, add, use",16,0.06750000268220901,"for, follow, time, complexity, true, give, statement, function, correct, run","['follow', 'statement', 'data', 'structure', 'false', 'always', 'faster', 'find', 'element', 'skip', 'list', 'link', 'list']","Which of the following statements about linear data structures is FALSE?
 It is always faster to find an element in a skip list that a linked list.
   "
405,405,25,0.10649999976158142,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional",16,0.060600001364946365,"for, follow, time, complexity, true, give, statement, function, correct, run",35,0.014399999752640724,"number, people, real, create, would, say, quickly, company, change, friend","['for', 'direct', 'graph']","What is the adjacency matrix for this directed graph?

    "
406,406,56,0.33230000734329224,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",24,0.04470000043511391,"hash, element, table, bucket, use, function, close, key, store, insert",13,0.04259999841451645,"second, take, record, long, run, expect, likely, question, information, implementation","['stable', 'sort', 'algorithm', 'stable', 'sort', 'algorithm', 'maintain', 'relative', 'order', 'record', 'equal', 'key']","What is the definition of a stable sorting algorithm?
  Stable sorting algorithms maintain the relative order of records with equal keys.
  "
407,407,56,0.18479999899864197,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.17149999737739563,"for, follow, time, complexity, true, give, statement, function, correct, run",55,0.08479999750852585,"datum, search, structure, remove, data, list, store, want, add, use","['give', 'selection', 'sort', 'time', 'complexity', 'for', 'unsorte', 'set', 'data', 'time', 'complexity', 'selection', 'sort', 'for', 'sorted', 'set', 'datum']","Given that selection sort has a time complexity of O(n^2) for an unsorted set of data, what is the time complexity of selection sort for a sorted set of data?
O(n^2)
    "
408,408,56,0.18000000715255737,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",38,0.1387999951839447,"small, motorway, occur, strategy, city, major, divisible, scenario, repeatedly, shelf",21,0.045499999076128006,"choose, requirement, rule, carey, understand, meet, simple, possible, mind, define","['complexity', 'quick', 'sort', 'scenario', 'occur', 'pivot', 'repeatedly', 'choose', 'small', 'element', 'list']","What is the worst case complexity of quick sort and in what scenario will this occur?
 O(n^2) the pivot is repeatedly chosen as the smallest element of the list.
   "
409,409,56,0.1281999945640564,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",3,0.060600001364946365,"case, fastest, ofbubble, itsb, distinct, description, fit, stableb, performance, nearly",32,0.05829999968409538,"log, base, bottom, many, become, simplify, less, allow, level, multiple","['quicksort', 'good', 'case', 'performance', 'log']","What is Quicksort's best case performance?
  O(n log n)
  "
410,410,14,0.17219999432563782,"tree, binary, order, node, leave, right, follow, avl, search, traversal",24,0.054999999701976776,"hash, element, table, bucket, use, function, close, key, store, insert",16,0.053199999034404755,"for, follow, time, complexity, true, give, statement, function, correct, run","['order', 'for', 'traversal', 'binary', 'tree', 'element']","What is the order for traversal of a binary tree with n elements?
 
   "
411,411,16,0.11599999666213989,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.07100000232458115,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",3,0.053599998354911804,"case, fastest, ofbubble, itsb, distinct, description, fit, stableb, performance, nearly","['case', 'run', 'time', 'complexity', 'merge', 'nlogn']","What is the wprst case run time complexity of merge sort?
nlogn
    "
412,412,16,0.15230000019073486,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.01489999983459711,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",14,0.014600000344216824,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['follow', 'statement', 'true']","Which of the following statements are true?:
   A and B
 "
413,413,55,0.3546999990940094,"datum, search, structure, remove, data, list, store, want, add, use",24,0.04670000076293945,"hash, element, table, bucket, use, function, close, key, store, insert",56,0.03060000017285347,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['type', 'search', 'sequential', 'search', 'check', 'element', 'list', 'match', 'find', 'whole', 'list', 'search', 'describe', 'search']","""In this type of search, a sequential search checks each element of a list, one by one, until a match is found or the whole list has been searched""Describes which searching algorithm?
   Linear Search
 "
414,414,16,0.17599999904632568,"for, follow, time, complexity, true, give, statement, function, correct, run",42,0.08460000157356262,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",14,0.014499999582767487,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['give', 'final', 'value', 'algorithmint', 'for', 'for']","Given n = 4, what is the final value of k in the below algorithm.int k = 0;for (int i=0; i<n; i++){ for (int j=n; j>0; j=j/2){ k++; }}
k = 12
    "
415,415,24,0.17919999361038208,"hash, element, table, bucket, use, function, close, key, store, insert",14,0.12200000137090683,"tree, binary, order, node, leave, right, follow, avl, search, traversal",56,0.11410000175237656,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['would', 'appropriate', 'hashing', 'algorithm', 'for', 'follow', 'list', 'name', 'numerical', 'value', 'first', 'letter', 'name', 'store', 'correspond', 'position', 'hash', 'table']","Which of these would be an appropriate hashing algorithm for the following list of names:Harry, Morgana, Ron, Gandalf, Derren, Alastair, Merlin, Hermione, Mordred
  Use the numerical value in the alphabet of the first letter of each name, and store it in the corresponding position in the hash table.
  "
416,416,16,0.305400013923645,"for, follow, time, complexity, true, give, statement, function, correct, run",20,0.04560000076889992,"call, system, avoid, determine, matrix, engine, bugle, pagerank, inthis, involve",42,0.04500000178813934,"big, definition, bind, set, notation, omega, final, lecture, theta, exact","['give', 'final', 'value', 'algorithm', 'run', 'time', 'complexity', 'call', 'oint', 'for', 'for']","Given n = 5, what will be the final value of k in the algorithm below & what is it's run time complexity, which we'll call O?int k = 0;for (int i=0; i<n; i++){ for (int j=i; j<n; j++){ k = k++; }}
  k = 15, O = n^2
  "
417,417,14,0.2768999934196472,"tree, binary, order, node, leave, right, follow, avl, search, traversal",25,0.12549999356269836,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional",28,0.04430000111460686,"child, add, non, cause, leaf, full, slow, sift, treechild, nodeleaf","['follow', 'difference', 'graph', 'binary', 'tree', 'binary', 'tree', 'child', 'multiple', 'parentsin', 'graph', 'can', 'loop', 'circuit']","Which of the following is NOT the difference between a Graph and a Binary Tree?
  In Binary Trees, some children can have multiple parentsin Graphs, you cannot have loops or circuits
  "
418,418,24,0.5011000037193298,"hash, element, table, bucket, use, function, close, key, store, insert",16,0.06920000165700912,"for, follow, time, complexity, true, give, statement, function, correct, run",29,0.032099999487400055,"find, number, step, item, average, many, index, table, insert, hash","['follow', 'answer', 'describe', 'correct', 'process', 'collision', 'handling', 'close', 'hash', 'table', 'linear_probing', 'collision', 'move', 'across', 'hash', 'table', 'open', 'slot', 'find', 'if', 'reach', 'end', 'hash', 'table', 'loop', 'back', 'begin', 'if', 'open', 'slot', 'return', 'hash', 'table', 'full']","Which of the following answers describes the correct process of collision handling in a closed hash table with linear probing?
  When collision: Move across hash table until open slot is found If reach end of hash table: Loop back to the beginning If no open slot: Return that hash table is full
  "
419,419,56,0.3682999908924103,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",24,0.04560000076889992,"hash, element, table, bucket, use, function, close, key, store, insert",16,0.040699999779462814,"for, follow, time, complexity, true, give, statement, function, correct, run","['correct', 'definition', 'stable', 'sort', 'algorithm', 'sort', 'take', 'account', 'initial', 'order', 'list', 'maintain', 'order', 'equal', 'value', 'element']","Which of these is the correct definition of a stable sorting algorithm?
 A sorting algorithm that takes into account the initial order of a list and maintains the order of equal-valued elements.
   "
420,420,49,0.2159000039100647,"int, result, return, term, many, num, body, function, heap, count",16,0.15330000221729279,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.011300000362098217,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['complexity', 'follow', 'codeint', 'int', 'count', 'for', 'for', 'count', 'return', 'count']","What is the complexity of the following code?int f( int n, int m) { int count = 0; for (int i = n; i > 0; i--) { for (int j = 0; j < m; j = j + 2) { count++; } } return count;}
  ?(n*m)
  "
421,421,56,0.2531999945640564,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.053199999034404755,"for, follow, time, complexity, true, give, statement, function, correct, run",29,0.04830000177025795,"find, number, step, item, average, many, index, table, insert, hash","['sort', 'would', 'follow', 'intermediate', 'step', 'while', 'sort', 'selection', 'sort']","Which sorting algorithm would have the following intermediate steps while sorting ?
Selection Sort
    "
422,422,52,0.09730000048875809,"show, factor, prime, distribute, uniformly, distribution, improve, increase, reduce, advice",24,0.0868000015616417,"hash, element, table, bucket, use, function, close, key, store, insert",29,0.056299999356269836,"find, number, step, item, average, many, index, table, insert, hash","['formula', 'provide', 'theload', 'factor', 'hash', 'table']","Which of these formulas will provide theload factor of a hash table?
   
 "
423,423,20,0.06019999831914902,"call, system, avoid, determine, matrix, engine, bugle, pagerank, inthis, involve",24,0.05909999832510948,"hash, element, table, bucket, use, function, close, key, store, insert",1,0.05640000104904175,"measurement, select, precision, option, accuracy, value, close, mathematical, technique, difference","['technique', 'avoid', 'collision']","What technique can avoid collision?
     All of the above
"
424,424,14,0.20730000734329224,"tree, binary, order, node, leave, right, follow, avl, search, traversal",52,0.017799999564886093,"show, factor, prime, distribute, uniformly, distribution, improve, increase, reduce, advice",2,0.014100000262260437,"require, comparison, estimate, nee, minimum, identify, aka, clockwise, complexityo, outside","['common', 'type', 'traversal', 'depth', 'first']","What are the two common types of graph traversal?
 Depth-first and breadth-first
   "
425,425,43,0.1746000051498413,"space, nlogn, worst, double, do, enough, arraylist, namortise, collection, efficiency",56,0.05959999933838844,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",55,0.013399999588727951,"datum, search, structure, remove, data, list, store, want, add, use","['sort', 'theworst', 'space', 'efficiency', 'mergesort']","Which of these sorting algorithms has theworst space efficiency?
 Mergesort
   "
426,426,24,0.048900000751018524,"hash, element, table, bucket, use, function, close, key, store, insert",2,0.016200000420212746,"require, comparison, estimate, nee, minimum, identify, aka, clockwise, complexityo, outside",42,0.016200000420212746,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",['respectively'],"What are the complexity of linear search algorithm, binary search algorithm and merge sort algorithm respectively?
O(n), O(logn), O(nlogn)
    "
427,427,16,0.17829999327659607,"for, follow, time, complexity, true, give, statement, function, correct, run",49,0.05559999868273735,"int, result, return, term, many, num, body, function, heap, count",56,0.013799999840557575,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['transitivity', 'term', 'time', 'complexity', 'if']","What is transitivity? In terms of time complexity.
  If f(n) = O(g(n)) & g(n) = O(h(n)) then f(n) = O(h(n))
  "
428,428,16,0.14010000228881836,"for, follow, time, complexity, true, give, statement, function, correct, run",59,0.014600000344216824,"looping, letf, invent, queue, default, dump, bsta, legal, mergesort, worst_case",18,0.014600000344216824,"looping, letf, invent, queue, default, dump, bsta, legal, mergesort, worst_case","['statement', 'istrue', 'none']","Which of these statements istrue? An adjacency matrix is...
     None of the above
"
429,429,30,0.06159999966621399,"operation, middle, link, array, perform, advantage, make, item, front, either",16,0.05950000137090683,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.05700000002980232,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['perform', 'bad', 'none']","In which order will mergesort perform the WORST?
     None of the above.
"
430,430,14,0.35010001063346863,"tree, binary, order, node, leave, right, follow, avl, search, traversal",56,0.014999999664723873,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",55,0.011300000362098217,"datum, search, structure, remove, data, list, store, want, add, use","['depth', 'first', 'search', 'equivalent', 'traversal', 'binary', 'tree', 'pre', 'order', 'traversal']","Depth First Search is equivalent to which of the traversal in the Binary Trees?
 Pre-order Traversal
   "
431,431,56,0.188400000333786,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",40,0.11230000108480453,"array, slow, problem, may, random, element, access, integer, anywhere, face",30,0.0471000000834465,"operation, middle, link, array, perform, advantage, make, item, front, either","['average', 'runtime', 'complexity', 'array', 'list', 'add', 'operation', 'if', 'resize', 'double', 'array', 'size']","What is the average runtime complexity of an Array list's add operation? (if resize doubles array size)
1
    "
432,432,24,0.396699994802475,"hash, element, table, bucket, use, function, close, key, store, insert",30,0.03819999843835831,"operation, middle, link, array, perform, advantage, make, item, front, either",32,0.031700000166893005,"log, base, bottom, many, become, simplify, less, allow, level, multiple","['follow', 'advantage', 'use', 'open', 'hash', 'table', 'close', 'hash', 'table', 'open', 'hash', 'table', 'use', 'less', 'memory']","Which of the following is NOT an advantage of using open hash table over closed hash table.
  Open hash table uses less memory.
  "
433,433,14,0.16769999265670776,"tree, binary, order, node, leave, right, follow, avl, search, traversal",35,0.04859999939799309,"number, people, real, create, would, say, quickly, company, change, friend",16,0.02879999950528145,"for, follow, time, complexity, true, give, statement, function, correct, run","['binary', 'search', 'tree', 'correct', 'figure']","Which binary search tree is correct in the figure?
 B
   "
434,434,39,0.18279999494552612,"node, sub, process, next, link, current, element, list, object, pointer",14,0.0997999981045723,"tree, binary, order, node, leave, right, follow, avl, search, traversal",56,0.048500001430511475,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['tree', 'equivalent', 'link', 'list', 'head', 'pointer', 'root', 'node']","What is the tree equivalent of a linked-list 'head' pointer?
   A root node.
 "
435,435,56,0.23929999768733978,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",30,0.05770000070333481,"operation, middle, link, array, perform, advantage, make, item, front, either",41,0.0478999987244606,"runtime, part, course, http, answerquestion, mainphpcmd, answer, conference, target, must","['operation', 'low', 'average', 'runtime', 'complexity', 'singly', 'link', 'list', 'add']","What operation has the lowest average runtime complexity in a singly linked list.
 add(o)
   "
436,436,49,0.15770000219345093,"int, result, return, term, many, num, body, function, heap, count",16,0.10339999943971634,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.08709999918937683,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['follow', 'code', 'for', 'insertion', 'sort', 'select', 'option', 'void', 'insertionsort', 'int', 'array', 'int', 'alength', 'for', 'int', 'int', 'key', 'int', 'while', 'key', 'key']","The following code is for an insertion sort. Select from the options below, the line of code which should replace Xpublic static void insertionSort(int[] array) { int[] a = array; int n = a.length; for (int i=1; i<n; ++i){ int key = a[i]; int j = i-1; while (j>=0 && a[j].compareTo(key) > 0){ a[j+1] = a[j]; j = j-1; } X }}
  a[j+1] = key;
  "
437,437,16,0.35920000076293945,"for, follow, time, complexity, true, give, statement, function, correct, run",43,0.0430000014603138,"space, nlogn, worst, double, do, enough, arraylist, namortise, collection, efficiency",49,0.012400000356137753,"int, result, return, term, many, num, body, function, heap, count","['correctly', 'describe', 'complexity', 'follow', 'int', 'for', 'systemoutprint', 'for', 'double', 'systemoutprint', 'goodbye', 'world']","Which one correctly describes the complexity of the following code fragment?for (int i = 1; i < n; i = i * 2){ for(int j = n; j > 0; j--) { System.out.print(""hello world""); }}for (double i = n; i > 1; i = i / 2){ System.out.print(""goodbye world"");}
  
  "
438,438,14,0.15279999375343323,"tree, binary, order, node, leave, right, follow, avl, search, traversal",18,0.014399999752640724,"looping, letf, invent, queue, default, dump, bsta, legal, mergesort, worst_case",27,0.014399999752640724,"looping, letf, invent, queue, default, dump, bsta, legal, mergesort, worst_case","['post', 'traversal', 'tree']","A post order traversal of the tree; [a] / \ [b] [c]
  b c a
  "
439,439,39,0.3172999918460846,"node, sub, process, next, link, current, element, list, object, pointer",16,0.1745000034570694,"for, follow, time, complexity, true, give, statement, function, correct, run",0,0.0,,"['follow', 'statement', 'doubly', 'link', 'list', 'true', 'previous', 'pointer', 'for', 'head', 'node', 'next', 'pointer', 'for', 'tail', 'node', 'value']","Which of the following statements about doubly-linked lists is true?
   The previous pointer for the ""head"" node and the next pointer for the ""tail"" node have the same value.
 "
440,440,56,0.11649999767541885,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",55,0.0649000033736229,"datum, search, structure, remove, data, list, store, want, add, use",2,0.05310000106692314,"require, comparison, estimate, nee, minimum, identify, aka, clockwise, complexityo, outside","['follow', 'advantage', 'use', 'datum', 'comparison', 'fast']","Which of the following are NOT advantages of using a Heap data-structure in Java?
  Heap comparisons are very fast
  "
441,441,40,0.3894999921321869,"array, slow, problem, may, random, element, access, integer, anywhere, face",56,0.1720999926328659,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",55,0.11469999700784683,"datum, search, structure, remove, data, list, store, want, add, use","['follow', 'statement', 'list', 'resize', 'whereas', 'gap', 'list', 'whereas', 'standard', 'array', 'can', 'linear', 'search', 'list', 'slow', 'element', 'array', 'datum', 'type', 'whereas', 'array', 'list', 'primitive', 'non', 'primitive', 'datum', 'type', 'array', 'list', 'always', 'single', 'dimensional', 'however', 'array', 'also', 'multi', 'dimensional']","Which of the following statements about array lists and arrays in java are false1.Array lists can be resized whereas arrays can't.2.Array lists can have gaps in the list whereas a standard array cannot.3. A linear search in an array list is slower than in an array (where both have the same elements).4. An array can be of a primitive data type whereas an array list can be of a primitive or non-primitive data type.5. Array lists are always single dimensional however arrays can also be multi-dimensional.
  2 and 4
  "
442,442,56,0.18369999527931213,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",43,0.12870000302791595,"space, nlogn, worst, double, do, enough, arraylist, namortise, collection, efficiency",16,0.07240000367164612,"for, follow, time, complexity, true, give, statement, function, correct, run","['less', 'popular', 'quicksort', 'for', 'integer', 'sort', 'quicksort', 'flexible', 'thus', 'preference', 'for', 'situation', 'require', 'memory']","Why, in general, is Radix sort less popular than Quicksort for integer sorting?
  Quicksort is more flexible (thus a preference for most situations), Radix sort requires more memory.
  "
443,443,29,0.17679999768733978,"find, number, step, item, average, many, index, table, insert, hash",24,0.14630000293254852,"hash, element, table, bucket, use, function, close, key, store, insert",16,0.0778999999165535,"for, follow, time, complexity, true, give, statement, function, correct, run","['correct', 'formula', 'for', 'hash', 'table', 'max', 'number', 'key', 'insert', 'total', 'bucket']","What is the correct formula for the load factor of a hash table?
  L = max number of keys to insert / total buckets in the array
  "
444,444,56,0.3352999985218048,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.012799999676644802,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.011300000362098217,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['follow', 'sort', 'algorithm', 'best', 'quick', 'time', 'complexity', 'merge', 'sort']","Which of the following sorting algorithms has the best/ quickest WORST CASE time complexity?
   Merge Sort
 "
445,445,56,0.22390000522136688,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.013799999840557575,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.013399999588727951,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['follow', 'sort', 'stable', 'insertion', 'sort']","Which of the following sorting algorithms is stable?
  Insertion Sort
  "
446,446,14,0.20739999413490295,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.09529999643564224,"for, follow, time, complexity, true, give, statement, function, correct, run",20,0.09350000321865082,"call, system, avoid, determine, matrix, engine, bugle, pagerank, inthis, involve","['follow', 'statement', 'basic', 'tree', 'false', 'top', 'node', 'tree', 'call', 'leaf', 'node']","Which of the following statements about basic trees is false?
 The top node of a tree is called the ""leaf"" node.
   "
447,447,35,0.2290000021457672,"number, people, real, create, would, say, quickly, company, change, friend",55,0.1242000013589859,"datum, search, structure, remove, data, list, store, want, add, use",56,0.09179999679327011,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['task', 'programming', 'sort', 'large', 'data', 'set', 'powerful', 'computer', 'important', 'part', 'company', 'time', 'critical', 'safety', 'application', 'tell', 'complete', 'sort', 'quickly', 'possible', 'case', 'big', 'priority', 'appropriate', 'choice']","I am tasked with programming a sorting algorithm with large data-sets on a powerful computer. This is an important part of my company's time-critical, safety application. I'm told that completing the sorting very quickly- in all possible cases - is the biggest priority. What's the appropriate choice of algorithm?
 Merge Sort
   "
448,448,28,0.11509999632835388,"child, add, non, cause, leaf, full, slow, sift, treechild, nodeleaf",14,0.08630000054836273,"tree, binary, order, node, leave, right, follow, avl, search, traversal",6,0.0723000019788742,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly","['question', 'consider', 'for', 'store', 'position', 'array', 'position', 'child', 'store', 'left', 'child', 'right', 'child']","In this question we'll consider the Abstract Data Type: Heaps.If the data for a node in a heap is stored in position i in an array, what positions will its children be stored in?
 Left Child: Right Child:
   "
449,449,32,0.09539999812841415,"log, base, bottom, many, become, simplify, less, allow, level, multiple",3,0.05700000002980232,"case, fastest, ofbubble, itsb, distinct, description, fit, stableb, performance, nearly",40,0.05640000104904175,"array, slow, problem, may, random, element, access, integer, anywhere, face","['complexitie', 'fastest', 'slow', 'log', 'nlog']","Sort the algorithm complexities from fastest to slowest when n = 100.1. 1502. 50n3. 5n^24. log(3000n)5. 6nlog(400n)
4, 1, 5, 2, 3
    "
450,450,14,0.1274999976158142,"tree, binary, order, node, leave, right, follow, avl, search, traversal",56,0.08139999955892563,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",32,0.05119999870657921,"log, base, bottom, many, become, simplify, less, allow, level, multiple","['average', 'runtime', 'complexity', 'binary', 'tree', 'search', 'log']","What is the average runtime complexity of a binary tree search?
  O(log n)
  "
451,451,16,0.28459998965263367,"for, follow, time, complexity, true, give, statement, function, correct, run",42,0.16200000047683716,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",0,0.0,,"['consider', 'function', 'for', 'follow', 'correct', 'definition', 'for', 'exact', 'bind', 'big', 'theta', 'positive', 'constant', 'for']","Consider functions g(n) and f(n) with g(n) >0 and f(n) >0 for n>0.Which of the following is the correct definition for the exact bound?
  g(n) = ?(f(n)) (""g(n) is Big-Theta of f(n)"")iff there are two positive constants c1 and c2 and a n0>0 so that for all n>n0: g(n) = c1f(n) and g(n) = c2f(n)
  "
452,452,16,0.18979999423027039,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.014100000262260437,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",14,0.013899999670684338,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['follow', 'statement', 'true', 'none']","Which of the following statement is true?
     None of the above.
"
453,453,24,0.4869999885559082,"hash, element, table, bucket, use, function, close, key, store, insert",49,0.03350000083446503,"int, result, return, term, many, num, body, function, heap, count",55,0.032099999487400055,"datum, search, structure, remove, data, list, store, want, add, use","['plan', 'store', 'datum', 'close', 'hash', 'table', 'linear_probe', 'right', 'hash', 'function', 'use', 'meaning', 'slot', 'hash', 'table', 'insert', 'element', 'order', 'would', 'end', 'result']","You plan to store data in a closed hash table with linear probing to the right. The hash function you are using is h(x) = x % 7, meaning there are 7 slots in your hash table; 0,1,2,3,4,5,6. Inserting the elements 22, 8, 5, 26, 4, 13, 9 in that order, what would be the end result?
  13, 22, 8, 9, 4, 5, 26
  "
454,454,3,0.12890000641345978,"case, fastest, ofbubble, itsb, distinct, description, fit, stableb, performance, nearly",56,0.12359999865293503,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",24,0.0502999983727932,"hash, element, table, bucket, use, function, close, key, store, insert","['fastest', 'good', 'case', 'assume', 'element', 'distinct', 'insertion']","Which of these algorithms have the fastest best case?(assume all elements are distinct)
   Insertion sort
 "
455,455,3,0.05849999934434891,"case, fastest, ofbubble, itsb, distinct, description, fit, stableb, performance, nearly",53,0.05730000138282776,"mean, new, mistake, county, send, teach, late, limited, incorrectly, incredibly",29,0.05660000070929527,"find, number, step, item, average, many, index, table, insert, hash","['amortise', 'mean', 'average', 'case']","What does Amortised mean?
  Average Case
  "
456,456,56,0.13770000636577606,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",2,0.05510000139474869,"require, comparison, estimate, nee, minimum, identify, aka, clockwise, complexityo, outside",30,0.054999999701976776,"operation, middle, link, array, perform, advantage, make, item, front, either","['good', 'comparison', 'algorithm', 'perform', 'average']","What is the best a comparison sort algorithm can perform in the average or worst case?
   O(nlogn)
 "
457,457,16,0.21780000627040863,"for, follow, time, complexity, true, give, statement, function, correct, run",55,0.09589999914169312,"datum, search, structure, remove, data, list, store, want, add, use",38,0.094200000166893,"small, motorway, occur, strategy, city, major, divisible, scenario, repeatedly, shelf","['follow', 'advice', 'give', 'lecture', 'come', 'time', 'complexity', 'if', 'small', 'worry', 'complexity', 'pick', 'easy', 'program']","Which of the following was advice given in a lecture?
When it comes to time complexity, if n is small you shouldn't worry about complexity and just pick the easiest algorithm to program.
    "
458,458,14,0.35830000042915344,"tree, binary, order, node, leave, right, follow, avl, search, traversal",39,0.09070000052452087,"node, sub, process, next, link, current, element, list, object, pointer",43,0.019300000742077827,"space, nlogn, worst, double, do, enough, arraylist, namortise, collection, efficiency","['type', 'tree', 'transversal', 'first', 'process', 'node', 'leave', 'subtree', 'right', 'subtree', 'finally', 'current', 'node', 'post', 'order']","Which type of tree transversal will first process the nodes in the left subtree, then the right subtree and finally the current node?
 Post-order
   "
459,459,56,0.16920000314712524,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.15369999408721924,"for, follow, time, complexity, true, give, statement, function, correct, run",40,0.049800001084804535,"array, slow, problem, may, random, element, access, integer, anywhere, face","['consider', 'follow', 'statement', 'list', 'choose', 'statement', 'false', 'for', 'link', 'list', 'average', 'case', 'access', 'element']","Consider the following statements about lists and choose the statement that is FALSE.
  For a Linked list the average case to access an element is?(i)
  "
460,460,16,0.2273000031709671,"for, follow, time, complexity, true, give, statement, function, correct, run",13,0.08160000294446945,"second, take, record, long, run, expect, likely, question, information, implementation",32,0.047600001096725464,"log, base, bottom, many, become, simplify, less, allow, level, multiple","['consider', 'take', 'for', 'for', 'for', 'asymptotic', 'complexity', 'likely', 'log']","Consider an algorithm that takes 8s for n=50, 14s for n=100 and 20s for n=200. What asymptotic complexity does it likely have.
 ?(log n)
   "
461,461,55,0.1379999965429306,"datum, search, structure, remove, data, list, store, want, add, use",16,0.061500001698732376,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.05739999935030937,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['set', 'name', 'store', 'reverse', 'alphabetical', 'implement', 'if', 'search', 'for']","Becky has a set of names stored in a reverse alphabetical list {""Zach"", ""Tom"", ""Isaac"", ""Freya "",""Becky"", ""Anna"", ""Adam""}. Which search algorithm should she implement if searching for the word ""Zach""?
 linear search
   "
462,462,16,0.16130000352859497,"for, follow, time, complexity, true, give, statement, function, correct, run",29,0.0731000006198883,"find, number, step, item, average, many, index, table, insert, hash",44,0.062300000339746475,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na","['follow', 'efficient', 'time', 'complexity', 'for', 'large', 'number', 'item']","Which of the following is the most efficient time complexity, for a large number of items?
   O(1)
 "
463,463,16,0.1386999934911728,"for, follow, time, complexity, true, give, statement, function, correct, run",24,0.1006999984383583,"hash, element, table, bucket, use, function, close, key, store, insert",29,0.08219999819993973,"find, number, step, item, average, many, index, table, insert, hash","['follow', 'data', 'structure', 'short', 'average', 'run', 'time', 'for', 'find', 'element', 'hash', 'table']","Which of the three following data structures have the shortest average run time for finding an ith element.
 hash table
   "
464,464,14,0.14190000295639038,"tree, binary, order, node, leave, right, follow, avl, search, traversal",56,0.12600000202655792,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",40,0.07419999688863754,"array, slow, problem, may, random, element, access, integer, anywhere, face","['go', 'add', 'array', 'number', 'empty', 'binary', 'tree', 'bad', 'term', 'search', 'time', 'if', 'input', 'array', 'already', 'sort']","You are going to add an array of numbers to an empty binary tree. It is worse in terms of search time if the input array is:
 Already sorted
   "
465,465,14,0.15449999272823334,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.08640000224113464,"for, follow, time, complexity, true, give, statement, function, correct, run",32,0.049300000071525574,"log, base, bottom, many, become, simplify, less, allow, level, multiple","['average', 'search', 'time', 'for', 'binary', 'search', 'tree', 'log']","What is the average search time for a binary search tree?
  ?(log n)
  "
466,466,16,0.1014999970793724,"for, follow, time, complexity, true, give, statement, function, correct, run",42,0.06030000001192093,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",24,0.018699999898672104,"hash, element, table, bucket, use, function, close, key, store, insert","['function', 'bind', 'function']","Which of these functions is the upper bound function?
O(f(n))
    "
467,467,16,0.17260000109672546,"for, follow, time, complexity, true, give, statement, function, correct, run",24,0.09520000219345093,"hash, element, table, bucket, use, function, close, key, store, insert",29,0.013000000268220901,"find, number, step, item, average, many, index, table, insert, hash","['follow', 'statement', 'hash', 'table', 'false', 'none']","Which of the following statements about hash tables are false?
  None of the above
  "
468,468,29,0.2824000120162964,"find, number, step, item, average, many, index, table, insert, hash",24,0.12049999833106995,"hash, element, table, bucket, use, function, close, key, store, insert",49,0.06369999796152115,"int, result, return, term, many, num, body, function, heap, count","['give', 'element', 'index', 'parent', 'element', 'index', 'last', 'element', 'heap', 'leave', 'index', 'parent', 'index', 'last', 'element', 'heap', 'index']","___0 |10 |1 | 8 |2 | 11|3 | 7 |4 | 4 |5 | 9 |6 | 5 |Given the heap array above, what isleft Child of 11 (element at index 2) ?parent of 4 (element at index 4) ?last element in heap?
left Child of 11 = 9 (index 5)parent of 4 = 8 (index 1)last element in heap = 5(index 6)
    "
469,469,13,0.22210000455379486,"second, take, record, long, run, expect, likely, question, information, implementation",16,0.12150000035762787,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.10939999669790268,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['give', 'complexity', 'format', 'constant', 'long', 'would', 'take', 'run', 'algorithm', 'information', 'find', 'hence', 'answer', 'question', 'time', 'second']","Given an algorithm with a time complexity of the format a^(b*n) where a and b are constants, how long would it take to run the algorithm when n = 15?Use the information below to find a and b and hence answer the question. n time 3 3s 6 9s18 729s
 243 seconds
   "
470,470,56,0.29989999532699585,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",14,0.25760000944137573,"tree, binary, order, node, leave, right, follow, avl, search, traversal",55,0.06360000371932983,"datum, search, structure, remove, data, list, store, want, add, use","['give', 'list', 'name', 'initially', 'sort', 'alphabetical', 'order', 'first', 'name', 'however', 'want', 'change', 'sort', 'last', 'name', 'if', 'order', 'first', 'name', 'initially', 'sort', 'achieve', 'quick', 'way', 'general', 'sort', 'algorithm', 'would', 'best', 'merge', 'sort']","You are given a list of names that is initially sorted in alphabetical order by their first names. However you now want to change it to be sorted by their last names, and if they are the same then order them by their first names as initially sorted. To achieve this in the quickest way in general, which of the sorting algorithms would be best to use?
 Merge sort
   "
471,471,56,0.22390000522136688,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.013799999840557575,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.013399999588727951,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['follow', 'sort', 'stable', 'insertion', 'sort']","Which of the following sorting algorithms are STABLE
 Insertion Sort
   "
472,472,14,0.18170000612735748,"tree, binary, order, node, leave, right, follow, avl, search, traversal",28,0.13699999451637268,"child, add, non, cause, leaf, full, slow, sift, treechild, nodeleaf",39,0.07530000060796738,"node, sub, process, next, link, current, element, list, object, pointer","['definition', 'root', 'tree', 'child', 'leaf', 'root', 'node', 'treechild', 'node', 'point', 'current', 'nodeleaf', 'node', 'child']","What are the definitions of the ""root"" of a tree, the ""child"" of a node and a ""leaf"" node?
  Root: The top node of the treeChild: Any node pointed to by the current nodeLeaf: A node with 0 children
  "
473,473,55,0.10130000114440918,"datum, search, structure, remove, data, list, store, want, add, use",14,0.06319999694824219,"tree, binary, order, node, leave, right, follow, avl, search, traversal",40,0.05460000038146973,"array, slow, problem, may, random, element, access, integer, anywhere, face","['array', 'binary', 'search', 'find', 'datum']","Which array can use binary search to find a data?
   A and B
 "
474,474,37,0.24660000205039978,"sum, codepublic, op, fibonacci, thecounte, alength, elementary_operation, looping, else, letf",16,0.08820000290870667,"for, follow, time, complexity, true, give, statement, function, correct, run",49,0.07580000162124634,"int, result, return, term, many, num, body, function, heap, count","['thecounte', 'elementary_operation', 'follow', 'codepublic', 'sum', 'for', 'int', 'alength', 'sum', 'sum', 'return', 'op', 'op']","What is theCounting Elementary Operations T(n) of the following code?public int totalSum(int[ ] a) { int sum = 0; for (int i=0; i<a.length; i++) { sum=sum + a[i]; } return sum}(a.length = n)T(n)=? ops
   4n+4 ops
 "
475,475,56,0.19900000095367432,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",6,0.10279999673366547,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly",16,0.09440000355243683,"for, follow, time, complexity, true, give, statement, function, correct, run","['use', 'carry', 'type', 'sort', 'algorithmvoid', 'for', 'int', 'int', 'minindex', 'for', 'if', 'minindex', 'selection', 'sort']","The code below can be used to carry out which type of sorting algorithm?void algorithmName(int a[], int n){ for (int i = 0; i < n; i++) { int minIndex = i; for (int j = i+1; j < n; j++) { if (a[j] < a[minIndex]) minIndex = j; } swap(a, i, minIndex); }}
 Selection Sort
   "
476,476,42,0.10159999877214432,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",16,0.1006999984383583,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.015200000256299973,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['lower', 'bind', 'time', 'complexity']","What is ?
 The lower bound time complexity
   "
477,477,29,0.3668999969959259,"find, number, step, item, average, many, index, table, insert, hash",24,0.179299995303154,"hash, element, table, bucket, use, function, close, key, store, insert",55,0.07850000262260437,"datum, search, structure, remove, data, list, store, want, add, use","['contain', 'bucket', 'hash', 'index', 'alphabet', 'first', 'letterfor', 'example', 'animal', 'boat', 'bucket', 'determine', 'hashcode', 'number', 'bucketseg', 'animal', 'would', 'place', 'bucket', 'index', 'if', 'add', 'word', 'play', 'pokemon', 'go', 'everyday', 'word', 'bucket', 'hash', 'table', 'play', 'pokemon', 'go', 'everyday']","Misha has an open Hashtable containing 4 buckets. He hashes a word by:Hashcode = Length of word + index in alphabet of the first letterFor example, ""animal"" = 6 + 1 = 7Or ""boat"" = 4 + 2 = 6The bucket is determined by hashcode % the number of buckets.E.g. ""animal"" would be placed in the bucket with index 3If Misha adds the words:""i"", ""play"", ""pokemon go"", ""everyday""What words are in each of the buckets in the hash table?
0. ""play""1. ""pokemon go"", ""everyday""2. ""i""3. -
    "
478,478,3,0.06340000033378601,"case, fastest, ofbubble, itsb, distinct, description, fit, stableb, performance, nearly",16,0.0608999989926815,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.017500000074505806,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['complexity', 'fastest']","Which of these complexities is the fastest?
 ?(n^1/2)
   "
479,479,55,0.21320000290870667,"datum, search, structure, remove, data, list, store, want, add, use",52,0.08259999752044678,"show, factor, prime, distribute, uniformly, distribution, improve, increase, reduce, advice",3,0.04830000177025795,"case, fastest, ofbubble, itsb, distinct, description, fit, stableb, performance, nearly","['search', 'fastest', 'assume', 'list', 'search', 'presorte', 'uniformly', 'distribute', 'interpolation', 'search']","Which of these searches is the fastest (assuming the list it's searching is presorted and uniformly distributed)?
  Interpolation Search
  "
480,480,56,0.39980000257492065,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",6,0.010400000028312206,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly",9,0.010300000198185444,"visit, look_like, car, company, manufacture, state, define, previously, hit, dead","['state', 'follow', 'list', 'sort', 'sort', 'stable', 'selection', 'insertion', 'bubble', 'insertion', 'bubble', 'merge']","State from the following list of sorts, all the sorts which are stable.- Selection- Insertion- Bubble- Merge- Heap
 Insertion, Bubble, Merge
   "
481,481,49,0.21580000221729279,"int, result, return, term, many, num, body, function, heap, count",16,0.093299999833107,"for, follow, time, complexity, true, give, statement, function, correct, run",29,0.0908999964594841,"find, number, step, item, average, many, index, table, insert, hash","['random', 'new', 'random', 'total', 'int', 'int', 'for', 'int', 'randomnextint', 'int', 'for', 'int', 'while', 'total', 'return', 'total']","What is the time complexity of the code below?:int 2bAlgo(int n) { Random random = new Random(); int total = 0; int[] b = new int[n]; for(int i = 0; i < n; i++) { b[i] = random.nextInt(n); } int j = 0; for(int i = 0; i < 200; i++) { j = n; while(j > 0) { total += j; j = j / 2; } } return total + b[j];}
O(n)
    "
482,482,56,0.3109000027179718,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.012000000104308128,"for, follow, time, complexity, true, give, statement, function, correct, run",55,0.011900000274181366,"datum, search, structure, remove, data, list, store, want, add, use","['implement', 'sort', 'follow', 'algorithm', 'would', 'best', 'insertion', 'sort']","When implementing radix sort, which of the following algorithms would be best to use?
 Insertion sort
   "
483,483,56,0.3109000027179718,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.012000000104308128,"for, follow, time, complexity, true, give, statement, function, correct, run",55,0.011900000274181366,"datum, search, structure, remove, data, list, store, want, add, use","['implement', 'sort', 'follow', 'algorithm', 'would', 'best', 'insertion', 'sort']","When implementing radix sort, which of the following algorithms would be best to use?
 Insertion sort
   "
484,484,16,0.1039000004529953,"for, follow, time, complexity, true, give, statement, function, correct, run",6,0.0957999974489212,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly",31,0.013799999840557575,"looping, letf, invent, queue, default, dump, bsta, legal, mergesort, worst_case","['functionpublic', 'void', 'for', 'for']","What is the time complexity of this function?public void func(int n){for (int i=1;i<n;i++) {System.out.println(n);}for (int k=1;k<n;k++) {System.out.println(n);}}
 O(n)
   "
485,485,24,0.1881999969482422,"hash, element, table, bucket, use, function, close, key, store, insert",29,0.1535000056028366,"find, number, step, item, average, many, index, table, insert, hash",16,0.07509999722242355,"for, follow, time, complexity, true, give, statement, function, correct, run","['if', 'close', 'hash', 'table', 'follow', 'false', 'take', 'step', 'find', 'bucket', 'via', 'linear_probe']","If the load factor of a closed hash table is 0.7, which of the following is false?
  In the worst case it takes < 3 steps to find a bucket via linear probing.
  "
486,486,40,0.0632999986410141,"array, slow, problem, may, random, element, access, integer, anywhere, face",56,0.06239999830722809,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",30,0.01549999974668026,"operation, middle, link, array, perform, advantage, make, item, front, either","['array', 'iteration']","What is this array after 2 iterations of Bubble Sort?[""John"",""Bill"",""Elon"",""Mark"",""Amy"",""Curtis""]
 [""Bill"", ""Elon"", ""Amy"", ""Curtis"", ""John"", ""Mark""]
   "
487,487,14,0.28189998865127563,"tree, binary, order, node, leave, right, follow, avl, search, traversal",11,0.013199999928474426,"complete, digit, count, least, significant, digits, basis, position, share, counting",16,0.012600000016391277,"for, follow, time, complexity, true, give, statement, function, correct, run","['follow', 'property', 'tree', 'binary', 'balanced', 'complete', 'maxheap']","Which of the following properties does this tree have?1) Binary2) Balanced3) Complete4) Maxheap
1, 2
    "
488,488,14,0.28189998865127563,"tree, binary, order, node, leave, right, follow, avl, search, traversal",11,0.013199999928474426,"complete, digit, count, least, significant, digits, basis, position, share, counting",16,0.012600000016391277,"for, follow, time, complexity, true, give, statement, function, correct, run","['follow', 'property', 'tree', 'binary', 'balanced', 'complete', 'maxheap']","Which of the following properties does this tree have?1) Binary2) Balanced3) Complete4) Maxheap
1, 2
    "
489,489,51,0.3612000048160553,"efficient, company, come, condition, stock, sortb, sortc, much, around, deal",35,0.22439999878406525,"number, people, real, create, would, say, quickly, company, change, friend",56,0.15459999442100525,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['imagine', 'work', 'company', 'deal', 'stock', 'team', 'current', 'project', 'develop', 'page', 'website', 'list', 'company', 'stock', 'market', 'allow', 'monitor', 'real', 'feature', 'page', 'sort', 'company', 'number', 'way', 'growth', 'last', 'day', 'total', 'net', 'worth', 'detail', 'change', 'real', 'time', 'list', 'also', 'need', 'sorted', 'real', 'time', 'tooyour', 'team', 'leader', 'tell', 'consistent', 'speed', 'top', 'priority', 'second', 'count', 'stock', 'market', 'lag', 'result', 'complaint', 'sort', 'stable', 'cause', 'confusion', 'if', 'company', 'value', 'swap', 'seemingly', 'randomly', 'memory', 'issue', 'company', 'prepare', 'give', 'much', 'space', 'need', 'for', 'sort', 'long', 'sort', 'appropriate', 'for', 'situation', 'merge', 'sort']","Imagine you're working at company that deals with stocks and your team's current project is develop a page on a website that lists companies on the stock market and allows you to monitor them in real time.A feature of this page is that you can sort the companies in a number of ways (e.g. growth in the last day, total net worth, etc.). As these details are changing in real time, the list will also needed to be re-sorted in real-time too.Your team leader has told you that:1. Consistent speed is the top priority. Every second counts in the stock market and any lag will result in complaints.2. The sort should be stable. It will cause confusion if companies with the same value were to swap seemingly randomly.3. Memory is not an issue. The company is prepared to give you as much space as you need for the sort as long as its effective.Which sort is the most appropriate for this situation?
   Merge Sort
 "
490,490,16,0.2272000014781952,"for, follow, time, complexity, true, give, statement, function, correct, run",3,0.0478999987244606,"case, fastest, ofbubble, itsb, distinct, description, fit, stableb, performance, nearly",6,0.04699999839067459,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly","['time', 'complexity', 'for', 'code', 'answer', 'low', 'case', 'letter', 'int', 'for', 'total']","What is the time complexity for the code below? Answer with a lower case letter with no other characters.for (int x=0; x<n; x++){ for (int y=0; y<n; y++){ total = numberArrayOne[x] * numberArrayTwo[y]; }}
n^2
    "
491,491,25,0.2630000114440918,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional",56,0.07419999688863754,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.06939999759197235,"for, follow, time, complexity, true, give, statement, function, correct, run","['follow', 'statement', 'best', 'describe', 'undirected', 'graph', 'edge', 'directional', 'go', 'way', 'along', 'edge']","Which of the following statements best describes an undirected graph?
  All edges are bi-directional, you can go either way along any edge
  "
492,492,14,0.15919999778270721,"tree, binary, order, node, leave, right, follow, avl, search, traversal",49,0.0869000032544136,"int, result, return, term, many, num, body, function, heap, count",16,0.08640000224113464,"for, follow, time, complexity, true, give, statement, function, correct, run","['statement', 'heap', 'false', 'heap', 'binary', 'search', 'tree', 'bst']","Which statement(s) about heaps is false?
   A heap is a binary search tree (BST).
 "
493,493,0,0.17399999499320984,"pass, point, start, book, page, short, similar, look, dijkstra, repeat",29,0.13750000298023224,"find, number, step, item, average, many, index, table, insert, hash",14,0.0625,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['many', 'step', 'find', 'page', 'dictionary', 'page', 'start', 'page', 'use', 'binary', 'search']","How many steps to find page 64 in a dictionary which has 100 pages start from page 1 using binary search?
 6
   "
494,494,0,0.3197999894618988,"pass, point, start, book, page, short, similar, look, dijkstra, repeat",55,0.11209999769926071,"datum, search, structure, remove, data, list, store, want, add, use",56,0.09570000320672989,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['attempt', 'point', 'realise', 'life', 'boring', 'would', 'return', 'point', 'quick', 'possible', 'however', 'boat', 'search', 'since', 'authority', 'happen', 'year', 'ago', 'well', 'little', 'scared', 'go', 'theregiven', 'flann', 'if', 'even', 'real', 'name', 'want', 'return', 'quick', 'possible', 'route', 'take']","Flann O'Brien is an outlaw. He was attempting to hide out at point A, but realised that life there is too boring. He would like to return to point I as quick as possible. However all boats are being searched in case he's on board. With the exception of north Scotland, since the authorities are English and the Scottish referendum only happened 4 years ago... and well they're little scared to go up there.Given that Flann (if that is even his real name) wants to return as quick as possible, which route should he take?
A,B,W,L,C,N,I
    "
495,495,6,0.23890000581741333,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly",16,0.1656000018119812,"for, follow, time, complexity, true, give, statement, function, correct, run",39,0.09480000287294388,"node, sub, process, next, link, current, element, list, object, pointer","['state', 'follow', 'for', 'node', 'head', 'for', 'node', 'nodenext', 'if', 'for', 'int', 'nodeelement', 'if', 'nodeelement', 'break', 'nodenext', 'new', 'listnode', 'nodenext']","State the complexity of the following algorithm:for(int i = 0; i < n; i++){ ListNode node = head; for (int j = 0; j < i - 1; j++){ node = node.next; } if(j > 3){ for(int k = 0; k < j; k++){ node.element += k; if(node.element >= 23){ break; } } }}node.next = new ListNode(o, node.next);
?(n^2)
    "
496,496,56,0.22310000658035278,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.013799999840557575,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.013399999588727951,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['follow', 'sort', 'algorithm', 'stable', 'insertionsort']","Which of the following sorting algorithms is Stable?
   InsertionSort
 "
497,497,17,0.20679999887943268,"lane, skip, skiplist, combined, sum, organise, difference, many, exactly, assign",39,0.11860000342130661,"node, sub, process, next, link, current, element, list, object, pointer",29,0.030799999833106995,"find, number, step, item, average, many, index, table, insert, hash","['skiplist', 'node', 'lane', 'node', 'many', 'node', 'expect', 'see', 'exactly', 'lane']","In a Skiplist where p = 1/2 (i.e the probability that the node has 1 lane is 1/2 and the probability that the node has 2 lanes is 1/4 etc...) which has 1024 nodes. How many nodes should we expect to see that have exactly 6 lanes?
 16
   "
498,498,14,0.13699999451637268,"tree, binary, order, node, leave, right, follow, avl, search, traversal",55,0.05570000037550926,"datum, search, structure, remove, data, list, store, want, add, use",52,0.054999999701976776,"show, factor, prime, distribute, uniformly, distribution, improve, increase, reduce, advice","['follow', 'show', 'structure', 'avl', 'tree']","Which of the following show the structure of an AVL tree?

    "
499,499,14,0.24560000002384186,"tree, binary, order, node, leave, right, follow, avl, search, traversal",28,0.05079999938607216,"child, add, non, cause, leaf, full, slow, sift, treechild, nodeleaf",39,0.013100000098347664,"node, sub, process, next, link, current, element, list, object, pointer","['binary', 'tree', 'binary', 'tree', 'node', 'child', 'node']","What are the characteristics of a Binary Tree?
 In a binary tree, every node has at most two children nodes.
   "
500,500,56,0.3472999930381775,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",39,0.17139999568462372,"node, sub, process, next, link, current, element, list, object, pointer",30,0.05490000173449516,"operation, middle, link, array, perform, advantage, make, item, front, either","['consider', 'implementation', 'link', 'list', 'head', 'pointer', 'tail', 'pointer', 'follow', 'operation', 'complexity', 'time', 'insertion', 'end', 'list', 'insertion', 'front', 'list', 'deletion', 'last', 'list', 'deletion', 'first', 'node', 'list']","Considering an implementation of a linked list with a head pointer and no tail pointer, which two of the following operations have a complexity of O(1) time?1. Insertion at the end of the list2. Insertion at the front of the list3. Deletion of the last node in the list4. Deletion of the First node in the list
   2 and 4
 "
501,501,24,0.3732999861240387,"hash, element, table, bucket, use, function, close, key, store, insert",14,0.05460000038146973,"tree, binary, order, node, leave, right, follow, avl, search, traversal",29,0.041999999433755875,"find, number, step, item, average, many, index, table, insert, hash","['use', 'standard', 'closed', 'hash', 'table', 'linear_probing', 'slot', 'hash', 'function', 'output', 'hash', 'table', 'follow', 'number', 'insert']","Using a standard closed hash table with linear probing which has slots 0, ... ,7 and hash function h(x) = x % 8. What is the output of the hash table when the following numbers are inserted 14, 9, 26, 31, 2, 7, 11, 19?
  7, 9, 26, 2, 11, 19, 14, 31
  "
502,502,14,0.2680000066757202,"tree, binary, order, node, leave, right, follow, avl, search, traversal",37,0.043699998408555984,"sum, codepublic, op, fibonacci, thecounte, alength, elementary_operation, looping, else, letf",16,0.016100000590085983,"for, follow, time, complexity, true, give, statement, function, correct, run","['give', 'binary', 'tree', 'combine', 'sum', 'node', 'value', 'diameter']","Given the two binary trees, what is the combined sum of node values of both diameters?
     38
"
503,503,14,0.2078000009059906,"tree, binary, order, node, leave, right, follow, avl, search, traversal",6,0.19200000166893005,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly",16,0.07349999994039536,"for, follow, time, complexity, true, give, statement, function, correct, run","['value', 'follow', 'code', 'for', 'binary', 'search', 'tree', 'void', 'getelement', 'tree', 'root', 'while', 'rootright', 'null', 'root', 'rootright', 'rootdata', 'large', 'element']","What value does the following code for a binary search tree print?public void getElement(Tree root) { while(root.right() != null) { root = root.right(); } System.out.println(root.data());}
 The largest element
   "
504,504,56,0.17299999296665192,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",40,0.05380000174045563,"array, slow, problem, may, random, element, access, integer, anywhere, face",24,0.05119999870657921,"hash, element, table, bucket, use, function, close, key, store, insert","['insertion', 'sort', 'already', 'nearly', 'order', 'array']","When does a Insertion sort have (n)?
  Already or nearly ordered arrays.
  "
505,505,55,0.7371000051498413,"datum, search, structure, remove, data, list, store, want, add, use",16,0.06889999657869339,"for, follow, time, complexity, true, give, statement, function, correct, run",0,0.0,,"['farm', 'buy', 'for', 'work', 'for', 'contract', 'end', 'week', 'send', 'plump', 'chicken', 'furthermore', 'if', 'old', 'still', 'chicken', 'farm', 'must', 'keep', 'send', 'next', 'plump', 'chicken', 'perform', 'job', 'efficiently', 'promote', 'old', 'give', 'fancy', 'computer', 'tell', 'create', 'data', 'structure', 'assist', 'consistently', 'find', 'plump', 'however', 'still', 'inexperience', 'data', 'structure', 'need', 'advice', 'tell', 'structure', 'follow', 'quality', 'remove', 'plump', 'chicken', 'list', 'easy', 'repeatable', 'high', 'priority', 'update', 'weight', 'exist', 'chicken', 'reorder', 'structure', 'accordingly', 'possible', 'add', 'newborn', 'chicken', 'possible', 'priority', 'egg', 'use', 'for', 'breakfast', 'mcmuffin', 'datum', 'structure']","Old MacDonald has a farm (eieio), but his farm has been bought by McDonald's for his plump, juicy chickens.Old MacDonald now works for McDonald's under a contract where, at the end of every week, he has to send them his plumpest chicken. Furthermore, if Old MacDonald still has more than 63 chickens in his farm, he must keep sending the next plumpest chicken until he has 63.To perform his job more efficiently, McDonald's promoted ""Old MacDonald"" to ""New MacDonald"" by giving him a fancy new computer, and have told him to create a data structure to assist him in consistently finding the plumpest chicken.New MacDonald is however still very inexperienced with data structures and needs some advice. He was told by McDonald's that his data structure should have the following qualities:- Removing the plumpest chicken from the list should be easy and repeatable and is of the highest priority.- Updating the weight of existing chickens and reordering the structure accordingly should be possible.- Adding newborn chickens should be possible but isn't a priority (Most eggs are used for breakfast McMuffins anyway).Which data structure should New MacDonald use?
A Heap
    "
506,506,44,0.0908999964594841,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na",6,0.05739999935030937,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly",16,0.056699998676776886,"for, follow, time, complexity, true, give, statement, function, correct, run","['follow', 'isnot', 'java', 'string']","Which of the following isnot a primitive data type in Java?
   String
 "
507,507,56,0.13660000264644623,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",14,0.13600000739097595,"tree, binary, order, node, leave, right, follow, avl, search, traversal",42,0.07890000194311142,"big, definition, bind, set, notation, omega, final, lecture, theta, exact","['would', 'convert', 'tree', 'sort', 'list', 'smallest', 'big', 'order', 'traversal']","How would you convert a tree into a sorted list (smallest to biggest)
 In order traversal
   "
508,508,56,0.14959999918937683,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",17,0.10189999639987946,"lane, skip, skiplist, combined, sum, organise, difference, many, exactly, assign",41,0.09279999881982803,"runtime, part, course, http, answerquestion, mainphpcmd, answer, conference, target, must","['part', 'skip', 'list', 'make', 'average', 'runtime', 'relatively', 'quick', 'fast', 'lane']","What part of a skip list makes its average runtime relatively quick?
     Fast lanes
"
509,509,32,0.0868000015616417,"log, base, bottom, many, become, simplify, less, allow, level, multiple",25,0.06030000001192093,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional",56,0.05220000073313713,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['main', 'reason', 'prefer', 'less', 'complex', 'list']","What is the main reason we prefer to use an adjacencyarray over an adjacencylist, in the case where our graph is dense?
 The array is less complex than the list
   "
510,510,56,0.25360000133514404,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.08910000324249268,"for, follow, time, complexity, true, give, statement, function, correct, run",29,0.013000000268220901,"find, number, step, item, average, many, index, table, insert, hash","['follow', 'fact', 'selection', 'sort', 'item', 'true', 'selection', 'sort', 'order']","Which of the following facts about a Selection Sort of n items is not true?
 The Selection Sort is of order (n).
   "
511,511,42,0.13619999587535858,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",16,0.13030000030994415,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.013000000268220901,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['follow', 'definition', 'bind', 'constant', 'for', 'ng']","Which of the following is the definition of an upper bound, g = O(f(n))?
 g(n) =O(f(n)) iff there are constants c>0 and N>0 such that for all n>N,g(n) = c f(n)
   "
512,512,24,0.21359999477863312,"hash, element, table, bucket, use, function, close, key, store, insert",28,0.050999999046325684,"child, add, non, cause, leaf, full, slow, sift, treechild, nodeleaf",14,0.013899999670684338,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['close', 'hash', 'table', 'cause', 'collision', 'value']","Which of these is NOT a drawback of a closed hash table?
 Can cause collisions between values
   "
513,513,16,0.3301999866962433,"for, follow, time, complexity, true, give, statement, function, correct, run",39,0.011800000444054604,"node, sub, process, next, link, current, element, list, object, pointer",30,0.011699999682605267,"operation, middle, link, array, perform, advantage, make, item, front, either","['follow', 'correct', 'expression', 'for', 'sumcommonly', 'encounter', 'evaluate', 'time', 'complexity']","Which of the following is a correct expression for the sumcommonly encountered when evaluating time complexity?
  
  "
514,514,14,0.20659999549388885,"tree, binary, order, node, leave, right, follow, avl, search, traversal",52,0.04989999905228615,"show, factor, prime, distribute, uniformly, distribution, improve, increase, reduce, advice",28,0.04969999939203262,"child, add, non, cause, leaf, full, slow, sift, treechild, nodeleaf","['node', 'follow', 'binary', 'tree', 'non', 'balance', 'factor']","Which nodes in the following binary tree have non-zero balance factor? 7 / \ 4 13 / \ \ 2 5 17 / \ \ / \ 1 3 6 15 20
 5, 13
   "
515,515,56,0.13109999895095825,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.10670000314712524,"for, follow, time, complexity, true, give, statement, function, correct, run",35,0.013199999928474426,"number, people, real, create, would, say, quickly, company, change, friend","['time', 'complexity', 'for', 'quick', 'sort']","What is the worst case time complexity for quick sort?
 
   "
516,516,55,0.6284000277519226,"datum, search, structure, remove, data, list, store, want, add, use",16,0.0737999975681305,"for, follow, time, complexity, true, give, statement, function, correct, run",40,0.029899999499320984,"array, slow, problem, may, random, element, access, integer, anywhere, face","['datum', 'structure', 'fill', 'species', 'animal', 'since', 'begin', 'time', 'want', 'add', 'specie', 'order', 'first', 'discovery', 'date', 'new', 'specie', 'encounter', 'therefore', 'add', 'front', 'need', 'retrieve', 'animal', 'datum', 'structure', 'animal', 'extinct', 'want', 'remove', 'datum', 'structurewhich', 'follow', 'statement', 'notcorrect', 'for', 'link', 'list', 'datum', 'structure', 'for', 'store', 'animal', 'rather', 'array', 'link', 'list', 'general', 'much', 'easy', 'implement', 'array']","I have a data structure, filled with species of animals since the beginning of time. I am wanting to add these species in the order of their first discovery date. Any new species encountered will therefore be added to the front. I have no need to retrieve any animal once it is in my data structure. When an animal is extinct, I want to remove it from my data structure.Which of the following statements is notcorrect for why I should use a Linked List as the Data Structure for storing the animals, rather than an array?
Linked Lists in general are much easier to implement than arrays.
    "
517,517,14,0.3456000089645386,"tree, binary, order, node, leave, right, follow, avl, search, traversal",49,0.04430000111460686,"int, result, return, term, many, num, body, function, heap, count",16,0.011599999852478504,"for, follow, time, complexity, true, give, statement, function, correct, run","['give', 'follow', 'binary', 'search', 'tree', 'tree', 'right', 'rotation', 'root', 'produce', 'result']","Given the following Binary Search Tree: (F) / \ (D) (G) / \ (B) (E) / \(A) (C)which tree does a right rotation rooted at F produce as a result?
 _(D)_ / \ (B) (F) / \ / \(A) (C) (E) (G)
   "
518,518,14,0.2386000007390976,"tree, binary, order, node, leave, right, follow, avl, search, traversal",39,0.21439999341964722,"node, sub, process, next, link, current, element, list, object, pointer",16,0.05869999900460243,"for, follow, time, complexity, true, give, statement, function, correct, run","['correct', 'algorithm', 'for', 'preorder', 'tree', 'traversal', 'process', 'current', 'node', 'process', 'node', 'leave', 'sub', 'tree', 'process', 'node', 'right', 'sub', 'tree']","What is the correct algorithm for preorder tree traversal?
  1) Process the current node2) Process the nodes in the left sub-tree3) Process the nodes in the right sub-tree
  "
519,519,56,0.25220000743865967,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",30,0.056299999356269836,"operation, middle, link, array, perform, advantage, make, item, front, either",41,0.04740000143647194,"runtime, part, course, http, answerquestion, mainphpcmd, answer, conference, target, must","['singly', 'link', 'list', 'operation', 'best', 'average', 'runtime', 'complexity', 'add']","In a singly linked list, which of these operations has the best average runtime complexity?
 add()
   "
520,520,16,0.3714999854564667,"for, follow, time, complexity, true, give, statement, function, correct, run",49,0.0551999993622303,"int, result, return, term, many, num, body, function, heap, count",56,0.011699999682605267,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['consider', 'follow', 'for', 'for', 'int', 'print', 'let', 'run', 'time', 'algorithm', 'follow', 'statement', 'false']","Consider the following algorithm:for (int i = 0; i < n; i++) { for (int j = 7; j < n2; j+2) { print i + j; }}Let f(n) be the run-time of this algorithm. Which one of the following statements is false?
 f(n) = (n4)
   "
521,521,1,0.39399999380111694,"measurement, select, precision, option, accuracy, value, close, mathematical, technique, difference",42,0.03610000014305115,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",16,0.020600000396370888,"for, follow, time, complexity, true, give, statement, function, correct, run","['difference', 'accuracy', 'precision', 'set', 'value', 'accuracy', 'close', 'real', 'value', 'measurement', 'while', 'precision', 'close', 'measurement']","What is the difference between the accuracy and the precision of a set of values?
Accuracy is how close to the real value your measurement is while precision is how close your measurements are to each other.
    "
522,522,29,0.3650999963283539,"find, number, step, item, average, many, index, table, insert, hash",16,0.04280000180006027,"for, follow, time, complexity, true, give, statement, function, correct, run",24,0.013500000350177288,"hash, element, table, bucket, use, function, close, key, store, insert","['equation', 'for', 'average', 'number', 'step', 'insert', 'find', 'item', 'open', 'hash', 'table', 'load']","What is the equation for the average number of steps to insert/find an item in an Open Hash Table? (where L = load)
1 + L/2
    "
523,523,29,0.24500000476837158,"find, number, step, item, average, many, index, table, insert, hash",24,0.15279999375343323,"hash, element, table, bucket, use, function, close, key, store, insert",2,0.041099999099969864,"require, comparison, estimate, nee, minimum, identify, aka, clockwise, complexityo, outside","['if', 'close', 'hash', 'table', 'use', 'linear_probe', 'load_factor', 'average', 'number', 'step', 'require', 'find', 'item']","If a closed hash table uses linear probing, and has a load factor of 0.75, what is the average number of steps required to find the item?
 2.5
   "
524,524,16,0.15240000188350677,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.01510000042617321,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",35,0.014399999752640724,"number, people, real, create, would, say, quickly, company, change, friend","['time', 'complexity', 'for']","What is the time complexity of the following?for (int i = 0; i < n; i++) { for (int j = 0; j < n/2; j++) { System.out.println(n); }}
   O(n2)
 "
525,525,42,0.2766000032424927,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",16,0.045899998396635056,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.011900000274181366,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['correct', 'upper', 'boundbig', 'exact', 'boundbig', 'omega', 'lower', 'bind']","Which is correct:
  Big-Oh = Upper boundBig-Theta = Exact boundBig-Omega = Lower bound
  "
526,526,6,0.09700000286102295,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly",55,0.0892999991774559,"datum, search, structure, remove, data, list, store, want, add, use",29,0.05559999868273735,"find, number, step, item, average, many, index, table, insert, hash","['if', 'implement', 'array', 'structure', 'parent', 'position', 'position', 'right', 'child']","If we are implementing a heap in an array structure and we have a parent node at position 7, what position is its right child?
     16
"
527,527,14,0.07569999992847443,"tree, binary, order, node, leave, right, follow, avl, search, traversal",56,0.01590000092983246,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",36,0.015799999237060547,"looping, letf, invent, queue, default, dump, bsta, legal, mergesort, worst_case","['letf', 'order']","Letf(n) = O(p(n)),g(n) = O(q(n)),h(n) = O(r(n))What is the order of f(n)g(n) + h(n) ?
 O(max{ p(n)q(n), r(n) })
   "
528,528,49,0.1225999966263771,"int, result, return, term, many, num, body, function, heap, count",14,0.08079999685287476,"tree, binary, order, node, leave, right, follow, avl, search, traversal",44,0.04919999837875366,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na","['show', 'result', 'heap', 'extract', 'large', 'item', 'follow', 'tree']","Show the resulting heap after extracting the largest item from the following tree 15 / \ 10 6 / \ / \ 5 8 3 4 / 1
  10 / \ 8 6 / \ / \5 1 3 4
  "
529,529,14,0.22450000047683716,"tree, binary, order, node, leave, right, follow, avl, search, traversal",24,0.09030000120401382,"hash, element, table, bucket, use, function, close, key, store, insert",16,0.05649999901652336,"for, follow, time, complexity, true, give, statement, function, correct, run","['for', 'follow', 'tree', 'traversal', 'method', 'would', 'use', 'form', 'equation', 'order']","For the following tree, what traversal method would be used to form the equation
   In-order
 "
530,530,24,0.27469998598098755,"hash, element, table, bucket, use, function, close, key, store, insert",39,0.1348000019788742,"node, sub, process, next, link, current, element, list, object, pointer",40,0.039500001817941666,"array, slow, problem, may, random, element, access, integer, anywhere, face","['idea', 'behind', 'open', 'hash', 'table', 'instead', 'store', 'value', 'directly', 'arrayeach', 'array', 'bucket', 'point', 'link', 'list', 'value']","What is the idea behind ""open"" hash tables?
 Instead of storing our values directly in array,each array bucket points to a linked list of values.
   "
531,531,25,0.10419999808073044,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional",35,0.05820000171661377,"number, people, real, create, would, say, quickly, company, change, friend",32,0.05260000005364418,"log, base, bottom, many, become, simplify, less, allow, level, multiple","['direct', 'graph', 'become', 'friend']","Which is not a directed graph?
 Becoming friends with Christof Lutteroth on Facebook.
   "
532,532,39,0.13989999890327454,"node, sub, process, next, link, current, element, list, object, pointer",56,0.055399999022483826,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",29,0.048900000751018524,"find, number, step, item, average, many, index, table, insert, hash","['idea', 'behind', 'quicksort', 'divide', 'conquer']","What is the idea behind quicksort?
  Divide and conquer.
  "
533,533,56,0.05999999865889549,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",4,0.01600000075995922,"looping, letf, invent, queue, default, dump, bsta, legal, mergesort, worst_case",5,0.01600000075995922,"looping, letf, invent, queue, default, dump, bsta, legal, mergesort, worst_case",['queue'],"What other ADT does the breadth first traversal algorithm use to navigate a graph?
  A Queue
  "
534,534,14,0.2989000082015991,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.07079999893903732,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.01140000019222498,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['give', 'follow', 'binary', 'tree', 'would', 'output', 'for', 'level', 'order', 'traversal']","Given the following binary tree: [""I""] / \ [""D""] [""O""] \ \ [""G""] [""Q""] \ [""U""] What would the output be for level-order traversal?
   I D O G Q U
 "
535,535,56,0.3190000057220459,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",40,0.07280000299215317,"array, slow, problem, may, random, element, access, integer, anywhere, face",16,0.04390000179409981,"for, follow, time, complexity, true, give, statement, function, correct, run","['give', 'follow', 'array', 'integer', 'many', 'iteration', 'take', 'sort', 'ascend', 'order', 'use', 'quick', 'sort']","Given the following array of integers: [14, 7, 2, 9, 13, 1, 15, 3], how many iterations does it take to sort (in ascending order) using quick sort?
     3
"
536,536,47,0.26330000162124634,"look, green, purple, red, orange, pink, blue, yellow, matter, searchin",14,0.06689999997615814,"tree, binary, order, node, leave, right, follow, avl, search, traversal",25,0.04230000078678131,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional","['base', 'graph', 'would', 'traversal', 'look', 'start', 'yellow', 'red', 'purple', 'green', 'pink', 'orange', 'blue']","Based on this graph how would a Breadth-First traversal look?
 Start - Yellow - Red - Purple - Green - Pink - Orange - Blue
   "
537,537,0,0.016699999570846558,"pass, point, start, book, page, short, similar, look, dijkstra, repeat",1,0.016699999570846558,"measurement, select, precision, option, accuracy, value, close, mathematical, technique, difference",2,0.016699999570846558,"require, comparison, estimate, nee, minimum, identify, aka, clockwise, complexityo, outside",[],"What is the time complexity of the heapsort algorithm?
  O(n log(n))
  "
538,538,29,0.23080000281333923,"find, number, step, item, average, many, index, table, insert, hash",24,0.11649999767541885,"hash, element, table, bucket, use, function, close, key, store, insert",2,0.04230000078678131,"require, comparison, estimate, nee, minimum, identify, aka, clockwise, complexityo, outside","['search', 'closed', 'hash', 'table', 'linear_probing', 'average', 'number', 'step', 'need', 'find', 'require', 'element']","When searching a closed hash table by linear probing with a load factor of 0.5, what is the average number of steps needed to find the required element?
  1.5
  "
539,539,14,0.2992999851703644,"tree, binary, order, node, leave, right, follow, avl, search, traversal",9,0.04569999873638153,"visit, look_like, car, company, manufacture, state, define, previously, hit, dead",56,0.012000000104308128,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['consider', 'follow', 'binary', 'search', 'order', 'traversal', 'order', 'node', 'visit']","Consider the following binary search treeWhen doing an in-order traversal, in what order will the nodes be visited?
 Jacqueline, James, Jenny, Jill, Katherine, Kenny, Martha
   "
540,540,14,0.11299999803304672,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.08060000091791153,"for, follow, time, complexity, true, give, statement, function, correct, run",28,0.05530000105500221,"child, add, non, cause, leaf, full, slow, sift, treechild, nodeleaf","['follow', 'true', 'tree', 'node', 'child']","Which of the following is true about trees
A node can have zero or more children
    "
541,541,56,0.3098999857902527,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",40,0.045099999755620956,"array, slow, problem, may, random, element, access, integer, anywhere, face",51,0.043800000101327896,"efficient, company, come, condition, stock, sortb, sortc, much, around, deal","['sort', 'good', 'efficient', 'performance', 'sort', 'array', 'sort', 'almost', 'sorted', 'insertion', 'sort']","Which sorting algorithm has the best (most efficient) performance when sorting an array which is sorted or almost sorted.
 Insertion Sort
   "
542,542,14,0.33709999918937683,"tree, binary, order, node, leave, right, follow, avl, search, traversal",9,0.06949999928474426,"visit, look_like, car, company, manufacture, state, define, previously, hit, dead",39,0.04859999939799309,"node, sub, process, next, link, current, element, list, object, pointer","['traversal', 'method', 'visit', 'level', 'node', 'leave', 'right', 'visit', 'node', 'next', 'level', 'level', 'order', 'traversal']","Which traversal method visits each levels node, from left to right, before visiting the nodes in the next level?
Level Order Traversal
    "
543,543,25,0.48249998688697815,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional",46,0.010099999606609344,"go, likely, stand, adventure, sven, configuration, must, boat, looping, amount",0,0.0,,"['difference', 'direct', 'undirected', 'graph', 'direct', 'graph', 'edge', 'go', 'vertex', 'specific', 'direction', 'however', 'undirecte', 'graph', 'vertex', 'bi', 'directional']","What is the difference between a directed and undirected graph?
With a directed graph, all edges go from one vertex to another in a specific direction. However, with an undirected graph, vertices are bi-directional.
    "
544,544,14,0.45910000801086426,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.04179999977350235,"for, follow, time, complexity, true, give, statement, function, correct, run",42,0.03280000016093254,"big, definition, bind, set, notation, omega, final, lecture, theta, exact","['follow', 'correct', 'definition', 'maxheap', 'maxheap', 'binary', 'tree', 'follow', 'rule', 'value', 'contain', 'node', 'always', 'great', 'equal', 'value', 'node', 'child', 'tree', 'complete', 'binary', 'tree']","Which of the following is the correct definition of a maxheap?
A maxheap is a binary tree which follows these rules:1. The value contained by a node is always GREATER THAN OR EQUAL TO the values of the node’s CHILDREN.2. The tree is a COMPLETE binary tree.
    "
545,545,42,0.2648000121116638,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",56,0.1525000035762787,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.01600000075995922,"for, follow, time, complexity, true, give, statement, function, correct, run","['big', 'big', 'theta', 'big', 'omega', 'notation', 'property', 'follow', 'good', 'describe', 'transitivity', 'if', 'also']","Big-O, Big-Theta and Big-Omega notation all have the property of transitivity,which of the following best describes transitivity?
 If A = B, and B = C, then also A = C, i.eIf f(n) = O(g(n)), and g(n) = O(h(n)), then f(n) = O(h(n))
   "
546,546,25,0.1356000006198883,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional",16,0.08110000193119049,"for, follow, time, complexity, true, give, statement, function, correct, run",55,0.056299999356269836,"datum, search, structure, remove, data, list, store, want, add, use","['if', 'store', 'graph', 'edge', 'vertex', 'asymptotic']","If you stored a graph with e edges and v vertices as an adjacency matrix, what is the asymptotic memory usage of this matrix?
  ?(v^2)
  "
547,547,14,0.1404999941587448,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.1200999990105629,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.11379999667406082,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['follow', 'time', 'complexity', 'logn', 'for', 'insertion', 'deletion', 'search', 'avl', 'tree']","Which of the following has a time complexity of O(logn) for insertion, deletion and search?
AVL Tree
    "
548,548,35,0.26919999718666077,"number, people, real, create, would, say, quickly, company, change, friend",49,0.07240000367164612,"int, result, return, term, many, num, body, function, heap, count",29,0.07209999859333038,"find, number, step, item, average, many, index, table, insert, hash","['difference', 'maxheap', 'quickly', 'retrieve', 'large', 'item', 'heap', 'whilst', 'minheap', 'quickly', 'retrieve', 'small', 'item', 'heap']","What is the difference between a minheap and a maxheap?
 Maxheaps can quickly retrieve the largest item from the heap whilst minheaps can quickly retrieve the smallest item from the heap.
   "
549,549,56,0.14900000393390656,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",44,0.11810000240802765,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na",42,0.07859999686479568,"big, definition, bind, set, notation, omega, final, lecture, theta, exact","['follow', 'sort', 'algorithm', 'suitable', 'use', 'input', 'consist', 'large', 'data', 'set', 'insertion']","Which of the following sorting algorithms are not suitable to be used when the input consists of large data sets?
 Insertion Sort
   "
550,550,14,0.21220000088214874,"tree, binary, order, node, leave, right, follow, avl, search, traversal",29,0.1145000010728836,"find, number, step, item, average, many, index, table, insert, hash",39,0.06400000303983688,"node, sub, process, next, link, current, element, list, object, pointer","['if', 'node', 'value', 'great', 'parent', 'value', 'insert', 'maxheap', 'next', 'swap', 'parent', 'node']","If a new node's value is greater than its parent's value when inserting into a maxheap what should you do next?
 Swap the new node with the parent node.
   "
551,551,14,0.22040000557899475,"tree, binary, order, node, leave, right, follow, avl, search, traversal",11,0.015399999916553497,"complete, digit, count, least, significant, digits, basis, position, share, counting",35,0.013399999588727951,"number, people, real, create, would, say, quickly, company, change, friend","['tree', 'example', 'complete', 'binary', 'tree']","What sort of tree is a heap an example of?
Complete Binary Tree
    "
552,552,30,0.17919999361038208,"operation, middle, link, array, perform, advantage, make, item, front, either",55,0.16220000386238098,"datum, search, structure, remove, data, list, store, want, add, use",14,0.0714000016450882,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['tree', 'computer', 'science', 'tree', 'link', 'list', 'base', 'datum', 'structure', 'use', 'make', 'decision', 'simplify', 'evaluation', 'mathematical', 'expression']","What is a tree in computer science?
  A tree is a linked list-based data structure that is used to make decisions and simplify the evaluation of mathematical expressions
  "
553,553,14,0.17839999496936798,"tree, binary, order, node, leave, right, follow, avl, search, traversal",29,0.06689999997615814,"find, number, step, item, average, many, index, table, insert, hash",35,0.04899999871850014,"number, people, real, create, would, say, quickly, company, change, friend","['avl', 'tree', 'create', 'insert', 'number', 'many', 'insertion', 'cause', 'current', 'tree', 'become', 'unbalanced']","An AVL tree is created by inserting the numbers 1, 3, 7, 2, 4, 6, and 5. How many of these insertions cause the current tree to become unbalanced?
  2
  "
554,554,29,0.29510000348091125,"find, number, step, item, average, many, index, table, insert, hash",24,0.09570000320672989,"hash, element, table, bucket, use, function, close, key, store, insert",14,0.010700000450015068,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['if', 'average', 'number', 'step', 'open', 'hashtable', 'total', 'number', 'bucket', 'intend', 'insert']","If Christof’s average number of steps in his open hashtable is 1.42 and the total number of buckets is 1000. What is the max no. of keys he intends to insert?
   840
 "
555,555,55,0.6963000297546387,"datum, search, structure, remove, data, list, store, want, add, use",14,0.04580000042915344,"tree, binary, order, node, leave, right, follow, avl, search, traversal",0,0.0,,"['however', 'always', 'uncertain', 'town', 'lie', 'hun', 'currently', 'restinghe', 'database', 'town', 'rank', 'gdp', 'per', 'capita', 'want', 'able', 'remove', 'town', 'burn', 'building', 'ground', 'add', 'town', 'refugee', 'camp', 'begin', 'form', 'able', 'quickly', 'tired', 'long', 'day', 'work', 'if', 'town', 'certain', 'find', 'able', 'find', 'town', 'similar', 'follow', 'datum', 'structure', 'would', 'appropriate', 'store', 'list', 'town', 'binary', 'search', 'tree']","Attila the Hun is wanting to ravage Europe. However he is always uncertain which town to lay waste to. The Huns are currently resting.He has a database of towns ranked by GDP per capita. He wants to be able to remove towns once he's burnt every building to the ground, and add towns as refugees camps begin to form. He should be able to do this quickly as he will be tired after a long day of work. If a town with a certain GDP is not found, he should be able to find a town with similar GDP.Which of the following data structures would be most appropriate to store the list of towns?
   Binary search tree
 "
556,556,16,0.2054000049829483,"for, follow, time, complexity, true, give, statement, function, correct, run",49,0.09149999916553497,"int, result, return, term, many, num, body, function, heap, count",47,0.04470000043511391,"look, green, purple, red, orange, pink, blue, yellow, matter, searchin","['time', 'follow', 'codepublic', 'void', 'look', 'int', 'int', 'for', 'for', 'for', 'int']","What is the time complexity of the following code?public void look(int a){ int ans[] = int[10]; int n = a; for(int i=0;i<n;i++){ for(int j=n;j>0;j--){ ans[i] = i*j; } } for(int i=0;i<n;i++){ System.out.println(ans[i*2]); }}
 O(n2)
   "
557,557,56,0.3278000056743622,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",14,0.013100000098347664,"tree, binary, order, node, leave, right, follow, avl, search, traversal",40,0.012000000104308128,"array, slow, problem, may, random, element, access, integer, anywhere, face","['follow', 'property', 'merge', 'sort', 'can', 'use', 'sort', 'link', 'list']","Which of the following is not a property of merge sort?
  Cannot be used to sort linked lists
  "
558,558,56,0.263700008392334,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",40,0.047200001776218414,"array, slow, problem, may, random, element, access, integer, anywhere, face",25,0.04580000042915344,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional","['fast', 'sort', 'method', 'complexity', 'sorting', 'array', 'already', 'sort', 'insertion', 'sort']","Name the fastest sort method and its complexity when sorting an array that has already been sorted.
   Insertion Sort
 "
559,559,14,0.3580000102519989,"tree, binary, order, node, leave, right, follow, avl, search, traversal",55,0.01119999960064888,"datum, search, structure, remove, data, list, store, want, add, use",39,0.011099999770522118,"node, sub, process, next, link, current, element, list, object, pointer","['order', 'describe', 'post', 'order', 'traversal', 'binary', 'search', 'tree', 'lefttraverse', 'node']","Which of these orders describes post-order traversal of a binary search tree?
 Traverse leftTraverse rightCurrent node
   "
560,560,55,0.5350000262260437,"datum, search, structure, remove, data, list, store, want, add, use",16,0.06719999760389328,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.028300000354647636,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['corbyn', 'want', 'build', 'perfect', 'sandcastle', 'need', 'weigh', 'grain', 'bucket', 'line', 'accord', 'weight', 'if', 'weight', 'precise', 'if', 'thing', 'want', 'grain', 'expose', 'solitude', 'for', 'long', 'time', 'come', 'firstgiven', 'room', 'control', 'for', 'want', 'sand', 'castle', 'die', 'sort', 'mergesort']","Corbyn wants to build the perfect sandcastle. To do this he needs to weigh each and every grain in his bucket, and line them up according to weight. If they are the same weight (precise to a nano-gram, if that's a thing) then he wants the grain that has been exposed to solitude for the longest time, to come first.Given that the room is controlled for wind, and that Jeremy wants to finish the sand castle before he dies, which sorting method should he use?
     Mergesort
"
561,561,24,0.18549999594688416,"hash, element, table, bucket, use, function, close, key, store, insert",55,0.12030000239610672,"datum, search, structure, remove, data, list, store, want, add, use",16,0.06449999660253525,"for, follow, time, complexity, true, give, statement, function, correct, run","['for', 'structure', 'hash', 'table', 'follow', 'recommend', 'enough', 'memory', 'space', 'change', 'pointer', 'store', 'array', 'store', 'link', 'list', 'value', 'instead', 'directly', 'value']","For the Algorithm and data structure of hash tables, which of the following is recommended?
  With enough memory space, we can change the pointers of storing array by storing a linked list of values instead of a directly value.
  "
562,562,55,0.38999998569488525,"datum, search, structure, remove, data, list, store, want, add, use",14,0.12520000338554382,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.0560000017285347,"for, follow, time, complexity, true, give, statement, function, correct, run","['interpolation', 'search', 'search', 'involve', 'search', 'area', 'datum', 'sort', 'roughly', 'distribute', 'algorithm', 'calculate', 'start', 'position', 'start', 'if', 'value', 'higher', 'low', 'middle', 'if', 'low', 'ignore', 'right', 'search', 'leave', 'side', 'if', 'high', 'middle', 'ignore', 'leave', 'side', 'search', 'right', 'side', 'value', 'find']","What is Interpolation search?
 A search which involves having the search area, knowing how the data is sorted and roughly distributed. The algorithm calculates the start position to start from if the value is higher or lower than the middle. If it is lower it ignores everything on the right and searches the left side again. if its higher that the middle it ignores the left side and searches the right side again, until the value is found.
   "
563,563,16,0.13940000534057617,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.13379999995231628,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",3,0.10180000215768814,"case, fastest, ofbubble, itsb, distinct, description, fit, stableb, performance, nearly","['follow', 'statement', 'false', 'heap', 'sort', 'stable', 'log', 'complexity', 'for', 'itsb', 'case', 'average', 'case']","Which of the following statements is false?
 The heap sort is stable and has ?(n(log(n))) complexity for itsbest case, worst case and average case.
   "
564,564,29,0.22439999878406525,"find, number, step, item, average, many, index, table, insert, hash",16,0.1324000060558319,"for, follow, time, complexity, true, give, statement, function, correct, run",6,0.04050000011920929,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly","['many', 'function', 'value', 'total', 'for', 'void', 'total', 'int', 'total', 'for', 'total', 'total']","How many elementary operations does this function have and what is the value of total after the for loop has finished?public void total() { int x = 4; int total = 0; for (int i=0; i<x-1; i++) { total = total + i; }}
   elementary operations: 3+4xtotal=3
 "
565,565,16,0.3682999908924103,"for, follow, time, complexity, true, give, statement, function, correct, run",25,0.04100000113248825,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional",49,0.011599999852478504,"int, result, return, term, many, num, body, function, heap, count","['complexity', 'follow', 'give', 'method', 'constant', 'for', 'int', 'for', 'for', 'false', 'for', 'for']","What is the complexity of the following, given that the methods checkPassword, hackProfessor and openMozilla Firefox are of constant complexity?int n = password.length(); int findPassword = 0; int x=1;for( int j = 0; j < n; j++){ int x=x*10;}for( int i = 0; i < x; i++;){ for(password.checkPassword(findPassword) == false) findPassword++;}}password.hackProfessor(findPassword);for (int i2 = 1; i2 <= n; i2++) { for(int j2 = 1; j2 <= n; j2++) { openMozillaFirefox(https://www.youtube.com/watch?v=oavMtUWDBTM); }}
   O(10^n)
 "
566,566,56,0.1704999953508377,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.09000000357627869,"for, follow, time, complexity, true, give, statement, function, correct, run",55,0.07020000368356705,"datum, search, structure, remove, data, list, store, want, add, use","['for', 'list', 'size', 'would', 'average', 'search', 'time', 'for', 'element', 'list', 'use', 'binary', 'search']","For a list of size n=30,000what would be the average search time for an element in the list using binary search?
   14.87
 "
567,567,56,0.2070000022649765,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",40,0.1940000057220459,"array, slow, problem, may, random, element, access, integer, anywhere, face",39,0.08839999884366989,"node, sub, process, next, link, current, element, list, object, pointer","['take', 'follow', 'step', 'select', 'arbitrary', 'pivot', 'element', 'array', 'typically', 'first', 'element', 'array', 'if', 'array', 'contain', 'element', 'returnmove', 'element', 'leave', 'array', 'element', 'repeat', 'process', 'leave', 'sub', 'array', 'conquer', 'right', 'sub', 'sort', 'algorithm', 'describe', 'average', 'time', 'complexity', 'quick', 'sort', 'nlog']","Take the following steps:Select an arbitrary “pivot” element P from the array (typically the first element in the array).If the array contains only 0 or 1 element, return.Move all elements that are = P to the left of the array and all elements > P to the right.Recursively repeat this process on the left sub-array Conquer and then the right sub-array.What sorting algorithm do they describe and what is it's average time complexity?
  Quick sort, Nlog(N)
  "
568,568,29,0.06379999965429306,"find, number, step, item, average, many, index, table, insert, hash",24,0.05689999833703041,"hash, element, table, bucket, use, function, close, key, store, insert",40,0.016300000250339508,"array, slow, problem, may, random, element, access, integer, anywhere, face","['represent', 'standard']","What does this formula calculate?And what does represent?
  Standard DeviationElements
  "
569,569,16,0.21050000190734863,"for, follow, time, complexity, true, give, statement, function, correct, run",32,0.1446000039577484,"log, base, bottom, many, become, simplify, less, allow, level, multiple",44,0.04410000145435333,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na","['give', 'function', 'log', 'log', 'time', 'complexity', 'describe', 'for', 'sufficiently', 'large', 'log']","Given the function f(n) = 2n2+ 2n2log(n) + 200n(2/3) + log(n2), how can the time complexity be described for a sufficiently large n?
     O(n2log(n))
"
570,570,14,0.2556999921798706,"tree, binary, order, node, leave, right, follow, avl, search, traversal",24,0.07100000232458115,"hash, element, table, bucket, use, function, close, key, store, insert",13,0.0478999987244606,"second, take, record, long, run, expect, likely, question, information, implementation","['if', 'insert', 'anemptyavl', 'tree', 'would', 'expect', 'balanced', 'avl', 'treeto', 'look_like']","If we were to insert 9, 11, 7, 4, 16, 1, 8 into anemptyAVL Tree, 9 / \ 7 11 / \ 4 16 / 1 what would we expect the balanced AVL treeto look like?
9 / \ 4 11 / \ \1 7 16 \ 8
    "
571,571,14,0.20419999957084656,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.08969999849796295,"for, follow, time, complexity, true, give, statement, function, correct, run",55,0.013500000350177288,"datum, search, structure, remove, data, list, store, want, add, use","['statement', 'false', 'binary', 'search', 'tree', 'must', 'balanced']","Which statement is false?
  A binary search tree must be balanced.
  "
572,572,56,0.27149999141693115,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",42,0.04839999973773956,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",35,0.012299999594688416,"number, people, real, create, would, say, quickly, company, change, friend","['follow', 'set', 'sort', 'algorithm', 'list', 'implement', 'conquer', 'heapsort']","Which of the following sets of sorting algorithms lists all that implement the divide and conquer approach?
Mergesort, Quicksort and Heapsort
    "
573,573,56,0.13689999282360077,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",24,0.05719999969005585,"hash, element, table, bucket, use, function, close, key, store, insert",42,0.017999999225139618,"big, definition, bind, set, notation, omega, final, lecture, theta, exact","['property', 'quicksort', 'pivot', 'element']","Which is not a property of quicksort?
     The pivot should be the first element.
"
574,574,14,0.27549999952316284,"tree, binary, order, node, leave, right, follow, avl, search, traversal",28,0.14480000734329224,"child, add, non, cause, leaf, full, slow, sift, treechild, nodeleaf",24,0.09449999779462814,"hash, element, table, bucket, use, function, close, key, store, insert","['follow', 'avl', 'tree', 'element', 'add', 'element', 'add', 'element', 'root', 'root', 'child', 'root', 'root', 'leave', 'child', 'root', 'right', 'child']","The following is an AVL tree. The element 17 is added, and the element 20 is added. Which elements are the root, and the roots children?
   The root: 18The roots left child: 16The roots right child: 21
 "
575,575,24,0.20679999887943268,"hash, element, table, bucket, use, function, close, key, store, insert",55,0.14100000262260437,"datum, search, structure, remove, data, list, store, want, add, use",29,0.04259999841451645,"find, number, step, item, average, many, index, table, insert, hash","['remove', 'item', 'close', 'linear_probing', 'would', 'create', 'empty', 'slot', 'would', 'abort', 'search', 'prematurely']","Why can we not remove items from a closed hashtable with linear probing?
 It would create an empty slot and would abort search prematurely.
   "
576,576,38,0.14229999482631683,"small, motorway, occur, strategy, city, major, divisible, scenario, repeatedly, shelf",55,0.11729999631643295,"datum, search, structure, remove, data, list, store, want, add, use",14,0.06390000134706497,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['say', 'node', 'base', 'major', 'city', 'edge', 'motorway', 'want', 'get', 'datum', 'for', 'use', 'motorway', 'get', 'datum', 'for', 'strategy', 'traversal']","Say we have a graph where the nodes are based on major cities in England and the edges are the major motorways. We want to get data for where we can get using only 1 motorway, then get data for 2 motorways, 3 motorways and so on. Which traversal strategy should we use?
 Breadth-first traversal
   "
577,577,55,0.46209999918937683,"datum, search, structure, remove, data, list, store, want, add, use",25,0.0568000003695488,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional",52,0.03020000085234642,"show, factor, prime, distribute, uniformly, distribution, improve, increase, reduce, advice","['say', 'want', 'store', 'data', 'graph', 'datum', 'show', 'factory', 'produce', 'certain', 'resource', 'supply', 'factory', 'factory', 'deliver', 'resource', 'approximately', 'factory', 'shall', 'store', 'graph', 'array', 'link', 'list']","Say we want to store data in a graph. The data shows which factories, that produce certain resources, supply to some of the other factories. There are 100 factories, each of which deliver resources to approximately 15 other factories each. How shall we store the graph?
  Use an array of linked lists
  "
578,578,14,0.17319999635219574,"tree, binary, order, node, leave, right, follow, avl, search, traversal",28,0.09619999676942825,"child, add, non, cause, leaf, full, slow, sift, treechild, nodeleaf",24,0.06459999829530716,"hash, element, table, bucket, use, function, close, key, store, insert","['add', 'new', 'node', 'non', 'empty', 'heap', 'initially', 'insert', 'node', 'sift', 'left', 'bottom', 'slot']","When adding a new node to a non-empty heap, were do we initially insert the node before ""sifting up""?
     The left-most bottom-most slot.
"
579,579,29,0.09049999713897705,"find, number, step, item, average, many, index, table, insert, hash",28,0.051600001752376556,"child, add, non, cause, leaf, full, slow, sift, treechild, nodeleaf",40,0.050999999046325684,"array, slow, problem, may, random, element, access, integer, anywhere, face","['say', 'store', 'index', 'index', 'array', 'child', 'node']","Say we have a heap, which is stored in an array, and a node at index n. What are the indexes in the array of the children of this node?
  2n+1, 2n+2
  "
580,580,53,0.43290001153945923,"mean, new, mistake, county, send, teach, late, limited, incorrectly, incredibly",6,0.053599998354911804,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly",56,0.050700001418590546,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['pole', 'for', 'election', 'however', 'mistake', 'mean', 'send', 'alphabetical', 'order', 'county', 'name', 'certain', 'county', 'send', 'datum', 'early', 'late', 'mean', 'list', 'order', 'incorrectly', 'position', 'error', 'term', 'job', 'line', 'little', 'time', 'fix', 'mistake', 'give', 'reading', 'skill', 'limited', 'computer', 'incredibly', 'slow', 'sort', 'method']","The poles for the 2080 US election are in. However there has been a mistake: they were meant to be sent in by alphabetical ordering of the 3242 county names, but certain counties sent their data in early or late. This has meant that the list is ordered incorrectly, with a positioning error term of at most 4. Jim, whose job is on the line, has very little time to fix the mistake. Given that his reading skills are limited, and his computer is incredibly slow, which sorting method should he use.
   Bubblesort
 "
581,581,14,0.1770000010728836,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.015399999916553497,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.014499999582767487,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['follow', 'tree', 'legal', 'bsta']","Which of the following tree's is a legal BST?a) b) c) 1 3 3 / \ / \ / 2 3 1 2 2 / / /4 5 1
  c
  "
582,582,56,0.1737000048160553,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",40,0.10899999737739563,"array, slow, problem, may, random, element, access, integer, anywhere, face",41,0.08860000222921371,"runtime, part, course, http, answerquestion, mainphpcmd, answer, conference, target, must","['array', 'list', 'follow', 'statement', 'array', 'list', 'falsenote', 'thearray', 'list', 'unsorte', 'best', 'runtime', 'complexity', 'for', 'find', 'element']","Array List:Which of the following statements about Array Lists is false?Note: assume theArray List is unsorted.
  The best and worst case runtime complexity for finding an element is the same.
  "
583,583,14,0.18359999358654022,"tree, binary, order, node, leave, right, follow, avl, search, traversal",24,0.014100000262260437,"hash, element, table, bucket, use, function, close, key, store, insert",19,0.013899999670684338,"pile, box, gift, remain, police, back, realise, pole, ask, commercial","['put', 'binary', 'tree', 'intopreorder']","put the binary tree intopreorder traversal? 8 / \ / \ 6 10 / \ / \ 4 7 9 12
 8,6,4,7,10,9,12
   "
584,584,56,0.10909999907016754,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.017799999564886093,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.01510000042617321,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['complexity', 'insertion']","In the worst case, what is the complexity of insertion sort?
 O(n^2)
   "
585,585,56,0.10859999805688858,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.018300000578165054,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.01510000042617321,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['complexity', 'insertion']","In the worst case, what is the complexity of insertion sort?
 O(n^2)
   "
586,586,14,0.6317999958992004,"tree, binary, order, node, leave, right, follow, avl, search, traversal",3,0.024800000712275505,"case, fastest, ofbubble, itsb, distinct, description, fit, stableb, performance, nearly",0,0.0,,"['follow', 'binary', 'search', 'tree', 'bst', 'insert', 'node', 'try', 'maintain', 'valid', 'avl', 'tree', 'case', 'node', 'if', 'tree', 'unbalanced', 'type', 'rotation', 'necessary', 'balance', 'tree', 'node', 'unbalanced', 'leave', 'right', 'rotation', 'leave', 'rotation', 'node', 'follow', 'right', 'rotation', 'node']","The following is a binary search tree (BST) where we have just inserted the node '13':We are trying to maintain a valid AVL tree. In this case, at what node (if any) is this tree unbalanced and what type of rotation(s) are necessary to balance the tree?
 Node '14' is unbalanced. Left-right rotation (i.e. a left rotation about node '12' followed by a right rotation about node '14').
   "
587,587,14,0.3546000123023987,"tree, binary, order, node, leave, right, follow, avl, search, traversal",39,0.044199999421834946,"node, sub, process, next, link, current, element, list, object, pointer",42,0.041200000792741776,"big, definition, bind, set, notation, omega, final, lecture, theta, exact","['definition', 'avl', 'tree', 'binary', 'search', 'tree', 'height', 'leave', 'right', 'sub', 'tree', 'node', 'differ']","What is the definition of an AVL tree?
   A binary search tree in which the height of the left and right sub-trees of each node differ by at most one.
 "
588,588,42,0.10620000213384628,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",16,0.05790000036358833,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.016899999231100082,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['exact', 'bind', 'complexity']","What is(n)?
   The exact bound of complexity.
 "
589,589,56,0.20600000023841858,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.0877000018954277,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.012299999594688416,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['follow', 'statement', 'false', 'selection', 'sort', 'astable', 'sort']","Which of the following statements is false?
   Selection Sort is astable sort
 "
590,590,25,0.18709999322891235,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional",35,0.055799998342990875,"number, people, real, create, would, say, quickly, company, change, friend",50,0.03959999978542328,"lot, waste, disadvantage, looping, verticesfew, suitable, letf, invent, memory, say","['would', 'suitable', 'graph', 'lot', 'edge', 'verticesfew', 'vertex']","Where would it be most suitable to use an adjacency matrix?
  A graph with:Lots of Edges between verticesFew Vertices (<10000)
  "
591,591,16,0.15230000019073486,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.01489999983459711,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",14,0.014600000344216824,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['follow', 'statement', 'true']","Which of the following statements are true?
   B and C.
 "
592,592,16,0.1347000002861023,"for, follow, time, complexity, true, give, statement, function, correct, run",52,0.13130000233650208,"show, factor, prime, distribute, uniformly, distribution, improve, increase, reduce, advice",56,0.012900000438094139,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['for', 'follow', 'true', 'doubling', 'increase', 'factor']","For ?(n2), which of the following is true.
 Doubling n increases T by factor 4
   "
593,593,56,0.3452000021934509,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",40,0.04390000179409981,"array, slow, problem, may, random, element, access, integer, anywhere, face",29,0.01119999960064888,"find, number, step, item, average, many, index, table, insert, hash","['many', 'iteration', 'take', 'sort', 'follow', 'array', 'ascend', 'order', 'use', 'selection', 'sort']","How many iterations will it take to sort the following array into ascending order using a selection sort?2,5,1,3,4,6
   4
 "
594,594,30,0.1673000007867813,"operation, middle, link, array, perform, advantage, make, item, front, either",56,0.15690000355243683,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",55,0.08259999752044678,"datum, search, structure, remove, data, list, store, want, add, use","['follow', 'statement', 'link', 'list', 'array', 'false', 'remove', 'item', 'middle', 'array', 'faster', 'remove', 'item', 'middle', 'link', 'list']","Which of the following statements about linked lists and arrays is false?
  Removing an item from the middle of an array is faster than removing an item from the middle of a linked list
  "
595,595,14,0.08399999886751175,"tree, binary, order, node, leave, right, follow, avl, search, traversal",28,0.0754999965429306,"child, add, non, cause, leaf, full, slow, sift, treechild, nodeleaf",20,0.0575999990105629,"call, system, avoid, determine, matrix, engine, bugle, pagerank, inthis, involve","['tree', 'child', 'call', 'leaf']","A tree node which has zero children is called ___?
  a leaf
  "
596,596,6,0.2572000026702881,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly",16,0.17030000686645508,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.04089999943971634,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['give', 'follow', 'incomplete', 'code', 'for', 'selection', 'code', 'must', 'go', 'place', 'mark', 'string', 'for', 'for', 'if']","Given the following incomplete Java code for selection sort, which code must go at the place marked with X?public static void selectionSort(String[] array) { for(int i = 0; i < array.length; i ++) { int minimumIndex = i; X }}
 for(int j = i + 1; j < array.length; j ++) { if(array[j].compareTo(array[minimumIndex]) < 0) { minimumIndex = j; } String temporaryValue = array[i]; array[i] = array[minimumIndex]; array[minimumIndex] = temporaryValue;}
   "
597,597,16,0.15649999678134918,"for, follow, time, complexity, true, give, statement, function, correct, run",40,0.12139999866485596,"array, slow, problem, may, random, element, access, integer, anywhere, face",56,0.09560000151395798,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['follow', 'sort', 'algorithm', 'fastest', 'for', 'input', 'array', 'integer', 'int', 'array', 'fact', 'already', 'sort', 'void', 'int', 'array', 'for', 'while']","Which of the following sorting algorithms is the fastest for an input array of integers, int[] array, which in fact is already sorted?
void A(int[] array) { for (int i=2; i<=array.length; i++){ int j = array[i-1]; int k = i-2; while (k >= 0 && j < array[k]){ array[k+1] = array[k]; k--; } array[k+1] = j; }}
    "
598,598,14,0.2565999925136566,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.08619999885559082,"for, follow, time, complexity, true, give, statement, function, correct, run",1,0.015300000086426735,"measurement, select, precision, option, accuracy, value, close, mathematical, technique, difference","['follow', 'option', 'correct', 'output', 'for', 'post', 'order', 'traversal', 'tree']","Which of the following options is the correct output for the post-order traversal of this tree?
 4, 9, 8, 18, 14, 12, 10
   "
599,599,14,0.2718999981880188,"tree, binary, order, node, leave, right, follow, avl, search, traversal",39,0.2222999930381775,"node, sub, process, next, link, current, element, list, object, pointer",56,0.034699998795986176,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['follow', 'best', 'describe', 'preorder', 'traversal', 'tree', 'process', 'current', 'node', 'process', 'node', 'leave', 'sub', 'tree', 'process', 'node', 'right', 'sub', 'tree']","Which of the following best describes preorder traversal of a tree?
 1. Process the current node2. Process the nodes in the left sub-tree3. Process the nodes in the right sub-tree
   "
600,600,24,0.31619998812675476,"hash, element, table, bucket, use, function, close, key, store, insert",55,0.06419999897480011,"datum, search, structure, remove, data, list, store, want, add, use",40,0.04179999977350235,"array, slow, problem, may, random, element, access, integer, anywhere, face","['allow', 'remove', 'element', 'close', 'hash', 'table', 'use', 'linear_probe', 'may', 'element', 'hash', 'value', 'come', 'give', 'element']","Is it allowed to remove elements from a closed hash-table that uses linear probing, and why?
   No, because there may be other elements with the same hash value coming after the given element.
 "
601,601,39,0.41760000586509705,"node, sub, process, next, link, current, element, list, object, pointer",24,0.04399999976158142,"hash, element, table, bucket, use, function, close, key, store, insert",6,0.03669999912381172,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly","['boolean', 'expression', 'indicate', 'whether', 'object', 'link', 'list', 'node', 'use', 'code', 'problem', 'sheet', 'object', 'element', 'listnode', 'next', 'element', 'next', 'melement']","Which boolean expression indicates whether the objects in two linked list nodes (l and m) are the same?[using the code from the problem sheet:class ListNode { Object element; ListNode next = null; ListNode(Object e, ListNode n) { element = e; next = n; }}]
   l.element.equals(m.element)
 "
602,602,56,0.32350000739097595,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",24,0.04919999837875366,"hash, element, table, bucket, use, function, close, key, store, insert",29,0.041999999433755875,"find, number, step, item, average, many, index, table, insert, hash","['list', 'number', 'sort', 'ascend', 'order', 'use', 'selection', 'sortwhat', 'list', 'look_like', 'third', 'swap']","The list of numbers4, 3, 5, 2, 7, 1 is sorted into ascending order using selection sort.What will the list look like after the third swap?
     1, 2, 3, 5, 7, 4
"
603,603,11,0.12800000607967377,"complete, digit, count, least, significant, digits, basis, position, share, counting",56,0.09459999948740005,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",29,0.0877000018954277,"find, number, step, item, average, many, index, table, insert, hash","['runtime', 'use', 'count', 'sort', 'for', 'sort', 'number', 'maximum', 'digits', 'basis', 'base', 'digit']","What is the runtime when using Counting Sort for sorting n numbers with maximum d digits with basis k based on their digits?
  ?(n)
  "
604,604,56,0.13459999859333038,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",24,0.0892999991774559,"hash, element, table, bucket, use, function, close, key, store, insert",2,0.07959999889135361,"require, comparison, estimate, nee, minimum, identify, aka, clockwise, complexityo, outside","['give', 'array', 'element', 'many', 'iteration', 'sort', 'would', 'require', 'nee', 'move']","Given an array of elements 5, 3, 6, 2, 1, 4, 7, how many iterations of h-sorting with h=2 would be required before we need to move on to h=1?
  3
  "
605,605,29,0.27970001101493835,"find, number, step, item, average, many, index, table, insert, hash",14,0.1712999939918518,"tree, binary, order, node, leave, right, follow, avl, search, traversal",56,0.10830000042915344,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['follow', 'statement', 'use', 'classical', 'binary', 'tree', 'node', 'link', 'implement', 'hard', 'find', 'node', 'parent', 'reheapification', 'swap', 'hard', 'find', 'bottom', 'leave', 'extraction', 'hard', 'find', 'bottom', 'right', 'open', 'spot', 'insert', 'new', 'node', 'insertion']","Which of the following statements is/are true?When using a classical binary tree node with links to implement a heap:1) It is hard to find a node's parents to do reheapification swaps2) It is hard to find the bottom-most, left-most node during extraction3) It is hard to find the bottom-most, right-most open spot to insert a new node during insertion
Only 1
    "
606,606,14,0.31790000200271606,"tree, binary, order, node, leave, right, follow, avl, search, traversal",39,0.05079999938607216,"node, sub, process, next, link, current, element, list, object, pointer",16,0.011599999852478504,"for, follow, time, complexity, true, give, statement, function, correct, run","['output', 'pre', 'order', 'traversal', 'follow', 'tree', 'if', 'node', 'process', 'print']","What will be the output of a pre-order traversal of the following tree if each node processed is printed out? 10 / \ 4 12 / \ \ 2 6 16
  10, 4, 2, 6, 12, 16
  "
607,607,56,0.23569999635219574,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",29,0.12060000002384186,"find, number, step, item, average, many, index, table, insert, hash",32,0.04470000043511391,"log, base, bottom, many, become, simplify, less, allow, level, multiple","['sort', 'algorithm', 'unstable', 'log', 'average', 'number', 'step', 'sort', 'item', 'quicksort', 'heapsort']","Which two sorting algorithms are UNSTABLE AND have?(n log2n)as the average number of steps when sorting n items?
 Quicksort and Heapsort
   "
608,608,16,0.09309999644756317,"for, follow, time, complexity, true, give, statement, function, correct, run",6,0.09149999916553497,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly",30,0.05400000140070915,"operation, middle, link, array, perform, advantage, make, item, front, either","['many', 'operation', 'follow', 'code', 'for', 'var']","How many operations does the following code take?var x = 0;for(var i = 0; i < 2; i++) { x++;}
 11
   "
609,609,16,0.09309999644756317,"for, follow, time, complexity, true, give, statement, function, correct, run",6,0.09149999916553497,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly",30,0.05400000140070915,"operation, middle, link, array, perform, advantage, make, item, front, either","['many', 'operation', 'follow', 'code', 'for', 'var']","How many operations does the following code take?var x = 0;for(var i = 0; i < 2; i++) { x++;}
 11
   "
610,610,56,0.3540000021457672,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",35,0.11479999870061874,"number, people, real, create, would, say, quickly, company, change, friend",16,0.06589999794960022,"for, follow, time, complexity, true, give, statement, function, correct, run","['designing', 'software', 'for', 'sort', 'array', 'number', 'varying', 'size', 'want', 'know', 'sort', 'base', 'time', 'think', 'quicksort', 'good', 'however', 'think', 'selection', 'sort', 'would', 'faster', 'correct', 'quicksort', 'well', 'average', 'time', 'complexity']","Jamal is designing software for sorting arrays of numbers of varying sizes. He wants to know which sorting algorithm he should use, based on the algorithm's average time complexity.Sarah thinks that Quicksort will be the best algorithm, however Albert thinks Selection-Sort would be faster. Who is correct?
Sarah is correct, i.e. Quicksort has a better average time complexity.
    "
611,611,25,0.22759999334812164,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional",16,0.11909999698400497,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.011699999682605267,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['statement', 'undirected', 'graph', 'true', 'undirecte', 'graphs', 'edge', 'follow', 'direction']","Which of these statements about an undirected graph is true?
  Undirected graphs' edges can be followed in either direction
  "
612,612,56,0.11490000039339066,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.052400000393390656,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.014399999752640724,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['time', 'complexity', 'insertion']","What is the worst case time complexity of insertion sort?
  
  "
613,613,56,0.2524000108242035,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",13,0.05480000004172325,"second, take, record, long, run, expect, likely, question, information, implementation",29,0.04749999940395355,"find, number, step, item, average, many, index, table, insert, hash","['list', 'number', 'would', 'quicksort', 'take', 'long', 'sort', 'ascend', 'order']","Which list of numbers would the quicksort algorithm take the longest to sort into ascending order?
  (2, 2, 2, 2, 2, 2, 2, 2, 2, 2)
  "
614,614,55,0.17249999940395355,"datum, search, structure, remove, data, list, store, want, add, use",56,0.15119999647140503,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",54,0.04520000144839287,"like, could, treelook, book, alphabetical, alphabetically, back, system, wherever, home","['main', 'benefit', 'use', 'link', 'list', 'datum', 'structure', 'like', 'array', 'list', 'fast', 'insertion', 'removal']","What is the main benefit of using a linked list over another data structure like an array list?
  fast insertion and removal
  "
615,615,14,0.349700003862381,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.07320000231266022,"for, follow, time, complexity, true, give, statement, function, correct, run",53,0.01510000042617321,"mean, new, mistake, county, send, teach, late, limited, incorrectly, incredibly","['mean', 'for', 'binary', 'tree', 'perfectly', 'balance', 'for', 'node', 'number', 'node', 'leave', 'right', 'differ']","What does it mean for a Binary Tree to be 'perfectly balanced'?
 For each node, the number of nodes in its left and right subtrees differ by at most one.
   "
616,616,14,0.13940000534057617,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.09629999846220016,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.014700000174343586,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['time', 'complexity', 'traverse', 'binary', 'tree']","What is the 'Big-Oh' time complexity of traversing a binary tree?
   O(n)
 "
617,617,56,0.21240000426769257,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",32,0.053199999034404755,"log, base, bottom, many, become, simplify, less, allow, level, multiple",16,0.014999999664723873,"for, follow, time, complexity, true, give, statement, function, correct, run","['sort', 'average', 'time', 'complexity', 'log', 'merge']","Which of these sorts has the average time complexity of T(n log(n))
Merge Sort
    "
618,618,56,0.21240000426769257,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",32,0.053199999034404755,"log, base, bottom, many, become, simplify, less, allow, level, multiple",16,0.014999999664723873,"for, follow, time, complexity, true, give, statement, function, correct, run","['sort', 'average', 'time', 'complexity', 'log', 'merge']","Which of these sorts has the average time complexity of T(n log(n))
Merge Sort
    "
619,619,56,0.22020000219345093,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",55,0.10109999775886536,"datum, search, structure, remove, data, list, store, want, add, use",16,0.012400000356137753,"for, follow, time, complexity, true, give, statement, function, correct, run","['datum', 'structure', 'fast', 'average', 'insertion', 'time', 'link', 'list']","Which data structure has the fastest average insertion time?
Linked List
    "
620,620,14,0.12639999389648438,"tree, binary, order, node, leave, right, follow, avl, search, traversal",8,0.08919999748468399,"apart, dictating, natural, areedge, whereis, matrix, looping, happen, letf, arcs",25,0.054999999701976776,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional","['give', 'output', 'dictating', 'node', 'edge', 'apart']","Given the matrix:0 1 0 00 0 1 00 0 0 10 0 0 0Which matrix is this the output dictating nodes which are three edges apart?
  0 0 0 10 0 0 00 0 0 00 0 0 0
  "
621,621,14,0.43790000677108765,"tree, binary, order, node, leave, right, follow, avl, search, traversal",39,0.040300000458955765,"node, sub, process, next, link, current, element, list, object, pointer",0,0.0,,"['additional', 'property', 'must', 'avl', 'tree', 'generic', 'binary', 'search', 'tree', 'height', 'leave', 'right', 'sub', 'tree', 'node', 'differ']","What additional property must an AVL tree have over a generic Binary Search Tree?
  The height of the left and right sub-trees of any node differ by at most 1
  "
622,622,14,0.18240000307559967,"tree, binary, order, node, leave, right, follow, avl, search, traversal",9,0.05429999902844429,"visit, look_like, car, company, manufacture, state, define, previously, hit, dead",24,0.013500000350177288,"hash, element, table, bucket, use, function, close, key, store, insert","['leave', 'right', 'visit', 'post', 'order']","What type of traversal is Left-Right-Visit?
  Post-Order
  "
623,623,29,0.1949000060558319,"find, number, step, item, average, many, index, table, insert, hash",55,0.18960000574588776,"datum, search, structure, remove, data, list, store, want, add, use",24,0.0940999984741211,"hash, element, table, bucket, use, function, close, key, store, insert","['recommend', 'closed', 'linear_probing', 'if', 'want', 'remove', 'item', 'if', 'item', 'remove', 'hash', 'value', 'come', 'hashtable', 'if', 'next', 'search', 'for', 'item', 'find']","Why is it not recommended to use a 'closed hashtable with linear probing' if you want to remove items?
 If the item we remove has the same hash value coming after it in the hashtable, then if and when we next search for this item we will not find it.
   "
624,624,56,0.11020000278949738,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",14,0.016300000250339508,"tree, binary, order, node, leave, right, follow, avl, search, traversal",55,0.015200000256299973,"datum, search, structure, remove, data, list, store, want, add, use","['type', 'sort']","Which type(s) of sorting use recursion?i. Mergesort.ii. Quicksort.iii. Heapsort.
  i and ii.
  "
625,625,24,0.37450000643730164,"hash, element, table, bucket, use, function, close, key, store, insert",29,0.24629999697208405,"find, number, step, item, average, many, index, table, insert, hash",0,0.0,,"['consider', 'hash', 'table', 'close', 'hash', 'table', 'bucket', 'empty', 'open', 'hash', 'table', 'bucket', 'key', 'insert', 'ratio', 'average', 'number', 'step', 'take', 'insert', 'find', 'item', 'open', 'hash', 'table', 'respect', 'close', 'hash', 'table']","Consider two hash tables: a closed hash table with 750 buckets, 235 of which are empty; and an open hash table with 500 buckets and 275 keys inserted. What is the ratio of the average number of steps it will take to insert/find an item in the open hash table with respect to the closed hash table?
0.603
    "
626,626,14,0.27709999680519104,"tree, binary, order, node, leave, right, follow, avl, search, traversal",28,0.07810000330209732,"child, add, non, cause, leaf, full, slow, sift, treechild, nodeleaf",40,0.04399999976158142,"array, slow, problem, may, random, element, access, integer, anywhere, face","['give', 'follow', 'array', 'maxheap', 'value', 'right', 'child', 'right', 'child', 'node', 'value']","Given the following array of a maxheap: [42,37,24,18,21,23,12,17,10,13,6,8]; what is the value of the right child of the right child of the node with value 37?
   6
 "
627,627,39,0.13539999723434448,"node, sub, process, next, link, current, element, list, object, pointer",14,0.1137000024318695,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.0860000029206276,"for, follow, time, complexity, true, give, statement, function, correct, run","['statement', 'tree', 'node', 'false', 'tree', 'node', 'next', 'pointer']","Which statement about Tree nodes is false.
   A tree node can have one or more next pointers.
 "
628,628,24,0.13330000638961792,"hash, element, table, bucket, use, function, close, key, store, insert",40,0.053199999034404755,"array, slow, problem, may, random, element, access, integer, anywhere, face",53,0.05260000005364418,"mean, new, mistake, county, send, teach, late, limited, incorrectly, incredibly","['mean', 'array', 'bucket', 'need', 'fill', 'bucket']","What does a load factor of 0.9 mean?
Your array has 10% more buckets than you need (you’ll fill 90% of the buckets).
    "
629,629,56,0.1728000044822693,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",44,0.13079999387264252,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na",14,0.046300001442432404,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['input', 'would', 'make', 'sort', 'quick', 'sort', 'number', 'must', 'order', 'smallest', 'large']","Out of the input arrays below, which one would make the sorting algorithm, Quick Sort, most efficient.The numbers must be ordered from smallest to largest.
   [5,2,3,1,6,4]
 "
630,630,14,0.22349999845027924,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.014000000432133675,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.01360000018030405,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['follow', 'tree', 'avl', 'tree', 'tree']","Which of the following trees is a AVL Tree?
 Tree B
   "
631,631,29,0.31299999356269836,"find, number, step, item, average, many, index, table, insert, hash",42,0.04650000110268593,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",24,0.019700000062584877,"hash, element, table, bucket, use, function, close, key, store, insert","['definition', 'load', 'hash', 'table', 'maximum', 'number', 'value', 'intend', 'add', 'divide']","What is the definition of the ""load"" of a hash table?
Maximum number of values you intend to add divided bynumber of buckets in the array
    "
632,632,14,0.3075999915599823,"tree, binary, order, node, leave, right, follow, avl, search, traversal",24,0.012799999676644802,"hash, element, table, bucket, use, function, close, key, store, insert",56,0.012299999594688416,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['would', 'avltree', 'follow', 'insert', 'balance', 'performedinsert', 'leave', 'right']","What would this AVLTree look like after the following have been inserted and balancing has been performed?Insert from left to right:(45, 37, 48, 51)

    "
633,633,25,0.22030000388622284,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional",16,0.21799999475479126,"for, follow, time, complexity, true, give, statement, function, correct, run",53,0.02979999966919422,"mean, new, mistake, county, send, teach, late, limited, incorrectly, incredibly","['follow', 'new', 'boolean', 'graph', 'true', 'graph', 'true', 'graph', 'true', 'graph', 'true', 'graph', 'true', 'graph', 'true']","which of the adjacency matricesrepresent the following code:// undirected graphboolean[][] graph = new boolean[6][6]graph[3][0] = true;graph[2][1] = true;graph[4][1] = true;graph[5][2] = true;graph[0][3] = true;graph[0][5] = true;
 0 1 2 3 4 50 _ _ _ T _ T1 _ _ _ _ _ _2 _ T _ _ _ _3 T _ _ _ _ _4 _ T _ _ _ _5 _ _ T _ _ _
   "
634,634,29,0.18790000677108765,"find, number, step, item, average, many, index, table, insert, hash",16,0.015599999576807022,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.014000000432133675,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['give', 'represent', 'index', 'parent']","Given the array representing a max heap [30,25,28,7,19,12,22], which index is the parent of 12
  2
  "
635,635,56,0.17749999463558197,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",42,0.05590000003576279,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",52,0.013700000010430813,"show, factor, prime, distribute, uniformly, distribution, improve, increase, reduce, advice","['sort', 'lecture', 'best', 'depend', 'situation']","Which sorting algorithm (from lectures) is best to use?
     Depends on the situation
"
636,636,14,0.33709999918937683,"tree, binary, order, node, leave, right, follow, avl, search, traversal",39,0.07199999690055847,"node, sub, process, next, link, current, element, list, object, pointer",32,0.010300000198185444,"log, base, bottom, many, become, simplify, less, allow, level, multiple","['describe', 'followingvisit', 'level', 'node', 'leave', 'right', 'visiting', 'node', 'next', 'level', 'level', 'order']","Which tree traversal algorithm is described by the following?Visit each level's nodes from left to right before visiting nodes in the next level.
   Level-Order
 "
637,637,30,0.2046000063419342,"operation, middle, link, array, perform, advantage, make, item, front, either",14,0.09030000120401382,"tree, binary, order, node, leave, right, follow, avl, search, traversal",35,0.01360000018030405,"number, people, real, create, would, say, quickly, company, change, friend","['operation', 'real', 'operation', 'perform', 'binary', 'tree', 'prune']","Which of these operations is a real operation that can be performed on a binary tree?
Pruning.
    "
638,638,56,0.22390000522136688,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.013799999840557575,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.013399999588727951,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['follow', 'sort', 'stable', 'insertion', 'sort']","Which of the following sorts are stable?
  Insertion Sort
  "
639,639,25,0.2964000105857849,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional",35,0.21879999339580536,"number, people, real, create, would, say, quickly, company, change, friend",16,0.08410000056028366,"for, follow, time, complexity, true, give, statement, function, correct, run","['theory', 'undirected', 'graph', 'number', 'vertice', 'odd', 'degree', 'even', 'lemma', 'consequence', 'thedegree', 'formula', 'for', 'graph', 'vertex', 'set', 'edge', 'set', 'work', 'sum', 'degree', 'vertex', 'for', 'follow', 'undirected', 'graph']","In graph theory, the handshaking lemma states that ""In any finite undirected graph, the number of vertices with odd degree is even"".The lemma is a consequence of thedegree sum formula: for a graph with vertex set and edge set .Work out the sum of degrees of the vertices for the following undirected graph:
  26
  "
640,640,24,0.14380000531673431,"hash, element, table, bucket, use, function, close, key, store, insert",29,0.13189999759197235,"find, number, step, item, average, many, index, table, insert, hash",55,0.09629999846220016,"datum, search, structure, remove, data, list, store, want, add, use","['open', 'hashtable', 'want', 'store', 'element', 'able', 'find', 'around', 'step', 'many', 'bucket']","In an open Hashtable, we want to store 2000 elements and be able to find any in around 1.40 steps. How many buckets should our Hashtable have?
 2500
   "
641,641,56,0.06459999829530716,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",55,0.017100000753998756,"datum, search, structure, remove, data, list, store, want, add, use",39,0.016599999740719795,"node, sub, process, next, link, current, element, list, object, pointer",['list'],"What is the asymptotic memory usage of an adjacency list?
    
"
642,642,56,0.1607999950647354,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",55,0.09350000321865082,"datum, search, structure, remove, data, list, store, want, add, use",52,0.0925000011920929,"show, factor, prime, distribute, uniformly, distribution, improve, increase, reduce, advice","['average', 'time', 'complexity', 'interpolation', 'search', 'improve', 'binary', 'search', 'algorithm', 'sort', 'uniformly', 'distribute', 'element', 'log']","What is the average time complexity of Interpolation Search, an improved Binary Search algorithm, on a sorted array of N uniformly distributed elements?
   ?(log(log(N)))
 "
643,643,56,0.2702000141143799,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",30,0.04740000143647194,"operation, middle, link, array, perform, advantage, make, item, front, either",14,0.03610000014305115,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['make', 'sort', 'stable', 'keep', 'enter', 'order', 'item', 'equal', 'value']","What makes a sorting algorithm 'stable'?
   The algorithm keeps the entered order of items of equal value.
 "
644,644,25,0.2257000058889389,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional",29,0.07919999957084656,"find, number, step, item, average, many, index, table, insert, hash",49,0.04520000144839287,"int, result, return, term, many, num, body, function, heap, count","['main', 'condition', 'mix', 'term', 'number', 'direct', 'edgesm', 'number', 'undirected', 'edge']","What is the main condition of a mixed graph (ADT) in terms ofn and m?n = number of directed edgesm = number of undirected edges
 
   "
645,645,16,0.15780000388622284,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.07810000330209732,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",55,0.013700000010430813,"datum, search, structure, remove, data, list, store, want, add, use","['consider', 'follow', 'statement', 'list', 'true']","Consider the following statements about lists. Which, or all are true?
     All of the above
"
646,646,29,0.34599998593330383,"find, number, step, item, average, many, index, table, insert, hash",16,0.04859999939799309,"for, follow, time, complexity, true, give, statement, function, correct, run",44,0.04259999841451645,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na","['formula', 'for', 'average', 'number', 'step', 'need', 'find', 'item', 'closed', 'hash', 'table', 'size', 'give']","What is the formula for the average number of steps needed to find an item in a closed hash table of size N given the load factor L, 0 <= L <=1.0 ?
     1/2 (1+1/(1-L))
"
647,647,0,0.14900000393390656,"pass, point, start, book, page, short, similar, look, dijkstra, repeat",56,0.14159999787807465,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",11,0.06040000170469284,"complete, digit, count, least, significant, digits, basis, position, share, counting","['list', 'look', 'first', 'pass', 'sort', 'shellsort', 'pass', 'complete', 'first', 'pass', 'complete']","How will the list 9, 4, 7, 5, 8, 6, 1, 2 look after the first pass of 3-sort (shellsort h=3) and after all passes are complete.
  First Pass: 5, 4, 6, 1, 2, 7, 9, 8Complete: 1, 2, 6, 5, 4, 7, 9, 8
  "
648,648,14,0.4016000032424927,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.048900000751018524,"for, follow, time, complexity, true, give, statement, function, correct, run",2,0.03739999979734421,"require, comparison, estimate, nee, minimum, identify, aka, clockwise, complexityo, outside","['for', 'give', 'avl', 'tree', 'if', 'insert', 'rotation', 'require', 'balance', 'tree', 'right', 'rotation', 'node', 'leave', 'rotation', 'node']","For the given AVL Tree, if 5 is inserted what rotation will be required to re-balance the tree?
 Right Rotation about node 6, then left rotation about node 4.
   "
649,649,25,0.15649999678134918,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional",29,0.13729999959468842,"find, number, step, item, average, many, index, table, insert, hash",16,0.05530000105500221,"for, follow, time, complexity, true, give, statement, function, correct, run","['if', 'take', 'represent', 'graph', 'multiply', 'time', 'find', 'vertex', 'edge', 'apart']","If we take an Adjacency Matrix, A, that represents a graph, and multiply it by itself n times, we find out:
 which vertices are n edges apart
   "
650,650,56,0.22390000522136688,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.013799999840557575,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.013399999588727951,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['follow', 'sort', 'stable', 'insertion', 'sort']","Which of the following sorting algorithms are stable?
Insertion sort
    "
651,651,24,0.09719999879598618,"hash, element, table, bucket, use, function, close, key, store, insert",17,0.05920000001788139,"lane, skip, skiplist, combined, sum, organise, difference, many, exactly, assign",13,0.051899999380111694,"second, take, record, long, run, expect, likely, question, information, implementation","['skiplist', 'element', 'many', 'element', 'expect']","In a SkipList of n elements, how many elements are expected in lane 1 and lane 3?
  n in lane 1, and n/4 in lane 3
  "
652,652,56,0.2687999904155731,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",25,0.04919999837875366,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional",6,0.012500000186264515,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly","['many', 'follow', 'sort', 'method', 'stable', 'selection', 'sortshell', 'sortbubble']","How many of the following sort methods are stable:Selection SortShell SortBubble SortHeap SortMerge Sort
 2
   "
653,653,14,0.18690000474452972,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.015200000256299973,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.014700000174343586,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['follow', 'valid', 'maxheap', 'order']","Which of the following is a valid maxheap? (Assuminglexicographic order)
 
   "
654,654,14,0.15530000627040863,"tree, binary, order, node, leave, right, follow, avl, search, traversal",29,0.061799999326467514,"find, number, step, item, average, many, index, table, insert, hash",24,0.05079999938607216,"hash, element, table, bucket, use, function, close, key, store, insert","['give', 'element', 'find', 'final', 'balanced', 'avl', 'tree']","Given the elements [14, 18, 3, 2, 1, -1, -4, 5, 20], find the final balanced AVL Tree.
   2 -1 14-4 1 3 18 5 20
 "
655,655,24,0.2890999913215637,"hash, element, table, bucket, use, function, close, key, store, insert",44,0.04600000008940697,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na",42,0.04399999976158142,"big, definition, bind, set, notation, omega, final, lecture, theta, exact","['closed', 'hashtable', 'size', 'linear_probing', 'right', 'orderthe', 'hash', 'function', 'form', 'final']","Insert the elements -3, -5, -1, 5, 0, 4, into a standard closed hashtable (of size 6) with linear probing (to the right) in that order.The hash function has the form h(x) = ((x+1)2-3) % 6.What does the final hashtable look like?
4, -3, -5, -1, 5, 0
    "
656,656,24,0.2890999913215637,"hash, element, table, bucket, use, function, close, key, store, insert",44,0.04600000008940697,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na",42,0.04399999976158142,"big, definition, bind, set, notation, omega, final, lecture, theta, exact","['closed', 'hashtable', 'size', 'linear_probing', 'right', 'orderthe', 'hash', 'function', 'form', 'final']","Insert the elements -3, -5, -1, 5, 0, 4, into a standard closed hashtable (of size 6) with linear probing (to the right) in that order.The hash function has the form h(x) = ((x+1)2-3) % 6.What does the final hashtable look like?
4, -3, -5, -1, 5, 0
    "
657,657,16,0.2329999953508377,"for, follow, time, complexity, true, give, statement, function, correct, run",49,0.06700000166893005,"int, result, return, term, many, num, body, function, heap, count",6,0.05339999869465828,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly","['runtime', 'for', 'follow', 'fragment', 'for', 'for', 'for', 'for', 'int', 'return']","The runtime for the following code fragment is?(f(m,n)). What is f(m,n)?int a;for (int i = -5; i < n; i++) for (int j = 1; j < 2i+1; 2*j) for (int k = 1; k < n-1; 3*k) a=a+1; for (int l = 0; l < m; 5*l) a=a+j;return a;
   ?(nlog(n)log(nm))
 "
658,658,14,0.14300000667572021,"tree, binary, order, node, leave, right, follow, avl, search, traversal",24,0.05889999866485596,"hash, element, table, bucket, use, function, close, key, store, insert",55,0.0142000000923872,"datum, search, structure, remove, data, list, store, want, add, use","['form', 'tree', 'traversal', 'order']","Which is not a form of tree traversal
   By-order
 "
659,659,56,0.09950000047683716,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",24,0.02199999988079071,"hash, element, table, bucket, use, function, close, key, store, insert",44,0.018799999728798866,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na","['use', 'sort']","Which sort uses h-sorting?
 Shell Sort
   "
660,660,6,0.40290001034736633,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly",39,0.18880000710487366,"node, sub, process, next, link, current, element, list, object, pointer",16,0.06109999865293503,"for, follow, time, complexity, true, give, statement, function, correct, run","['see', 'for', 'object', 'element', 'element', 'next', 'class', 'linkedlist', 'private', 'listnode', 'head', 'private', 'int', 'list', 'size', 'public', 'object', 'get', 'int', 'if', 'error', 'return', 'nodeelement', 'method', 'get', 'find', 'nodeiin', 'link', 'list', 'output', 'element', 'get', 'output', 'headelement', 'code', 'go', 'place', 'mark', 'for', 'method', 'work', 'correctly', 'for', 'node', 'nodenext']","See the incomplete java code below for the classes ListNode and LinkedList:class ListNode { Object element; ListNode next; ListNode(Object e, ListNode n) { element = e; next = n; }}class LinkedList { private ListNode head = null; private int n = 0; // n is the list size public Object get(int i) { if (i<0 || i>=n) { // …error! } ListNode node = head; X return node.element; }}The method get finds nodeiin the linked list and outputs its element (get(0) outputs head.element). Which code should go at the place marked X for the method to work correctly?
 for (int j=0; j<i; j++) { node = node.next;}
   "
661,661,56,0.33379998803138733,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",14,0.011800000444054604,"tree, binary, order, node, leave, right, follow, avl, search, traversal",24,0.011800000444054604,"hash, element, table, bucket, use, function, close, key, store, insert","['use', 'selection', 'sort', 'follow', 'permutation', 'take', 'swap', 'ascend', 'order']","Using selection sort, which of the following permutations of [1,2,3,4,5] takes 5 swaps? (Ascending order)
 [5,1,2,4,3]
   "
662,662,16,0.21050000190734863,"for, follow, time, complexity, true, give, statement, function, correct, run",33,0.07909999787807465,"else, looping, letf, random, invent, fibonacci, queue, default, value, dump",42,0.047200001776218414,"big, definition, bind, set, notation, omega, final, lecture, theta, exact","['big', 'for', 'random', 'value', 'else', 'if', 'for', 'else', 'for', 'int']","What is the Big-O of the code below for a random value of j?if( j>=0 && j<=5) a+=5;else if( j<0){ for(int i = 0; i<=n; i++){ a+=3; }}else{ for(int i = 0; i<n*n; i++){ a+=8; }}
 n^2
   "
663,663,16,0.1437000036239624,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.13429999351501465,"tree, binary, order, node, leave, right, follow, avl, search, traversal",2,0.060600001364946365,"require, comparison, estimate, nee, minimum, identify, aka, clockwise, complexityo, outside","['follow', 'statement', 'correct', 'double', 'rotation', 'require', 'for', 'node', 'outside', 'tree']","Of the following statements, which of these are not correct:
     A double rotation is required for nodes on the outside of the tree.
"
664,664,16,0.06120000034570694,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.061000000685453415,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",35,0.050599999725818634,"number, people, real, create, would, say, quickly, company, change, friend","['scenario', 'for', 'quicksort']","What is the complexity of the worst-case scenario for quicksort?
   n2
 "
665,665,17,0.20569999516010284,"lane, skip, skiplist, combined, sum, organise, difference, many, exactly, assign",24,0.09470000118017197,"hash, element, table, bucket, use, function, close, key, store, insert",56,0.0714000016450882,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['skip', 'list', 'contain', 'lane', 'use', 'organise', 'average', 'combined', 'sum', 'pointer', 'lane', 'close']","A skip list containing lanes from 0 to 12 is used to organise 262000 elements.On average, what will the combined sum of pointers in lanes 3, 8 and 11 be closest to?
 34000
   "
666,666,42,0.1257999986410141,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",16,0.10220000147819519,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.08410000056028366,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['follow', 'notation', 'use', 'represent', 'exact', 'bind', 'for', 'complexity', 'algorithm']","Which of the following notations are used to represent the “exact bound” for the complexity of an algorithm?
 ?(n)
   "
667,667,16,0.12160000205039978,"for, follow, time, complexity, true, give, statement, function, correct, run",55,0.08669999986886978,"datum, search, structure, remove, data, list, store, want, add, use",29,0.08020000159740448,"find, number, step, item, average, many, index, table, insert, hash","['provide', 'limited', 'runtime', 'complexity', 'insert', 'find', 'remove', 'for', 'for']","Provided that the load factor is limited, what is the runtime complexity of insert, find and remove for a hashtable?
  ?(1) for all
  "
668,668,16,0.11590000241994858,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.0949999988079071,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",32,0.051500000059604645,"log, base, bottom, many, become, simplify, less, allow, level, multiple","['correct', 'order', 'asymptotic', 'complexity', 'fast', 'slow', 'log']","Which of the below is the correct order of asymptotic complexity, from fastest to slowest
 1, log(n), n, n2, 2n
   "
669,669,14,0.5252000093460083,"tree, binary, order, node, leave, right, follow, avl, search, traversal",0,0.0,,0,0.0,,"['binary', 'search', 'tree', 'binary', 'tree', 'avl', 'tree', 'type', 'tree', 'special', 'type', 'avl', 'tree', 'type', 'binary', 'search', 'tree', 'type', 'binary', 'tree']","Binary Search Trees, Binary Trees and AVL Trees are all types of Tree, but which is a special type of which?
  AVL Tree is a type of Binary Search Tree which is a type of Binary Tree
  "
670,670,56,0.3091000020503998,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",38,0.012299999594688416,"small, motorway, occur, strategy, city, major, divisible, scenario, repeatedly, shelf",16,0.012000000104308128,"for, follow, time, complexity, true, give, statement, function, correct, run","['follow', 'sort', 'algorithm', 'conquer', 'strategy', 'sort', 'merge', 'sort']","Which of the following sorting algorithms use a 'Divide & Conquer' strategy?
   Quick Sort & Merge Sort
 "
671,671,14,0.3319000005722046,"tree, binary, order, node, leave, right, follow, avl, search, traversal",39,0.14749999344348907,"node, sub, process, next, link, current, element, list, object, pointer",0,0.0,,"['order', 'first', 'last', 'node', 'process', 'order', 'traversal', 'binary', 'tree', 'leave', 'sub', 'tree', 'current', 'right', 'sub', 'tree']","In which order (from first to last) are nodes processed by an In-Order traversal of a binary tree?
 Left Sub-Tree, Current Node, Right Sub-Tree
   "
672,672,14,0.1996999979019165,"tree, binary, order, node, leave, right, follow, avl, search, traversal",24,0.05790000036358833,"hash, element, table, bucket, use, function, close, key, store, insert",29,0.05530000105500221,"find, number, step, item, average, many, index, table, insert, hash","['many', 'different', 'order', 'character', 'insert', 'avl', 'tree', 'describe', 'lecture']","How many different orders of the characters 'B', 'A', 'T', 'H' can be inserted into the AVL tree described in lectures, such that preorder traversal will return ""BATH""?
  6
  "
673,673,1,0.13449999690055847,"measurement, select, precision, option, accuracy, value, close, mathematical, technique, difference",0,0.06960000097751617,"pass, point, start, book, page, short, similar, look, dijkstra, repeat",42,0.05559999868273735,"big, definition, bind, set, notation, omega, final, lecture, theta, exact","['definition', 'precision', 'take', 'repeat', 'measurement', 'similar', 'value']","What is the definition of precision?
When you take repeated measurements and get similar values
    "
674,674,30,0.11550000309944153,"operation, middle, link, array, perform, advantage, make, item, front, either",56,0.06239999830722809,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",40,0.03700000047683716,"array, slow, problem, may, random, element, access, integer, anywhere, face","['advantage', 'link', 'list', 'array']","What are the advantages of a linked list over an array?
     A and C
"
675,675,56,0.2842999994754791,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.012600000016391277,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.012299999594688416,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['follow', 'sort', 'algorithm', 'always', 'stable', 'bubble', 'sort']","Which of the following sorting algorithms is always stable?
 Bubble sort
   "
676,676,14,0.20000000298023224,"tree, binary, order, node, leave, right, follow, avl, search, traversal",29,0.08500000089406967,"find, number, step, item, average, many, index, table, insert, hash",52,0.0478999987244606,"show, factor, prime, distribute, uniformly, distribution, improve, increase, reduce, advice","['avl', 'tree', 'maximum', 'balance', 'factor', 'node', 'need', 'balance']","In an AVL Tree, what is the maximum balance factor a node can have before it needs re-balancing?
   1
 "
677,677,24,0.11490000039339066,"hash, element, table, bucket, use, function, close, key, store, insert",29,0.10369999706745148,"find, number, step, item, average, many, index, table, insert, hash",55,0.07129999995231628,"datum, search, structure, remove, data, list, store, want, add, use","['use', 'binary', 'search', 'datum', 'set', 'element', 'maximum', 'number', 'iteration', 'would', 'take', 'find', 'specific', 'element']","Using binary search with a data set with 1,048,576 elements, what is the maximum number of iterations would it take to find a specific element?
20
    "
678,678,14,0.24480000138282776,"tree, binary, order, node, leave, right, follow, avl, search, traversal",41,0.08910000324249268,"runtime, part, course, http, answerquestion, mainphpcmd, answer, conference, target, must",24,0.050599999725818634,"hash, element, table, bucket, use, function, close, key, store, insert","['maximum', 'number', 'element', 'insert', 'root', 'leave', 'sub', 'tree', 'tree', 'avl', 'tree', 'include', 'insertion', 'cause', 'unbalance', 'part', 'answer']","With the BST below, what is the maximum number of elements which can be inserted into the root's left sub-tree until the tree is not an AVL tree (include the insertion which causes the unbalance as part of your answer)?5 \ 6
  4
  "
679,679,24,0.3628999888896942,"hash, element, table, bucket, use, function, close, key, store, insert",16,0.06790000200271606,"for, follow, time, complexity, true, give, statement, function, correct, run",38,0.03929999843239784,"small, motorway, occur, strategy, city, major, divisible, scenario, repeatedly, shelf","['open', 'closed', 'hash', 'table', 'close', 'hash', 'table', 'small', 'memory', 'consumptionopen', 'hash', 'table', 'fast', 'run', 'time']","Which is a valid comparison between open and closed hash tables?
  Closed hash table:- Smaller memory consumptionOpen hash table:- Faster run time
  "
680,680,14,0.13830000162124634,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.11100000143051147,"for, follow, time, complexity, true, give, statement, function, correct, run",28,0.05000000074505806,"child, add, non, cause, leaf, full, slow, sift, treechild, nodeleaf","['follow', 'statement', 'false', 'binary', 'tree', 'node', 'least', 'child']","Which of the following statements is false?
  In a binary tree, every node has at least 2 children
  "
681,681,30,0.2190999984741211,"operation, middle, link, array, perform, advantage, make, item, front, either",56,0.14190000295639038,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",55,0.10279999673366547,"datum, search, structure, remove, data, list, store, want, add, use","['faster', 'link', 'list', 'array', 'insert', 'new', 'item', 'front', 'remove', 'item', 'middle', 'link', 'list', 'link', 'list']","Which is faster (linked list or array) when1) inserting a new item at front?2) removing an item from the middle?
1) linked list 2) linked list
    "
682,682,56,0.2786000072956085,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",29,0.014600000344216824,"find, number, step, item, average, many, index, table, insert, hash",16,0.013199999928474426,"for, follow, time, complexity, true, give, statement, function, correct, run","['time', 'complexity', 'add', 'deleting', 'item', 'priority', 'queue']","What is the time complexity of adding and deleting items in a priority queue
 Add: O(logn)Remove O(logn)
   "
683,683,56,0.27869999408721924,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",29,0.014399999752640724,"find, number, step, item, average, many, index, table, insert, hash",16,0.013199999928474426,"for, follow, time, complexity, true, give, statement, function, correct, run","['time', 'complexity', 'add', 'deleting', 'item', 'priority', 'queue']","What is the time complexity of adding and deleting items in a priority queue
 Add: O(logn)Remove O(logn)
   "
684,684,16,0.1005999967455864,"for, follow, time, complexity, true, give, statement, function, correct, run",3,0.057999998331069946,"case, fastest, ofbubble, itsb, distinct, description, fit, stableb, performance, nearly",29,0.0560000017285347,"find, number, step, item, average, many, index, table, insert, hash","['average', 'case', 'run', 'time']","What is the average case run-time of heap sort?
  O(n * log(n))
  "
685,685,29,0.14959999918937683,"find, number, step, item, average, many, index, table, insert, hash",42,0.054999999701976776,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",28,0.052000001072883606,"child, add, non, cause, leaf, full, slow, sift, treechild, nodeleaf","['assume', 'index', 'array', 'representation', 'index', 'right', 'child', 'index']","Assuming 0 indexed array representation of a heapwhat is the index of the right child of the node at index 5
12
    "
686,686,29,0.14970000088214874,"find, number, step, item, average, many, index, table, insert, hash",42,0.05480000004172325,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",28,0.052000001072883606,"child, add, non, cause, leaf, full, slow, sift, treechild, nodeleaf","['assume', 'index', 'array', 'representation', 'index', 'right', 'child', 'index']","Assuming 0 indexed array representation of a heapwhat is the index of the right child of the node at index 5
12
    "
687,687,14,0.4447999894618988,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.05730000138282776,"for, follow, time, complexity, true, give, statement, function, correct, run",28,0.03440000116825104,"child, add, non, cause, leaf, full, slow, sift, treechild, nodeleaf","['rule', 'for', 'binary', 'tree', 'value', 'obtain', 'node', 'always', 'great', 'equal', 'value', 'node', 'child', 'tree', 'complete', 'binary', 'tree', 'tree', 'must', 'balanced']","What are the rules for a max heap as a binary tree?1. Value obtained by a node is always greater than or equal to the values of the node's children.2. The tree is a complete binary tree3. The tree must be balanced
     1 and 2
"
688,688,29,0.21580000221729279,"find, number, step, item, average, many, index, table, insert, hash",55,0.04910000041127205,"datum, search, structure, remove, data, list, store, want, add, use",24,0.016200000420212746,"hash, element, table, bucket, use, function, close, key, store, insert","['store', 'index', 'index', 'parent', 'item', 'index']","Assume a heap stored at an 0 indexed array.What is the index of the parent of the item in index 5.
2
    "
689,689,29,0.21580000221729279,"find, number, step, item, average, many, index, table, insert, hash",55,0.04899999871850014,"datum, search, structure, remove, data, list, store, want, add, use",24,0.016300000250339508,"hash, element, table, bucket, use, function, close, key, store, insert","['store', 'index', 'index', 'parent', 'item', 'index']","Assume a heap stored at an 0 indexed array.What is the index of the parent of the item in index 5.
2
    "
690,690,56,0.3262999951839447,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.13130000233650208,"for, follow, time, complexity, true, give, statement, function, correct, run",6,0.057100001722574234,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly","['incorrect', 'implementation', 'selection', 'sort', 'for', 'sort', 'item', 'ascend', 'order', 'wrong', 'code', 'may', 'assume', 'for', 'int', 'int', 'minindex', 'for', 'if', 'sort', 'first', 'item', 'list']","Below is an incorrect implementation of Selection Sort for sorting items in ascending order. What is wrong with the code? You may assume the swap function is correct.void selectionSort(int a[], int n){ for (int i = 0; i < n-1; i++){ int minIndex = i; for (int j = i + 1; j < n-1; j++){ if (a[j] < a[minIndex]){ minIndex = j; } } swap(a, i, minIndex); }}
 The algorithm only sorts the first n-1 items in the list.
   "
691,691,49,0.4065999984741211,"int, result, return, term, many, num, body, function, heap, count",6,0.05609999969601631,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly",40,0.05130000039935112,"array, slow, problem, may, random, element, access, integer, anywhere, face","['preform', 'operation', 'positive', 'integer', 'describe', 'code', 'return', 'note', 'operator', 'give', 'dosomethe', 'int', 'result', 'int', 'while', 'result', 'result', 'result', 'result', 'return', 'result', 'code', 'reverse', 'input', 'integer']","Below is some code which preforms an operation on a positive integer. Describe what the code returns? Note that the '%' operator give the modulus.int doSomething(int n){ int result; int d; while( n != 0){ d = n%10; n = n/10; result = result * 10; result = result + d; } return result;}
     The code reverses the input integer.
"
692,692,24,0.27059999108314514,"hash, element, table, bucket, use, function, close, key, store, insert",55,0.22269999980926514,"datum, search, structure, remove, data, list, store, want, add, use",16,0.034699998795986176,"for, follow, time, complexity, true, give, statement, function, correct, run","['possible', 'remove', 'entry', 'closed', 'hash', 'table', 'linear_probe', 'remove', 'entry', 'close', 'hash', 'table', 'linear_probing', 'destroy', 'structure', 'linear_probing', 'search', 'for', 'entry']","Why is is not possible to remove an entry from a Closed Hash Table with Linear Probing?
  Removing an entry from a Closed Hash Table with Linear Probing destroys the ""structure"" of linear probing when searching for an entry.
  "
693,693,14,0.3443000018596649,"tree, binary, order, node, leave, right, follow, avl, search, traversal",39,0.04780000075697899,"node, sub, process, next, link, current, element, list, object, pointer",24,0.010499999858438969,"hash, element, table, bucket, use, function, close, key, store, insert","['avl', 'tree', 'binary', 'tree', 'height', 'leave', 'right', 'sub', 'tree', 'node', 'differ']","What is an AVL Tree?
  a Binary Tree in which the heights of the left and right sub-trees of each node differ at most by 1.
  "
694,694,44,0.25270000100135803,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na",16,0.1151999980211258,"for, follow, time, complexity, true, give, statement, function, correct, run",13,0.011699999682605267,"second, take, record, long, run, expect, likely, question, information, implementation","['quadratic', 'time', 'use', 'elementary_operation', 'give', 'input', 'likely', 'amount', 'elementary_operation', 'for']","A quadratic time algorithm uses 27 elementary operations when given an input n=10. What is the (most likely) amount of elementary operations for n=1000?
   270,000
 "
695,695,14,0.31060001254081726,"tree, binary, order, node, leave, right, follow, avl, search, traversal",56,0.012000000104308128,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",24,0.012000000104308128,"hash, element, table, bucket, use, function, close, key, store, insert","['would', 'balance', 'value', 'node', 'value', 'tree', 'avl', 'tree']","From the diagram (above), what would the balance value of the node with value ""Ronda"" be? Is this an AVL tree?
  2 & NOT an AVL tree
  "
696,696,16,0.18129999935626984,"for, follow, time, complexity, true, give, statement, function, correct, run",49,0.09570000320672989,"int, result, return, term, many, num, body, function, heap, count",43,0.052799999713897705,"space, nlogn, worst, double, do, enough, arraylist, namortise, collection, efficiency","['complexity', 'follow', 'functionfor', 'int', 'int', 'while', 'sum', 'nlogn']","What is the complexity of the following function?for (int i=0 ; i < n ; i++){ int k = n; while (k > 1){ sum++; k = k/2; }}
  T(nlogn)
  "
697,697,56,0.21940000355243683,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",43,0.014000000432133675,"space, nlogn, worst, double, do, enough, arraylist, namortise, collection, efficiency",16,0.013799999840557575,"for, follow, time, complexity, true, give, statement, function, correct, run","['follow', 'stable', 'sort', 'insertionsort', 'mergesort']","Which of the following are stable sorts?1. Selectionsort2. Insertionsort3. Shellsort4. Quicksort5. Mergesort
     2 and 5
"
698,698,56,0.19110000133514404,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",24,0.09769999980926514,"hash, element, table, bucket, use, function, close, key, store, insert",39,0.07339999824762344,"node, sub, process, next, link, current, element, list, object, pointer","['average', 'many', 'node', 'would', 'expect', 'fourth', 'list', 'element', 'assume', 'first', 'lane', 'contain', 'element']","On average, how many nodes would you expect to be in the fourth lane of a skip-list with 64 elements (Assuming the first lane contains all elements)?
   8
 "
699,699,14,0.3573000133037567,"tree, binary, order, node, leave, right, follow, avl, search, traversal",56,0.010999999940395355,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",24,0.010999999940395355,"hash, element, table, bucket, use, function, close, key, store, insert","['various', 'way', 'traverse', 'tree', 'post', 'order', 'traversalin', 'order', 'traversallevel', 'order']","There are various ways to Traverse a Tree. These are :
  Post-Order TraversalIn-Order TraversalLevel-Order TraversalPre-Order Traversal
  "
700,700,56,0.1784999966621399,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",43,0.10509999841451645,"space, nlogn, worst, double, do, enough, arraylist, namortise, collection, efficiency",41,0.046799998730421066,"runtime, part, course, http, answerquestion, mainphpcmd, answer, conference, target, must","['good', 'bad', 'average', 'amortise', 'runtime', 'add', 'element', 'arraylist', 'best', 'worst', 'namortise']","What is the best, worst, and average/amortised runtime of adding an element to an arraylist?
Best: 1Worst: nAmortised: 1
    "
701,701,56,0.2745000123977661,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",42,0.04769999906420708,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",35,0.012299999594688416,"number, people, real, create, would, say, quickly, company, change, friend","['follow', 'set', 'sort', 'algorithm', 'stable', 'bubble', 'merge', 'insertion']","Which of the following sets of sorting algorithms are all stable?
  Bubble, Merge, Insertion
  "
702,702,56,0.21459999680519104,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",29,0.04960000142455101,"find, number, step, item, average, many, index, table, insert, hash",44,0.01489999983459711,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na","['follow', 'list', 'number', 'iteration', 'bubble', 'sort']","What will the following list of numbers look like after 2 iterations of a bubble sort:6, 5, 3, 4, 1, 8, 7, 2, 9
3, 4, 1, 5, 6, 2, 7, 8, 9
    "
703,703,16,0.32519999146461487,"for, follow, time, complexity, true, give, statement, function, correct, run",44,0.07190000265836716,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na",11,0.039799999445676804,"complete, digit, count, least, significant, digits, basis, position, share, counting","['if', 'function', 'time', 'complexity', 'follow', 'statement', 'false', 'large', 'value', 'for', 'complete', 'quadratic', 'time']","If a function f(x), has (n^2) time complexity, which of the following statements is false, under large values for n?
f(x) will complete in at most quadratic time
    "
704,704,14,0.17910000681877136,"tree, binary, order, node, leave, right, follow, avl, search, traversal",56,0.1136000007390976,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",2,0.06469999998807907,"require, comparison, estimate, nee, minimum, identify, aka, clockwise, complexityo, outside","['if', 'add', 'number', 'follow', 'tree', 'type', 'balance', 'algorithm', 'require', 'clockwise']","If I was to add the number 8 to the following tree, what type of balancing algorithm will be required: (4) / \ (2) (6) \ (9)
  Clockwise with (9) and (8) and then Anticlockwise with (6), (9) and (8)
  "
705,705,6,0.3122999966144562,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly",24,0.047600001096725464,"hash, element, table, bucket, use, function, close, key, store, insert",49,0.042100001126527786,"int, result, return, term, many, num, body, function, heap, count","['if', 'measure', 'instrument', 'describe', 'precise', 'mean', 'repeat', 'measurement', 'value', 'conduct', 'instrument', 'yield', 'result', 'close', 'together']","If a measuring instrument is described as ""precise"", what does it mean?
Repeated measurements of the same value conducted with this instrument will yield results that are very close together.
    "
706,706,14,0.36899998784065247,"tree, binary, order, node, leave, right, follow, avl, search, traversal",53,0.029899999499320984,"mean, new, mistake, county, send, teach, late, limited, incorrectly, incredibly",55,0.021199999377131462,"datum, search, structure, remove, data, list, store, want, add, use","['if', 'unbalanced', 'avl', 'tree', 'new', 'leaf', 'node', 'tree', 'balance', 'root', 'leaf', 'node']","If this is an unbalanced AVL tree, what are the new leaf nodes of the tree once it has been balanced? (7) / \ (5) (10) / \ (4) (9) / (1)
Root 5: leaf nodes 1, 9, 10.
    "
707,707,56,0.22529999911785126,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",43,0.04879999905824661,"space, nlogn, worst, double, do, enough, arraylist, namortise, collection, efficiency",14,0.04690000042319298,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['choice', 'best', 'describe', 'apply', 'link', 'list', 'stable', 'complexity', 'nlogn']","Which of the choices below best describes mergesort?
     Mergesort can be applied to a linked list, is stable, complexity O(nlogn)
"
708,708,29,0.147599995136261,"find, number, step, item, average, many, index, table, insert, hash",14,0.1152999997138977,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.07999999821186066,"for, follow, time, complexity, true, give, statement, function, correct, run","['statement', 'false', 'average', 'case', 'ie', 'average', 'number', 'step', 'binary', 'search']","Which of these statements is FALSE
   The average case (i.e. the average number of steps) of binary search is N
 "
709,709,14,0.148499995470047,"tree, binary, order, node, leave, right, follow, avl, search, traversal",4,0.014399999752640724,"looping, letf, invent, queue, default, dump, bsta, legal, mergesort, worst_case",18,0.014399999752640724,"looping, letf, invent, queue, default, dump, bsta, legal, mergesort, worst_case","['invent', 'avl', 'tree']","Who invented AVL trees?
Georgy Adelson-Velsky & Evgenii Landis
    "
710,710,16,0.13950000703334808,"for, follow, time, complexity, true, give, statement, function, correct, run",42,0.09740000218153,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",56,0.013799999840557575,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['notation', 'for', 'bind', 'time', 'complexity']","What is the notation for the upper bound time complexity?
 O
   "
711,711,56,0.13830000162124634,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",30,0.05550000071525574,"operation, middle, link, array, perform, advantage, make, item, front, either",24,0.0544000007212162,"hash, element, table, bucket, use, function, close, key, store, insert","['advantage', 'list', 'faster', 'element', 'list']","What is an advantage of a List over an array?
 It is faster to insert elements into a list.
   "
712,712,56,0.2451999932527542,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",3,0.051100000739097595,"case, fastest, ofbubble, itsb, distinct, description, fit, stableb, performance, nearly",29,0.012799999676644802,"find, number, step, item, average, many, index, table, insert, hash","['sort', 'algorithm', 'fast', 'average', 'case', 'quick', 'sort']","Which sorting algorithm has the fastest average case?
Quick sort
    "
713,713,56,0.17800000309944153,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",14,0.056699998676776886,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.013799999840557575,"for, follow, time, complexity, true, give, statement, function, correct, run","['follow', 'apply', 'selection', 'sort', 'unstable']","Which of the following applies to Selection Sort?
     Unstable and?(n2)
"
714,714,29,0.21960000693798065,"find, number, step, item, average, many, index, table, insert, hash",14,0.10639999806880951,"tree, binary, order, node, leave, right, follow, avl, search, traversal",40,0.045499999076128006,"array, slow, problem, may, random, element, access, integer, anywhere, face","['give', 'array', 'many', 'step', 'would', 'take', 'find', 'value', 'use', 'binary']","In the given array, how many steps would it take to find the value '20' when using binary search?__________________________________| 6 | 10 | 13 | 15 | 19 | 20 | 27 | 39 | 41 | 48 |
 3
   "
715,715,29,0.45989999175071716,"find, number, step, item, average, many, index, table, insert, hash",16,0.1031000018119812,"for, follow, time, complexity, true, give, statement, function, correct, run",24,0.011599999852478504,"hash, element, table, bucket, use, function, close, key, store, insert","['load', 'statement', 'correct', 'average', 'number', 'step', 'insert', 'find', 'item', 'for', 'closed', 'hash', 'table', 'average', 'number', 'step', 'insert', 'find', 'item', 'for', 'anopen', 'hash', 'table']","With a load of 0.50, which of these statements are correct?
Average number of steps to insert/find an item for a Closed hash table is 1.5Average number of steps to insert/find an item for anOpen hash table is 1.25
    "
716,716,16,0.18559999763965607,"for, follow, time, complexity, true, give, statement, function, correct, run",21,0.01489999983459711,"choose, requirement, rule, carey, understand, meet, simple, possible, mind, define",42,0.0142000000923872,"big, definition, bind, set, notation, omega, final, lecture, theta, exact","['statement', 'transitivity', 'rule', 'if']","Which of these statements is the Big-Oh transitivity rule?
 if f(n)=O(g(n)) and g(n)=O(h(n)) then f(n)=O(h(n))
   "
717,717,29,0.14429999887943268,"find, number, step, item, average, many, index, table, insert, hash",14,0.1420000046491623,"tree, binary, order, node, leave, right, follow, avl, search, traversal",56,0.05420000106096268,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['max', 'number', 'comparison', 'need', 'find', 'name', 'binary', 'search', 'follow', 'list']","What is the max number of comparisons needed to find a name with binary search in the following list:AaronAndreaBenBryceEmmaJamesJohnVictoria
 3
   "
718,718,56,0.12600000202655792,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",14,0.0723000019788742,"tree, binary, order, node, leave, right, follow, avl, search, traversal",39,0.016699999570846558,"node, sub, process, next, link, current, element, list, object, pointer","['tree', 'type', 'link', 'list']","A tree is a type of ....
   Linked List
 "
719,719,14,0.2531000077724457,"tree, binary, order, node, leave, right, follow, avl, search, traversal",54,0.1014999970793724,"like, could, treelook, book, alphabetical, alphabetically, back, system, wherever, home",55,0.0674000009894371,"datum, search, structure, remove, data, list, store, want, add, use","['suppose', 'follow', 'avltree', 'if', 'remove', 'root', 'node', 'correctly', 'could', 'binary', 'treelook', 'like', 'root', 'leave']","Suppose we have the following AVLTree. If we remove the root node 4 correctly, how could the binary treelook like after? (4) / \ / \ / \ / \ (2) (6) / \ / \ / \ / \ (1) (3) (5) (7) / \ / \ (0) (8)
 5 is the root, 0, 3, 6, and 8 are leaves
   "
720,720,56,0.23280000686645508,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.11209999769926071,"for, follow, time, complexity, true, give, statement, function, correct, run",13,0.011800000444054604,"second, take, record, long, run, expect, likely, question, information, implementation","['follow', 'statement', 'true', 'selection', 'sort', 'unstable', 'default', 'implementation', 'complexity']","Which of the following statements is true?
  Selection Sort has an unstable default implementation and has O(n^2) complexity
  "
721,721,42,0.13930000364780426,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",16,0.05590000003576279,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.05209999904036522,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['property', 'apply', 'notation', 'proportionality', 'for']","Which of these properties do not apply to big-Oh notation?
   Proportionality:For all c>0: f(cn) = O(cf(n))
 "
722,722,16,0.24330000579357147,"for, follow, time, complexity, true, give, statement, function, correct, run",35,0.10779999941587448,"number, people, real, create, would, say, quickly, company, change, friend",49,0.04280000180006027,"int, result, return, term, many, num, body, function, heap, count","['let', 'real', 'number', 'time', 'complexity', 'function', 'say', 'if', 'for', 'value', 'for']","Let c,N be real numbers, and f(n), g(n) be time complexity functions.The function f(n) is said to be O(g(n)) if:
   For some value of c, f(n) < c*g(n), for all n>N.
 "
723,723,56,0.24529999494552612,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.0544000007212162,"for, follow, time, complexity, true, give, statement, function, correct, run",3,0.046300001442432404,"case, fastest, ofbubble, itsb, distinct, description, fit, stableb, performance, nearly","['follow', 'sort', 'algorithm', 'fastest', 'for', 'nearly', 'sort', 'data', 'insertion', 'sort']","Which of the following sorting algorithms is the fastest for nearly sorted data?
  Insertion sort
  "
724,724,56,0.21140000224113464,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",35,0.052799999713897705,"number, people, real, create, would, say, quickly, company, change, friend",30,0.013399999588727951,"operation, middle, link, array, perform, advantage, make, item, front, either","['follow', 'sort', 'real', 'sort', 'dump', 'sort']","Which of the following sorts is not a real sort?
   Dump Sort
 "
725,725,39,0.25360000133514404,"node, sub, process, next, link, current, element, list, object, pointer",14,0.20010000467300415,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.03579999879002571,"for, follow, time, complexity, true, give, statement, function, correct, run","['definition', 'for', 'type', 'traversal', 'incorrect', 'process', 'current', 'node', 'process', 'node', 'right', 'sub', 'tree', 'process', 'node', 'leave', 'sub', 'tree']","Which definition for the types of traversal is incorrect?
  PREORDER TRAVERSAL1. Process the current node.2. Process the nodes in the right sub-tree.3. Process the nodes in the left sub-tree.
  "
726,726,30,0.18529999256134033,"operation, middle, link, array, perform, advantage, make, item, front, either",56,0.1316000074148178,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",55,0.05979999899864197,"datum, search, structure, remove, data, list, store, want, add, use","['faster', 'remove', 'item', 'middle', 'link', 'list', 'middle', 'array', 'link', 'list']","It is faster to remove an item from the middle of a linked list or from the middle of an array?
Linked list
    "
727,727,29,0.23669999837875366,"find, number, step, item, average, many, index, table, insert, hash",24,0.19589999318122864,"hash, element, table, bucket, use, function, close, key, store, insert",40,0.038100000470876694,"array, slow, problem, may, random, element, access, integer, anywhere, face","['many', 'bucket', 'would', 'need', 'open', 'hash', 'table', 'if', 'wish', 'store', 'item', 'average', 'step', 'nearest', 'integer']","How many buckets would you need in your open hash table If you wish to store 10,000 items in an average of 1.45 steps? (To the nearest integer)
 11,111
   "
728,728,14,0.249099999666214,"tree, binary, order, node, leave, right, follow, avl, search, traversal",56,0.07769999653100967,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",40,0.027799999341368675,"array, slow, problem, may, random, element, access, integer, anywhere, face","['give', 'follow', 'selection', 'integer', 'follow', 'would', 'valid', 'avl', 'tree']","Given the following selection of integers,2,5,11,14,17,24,51Which of the following would be valid AVL trees:1: 14 11 17 2 5 24 512: 24 14 51 5 17 2 11 3: 14 5 24 2 11 17 514: 51 17 24 2 5 11 14
   3
 "
729,729,24,0.23720000684261322,"hash, element, table, bucket, use, function, close, key, store, insert",29,0.06379999965429306,"find, number, step, item, average, many, index, table, insert, hash",55,0.05559999868273735,"datum, search, structure, remove, data, list, store, want, add, use","['closed', 'hash', 'table', 'linear_probing', 'if', 'never', 'need', 'remove', 'element']","You should only use a closed hash table (with linear probing) if __________
 You never need to remove elements.
   "
730,730,14,0.25679999589920044,"tree, binary, order, node, leave, right, follow, avl, search, traversal",39,0.15950000286102295,"node, sub, process, next, link, current, element, list, object, pointer",24,0.049300000071525574,"hash, element, table, bucket, use, function, close, key, store, insert","['follow', 'unbalanced', 'avl', 'tree', 'impossible', 'balance', 'note', 'for', 'tree', 'element', 'value', 'current', 'node', 'place', 'leave', 'current', 'node']","Which of the following unbalanced AVL trees are impossible to balance? (NOTE: For these trees, elements that have the same value as the current node are placed to the left of the current node)1) 4 4 42) 9 8 83) 2 2 14) 5 1 7 1 1
  1 and 3
  "
731,731,14,0.1388999968767166,"tree, binary, order, node, leave, right, follow, avl, search, traversal",39,0.05550000071525574,"node, sub, process, next, link, current, element, list, object, pointer",6,0.05290000140666962,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly","['root', 'object', 'empty', 'tree', 'null']","What is in the ""root"" object of an empty tree?
   Null
 "
732,732,56,0.14030000567436218,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",44,0.054999999701976776,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na",25,0.05339999869465828,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional","['sort', 'method', 'slowest', 'quick', 'sort']","Which of these sorting methods is slowest?
Quick Sort
    "
733,733,56,0.11169999837875366,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",4,0.01510000042617321,"looping, letf, invent, queue, default, dump, bsta, legal, mergesort, worst_case",5,0.01510000042617321,"looping, letf, invent, queue, default, dump, bsta, legal, mergesort, worst_case","['stable', 'merge']","Which of these are stable?
   Merge Sort
 "
734,734,55,0.18129999935626984,"datum, search, structure, remove, data, list, store, want, add, use",24,0.08229999989271164,"hash, element, table, bucket, use, function, close, key, store, insert",14,0.057999998331069946,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['interpolation', 'search', 'search', 'similar', 'binary', 'search', 'choose', 'different', 'element']","What is interpolation search?
 A search similar to binary search but with choosing a different element (eg. not the halfway one)
   "
735,735,56,0.155799999833107,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",32,0.12200000137090683,"log, base, bottom, many, become, simplify, less, allow, level, multiple",24,0.060100000351667404,"hash, element, table, bucket, use, function, close, key, store, insert","['use', 'small', 'element', 'simplify', 'quick', 'sort', 'average', 'many', 'level', 'log']","When using QuickSelect, we use the k-th smallest element to simplify quick sort. On average, how many levels will there be?
 log(n)
   "
736,736,14,0.20999999344348907,"tree, binary, order, node, leave, right, follow, avl, search, traversal",24,0.05649999901652336,"hash, element, table, bucket, use, function, close, key, store, insert",16,0.013500000350177288,"for, follow, time, complexity, true, give, statement, function, correct, run","['calculate', 'output', 'pre', 'order', 'follow', 'tree']","Calculate the output of the pre-order traversal algorithm in the following tree a / \ b e /\ /\c d f g/\ /h i j
a, b, c, h, i, d, e, f, g, j
    "
737,737,13,0.15060000121593475,"second, take, record, long, run, expect, likely, question, information, implementation",39,0.09809999912977219,"node, sub, process, next, link, current, element, list, object, pointer",16,0.06949999928474426,"for, follow, time, complexity, true, give, statement, function, correct, run","['if', 'take', 'second', 'process', 'element', 'take', 'second', 'process', 'result', 'complexity']","If an algorithm takes 1 second to process 1,000 elements and takes 8,000 seconds to process 20,000 results, what is its complexity?
  O(n3)
  "
738,738,56,0.3594000041484833,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",55,0.1290999948978424,"datum, search, structure, remove, data, list, store, want, add, use",16,0.06040000170469284,"for, follow, time, complexity, true, give, statement, function, correct, run","['follow', 'statement', 'compare', 'link', 'list', 'array', 'true', 'link', 'list', 'would', 'faster', 'th', 'itemb', 'link', 'list', 'would', 'faster', 'remove', 'item', 'would', 'faster', 'insert', 'item', 'front', 'would', 'array', 'less', 'memory', 'since', 'storage', 'for', 'pointer']","Which of the following statements comparing linked lists with arrays are true:A) In a Linked List, it would be faster to get to the 110th item.B) In a Linked List, it would be faster to remove an item from the middle of it.C) In an Array, it would be be faster to insert an item in the front of it.D) Arrays use less memory since they do not use storage for pointers.
  Only B and D
  "
739,739,29,0.3269999921321869,"find, number, step, item, average, many, index, table, insert, hash",24,0.1662999987602234,"hash, element, table, bucket, use, function, close, key, store, insert",0,0.0,,"['give', 'close', 'hash', 'table', 'bucket', 'average', 'number', 'step', 'take', 'insert', 'find', 'item', 'if', 'maximum', 'number', 'key', 'insert']","Given a closed hash table with 50 buckets, what is the average number of steps it will take to insert/find an item if the maximum number of keys to insert is 40?
3
    "
740,740,16,0.188400000333786,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.0142000000923872,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",14,0.0142000000923872,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['if', 'follow', 'statement', 'true']","If f(n) = 2^n+ 10, g(n) = 5nlog(n), and h(n) = n^2 + log(n), which of the following statements is true?
  f(n) = ?(h(n)), g(n) = O(h(n)), h(n) = O(f(n))
  "
741,741,14,0.2782000005245209,"tree, binary, order, node, leave, right, follow, avl, search, traversal",39,0.20340000092983246,"node, sub, process, next, link, current, element, list, object, pointer",16,0.033900000154972076,"for, follow, time, complexity, true, give, statement, function, correct, run","['right', 'order', 'step', 'for', 'post', 'order', 'way', 'traverse', 'tree', 'process', 'node', 'leave', 'sub', 'treeprocess', 'node', 'right', 'sub', 'treeprocess', 'current', 'node']","What is the right order of steps for the Post-order way to traverse a tree?
 Process the nodes in the left sub-treeProcess the nodes in the right sub-treeProcess the current node
   "
742,742,56,0.28540000319480896,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",14,0.01209999993443489,"tree, binary, order, node, leave, right, follow, avl, search, traversal",4,0.01209999993443489,"looping, letf, invent, queue, default, dump, bsta, legal, mergesort, worst_case","['sort', 'stable', 'sort', 'insertion', 'sort', 'bubble', 'sort']","Which of these sorts are ALL Stable?
  Merge sort, Insertion sort, Bubble sort.
  "
743,743,40,0.18799999356269836,"array, slow, problem, may, random, element, access, integer, anywhere, face",35,0.1581999957561493,"number, people, real, create, would, say, quickly, company, change, friend",0,0.01140000019222498,"pass, point, start, book, page, short, similar, look, dijkstra, repeat","['birthday', 'problem', 'problem', 'ask', 'likelyhood', 'people', 'birthday', 'day', 'people']","What is the Birthday Problem?
 A problem asking the likelyhood of two people having the same birthday on the same day out of n people.
   "
744,744,56,0.5094000101089478,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",51,0.045499999076128006,"efficient, company, come, condition, stock, sortb, sortc, much, around, deal",0,0.0,,"['follow', 'statement', 'stable', 'sort', 'algorithmsa', 'insertion', 'sort', 'bubble', 'sort', 'merge', 'sortb', 'merge', 'bubble', 'sort', 'shell', 'sortc', 'insertion', 'sort', 'sort', 'sort', 'bubble', 'sort']","Which of the following statements a,b,c or d are all stable sorting algorithms?a) Insertion sort, Bubble sort, Merge sortb)Merge sort, Bubble sort, Shell sortc) Quick sort, Insertion sort, Heap sortd) Heap sort, Shell sort, Bubble sort
a)
    "
745,745,16,0.20919999480247498,"for, follow, time, complexity, true, give, statement, function, correct, run",49,0.055399999022483826,"int, result, return, term, many, num, body, function, heap, count",56,0.013299999758601189,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['complexity', 'follow', 'forvalue', 'for', 'if', 'return']","What is the complexity of the following code?int searchArray(int arr[], int n, int forValue) { for ( int i = 0; i < n; i++ ) { if (arr[i] == forValue) { return i*2; } }}
   T(n)
 "
746,746,56,0.39640000462532043,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",14,0.01209999993443489,"tree, binary, order, node, leave, right, follow, avl, search, traversal",29,0.01140000019222498,"find, number, step, item, average, many, index, table, insert, hash","['stable', 'sort', 'take', 'account', 'initial', 'ordering', 'sort', 'maintain', 'order', 'equal', 'value', 'item']","What is a stable sorting algorithm?
Algorithms which take into account the initial ordering when sorting – maintaining the order of equal-valued items.
    "
747,747,56,0.12020000070333481,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",55,0.06870000064373016,"datum, search, structure, remove, data, list, store, want, add, use",17,0.0551999993622303,"lane, skip, skiplist, combined, sum, organise, difference, many, exactly, assign","['list', 'structure', 'quick', 'traverse', 'skip', 'list']","Which List structure is the quickest to traverse?
Skip List
    "
748,748,24,0.2003999948501587,"hash, element, table, bucket, use, function, close, key, store, insert",42,0.1331000030040741,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",16,0.07270000129938126,"for, follow, time, complexity, true, give, statement, function, correct, run","['off', 'big', 'hash', 'table', 'true', 'big', 'hash', 'table', 'fast', 'search', 'time', 'inefficient', 'memory']","Which statement about the trade-offs of having a big hash tables is true?
 Big hash tables have fast search time and an inefficient use of memory.
   "
749,749,6,0.10760000348091125,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly",56,0.09390000253915787,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",41,0.04280000180006027,"runtime, part, course, http, answerquestion, mainphpcmd, answer, conference, target, must","['bad', 'cast', 'runtime', 'complexity', 'bubblesort']","What is the worst-cast runtime-complexity of Bubblesort?
   O(n2)
 "
750,750,56,0.1339000016450882,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",3,0.08950000256299973,"case, fastest, ofbubble, itsb, distinct, description, fit, stableb, performance, nearly",41,0.054999999701976776,"runtime, part, course, http, answerquestion, mainphpcmd, answer, conference, target, must","['good', 'case', 'runtime', 'complexity', 'ofbubble', 'sort']","What is the best-case runtime-complexity ofBubble Sort?
 O(n)
   "
751,751,14,0.13779999315738678,"tree, binary, order, node, leave, right, follow, avl, search, traversal",20,0.05530000105500221,"call, system, avoid, determine, matrix, engine, bugle, pagerank, inthis, involve",0,0.05490000173449516,"pass, point, start, book, page, short, similar, look, dijkstra, repeat","['tree', 'call', 'leaf', 'point', 'node']","In a tree, when is node called a leaf?
  When it does not point to any other nodes.
  "
752,752,21,0.27309998869895935,"choose, requirement, rule, carey, understand, meet, simple, possible, mind, define",56,0.20520000159740448,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",0,0.0,,"['follow', 'carey', 'rule', 'sort', 'choose', 'sort', 'algorithm', 'understand', 'requirement', 'choose', 'simple', 'sort', 'algorithm', 'possible', 'meet', 'requirement']","Which of the following are Carey’s 2 Rules of Sorting?
Don’t choose a sorting algorithm until you understand the requirements of your problem.andAlways choose the simplest sorting algorithm possible that meets your requirements.
    "
753,753,21,0.27309998869895935,"choose, requirement, rule, carey, understand, meet, simple, possible, mind, define",56,0.20520000159740448,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",0,0.0,,"['follow', 'carey', 'rule', 'sort', 'choose', 'sort', 'algorithm', 'understand', 'requirement', 'choose', 'simple', 'sort', 'algorithm', 'possible', 'meet', 'requirement']","Which of the following are Carey’s 2 Rules of Sorting?
Don’t choose a sorting algorithm until you understand the requirements of your problem.andAlways choose the simplest sorting algorithm possible that meets your requirements.
    "
754,754,14,0.33980000019073486,"tree, binary, order, node, leave, right, follow, avl, search, traversal",39,0.08910000324249268,"node, sub, process, next, link, current, element, list, object, pointer",30,0.010700000450015068,"operation, middle, link, array, perform, advantage, make, item, front, either","['make', 'binary', 'tree', 'balance', 'give', 'node', 'leave', 'sub', 'tree', 'node', 'right', 'sub', 'tree']","What makes a binary tree balanced
Given any node: | # of nodes in left sub tree - # of nodes in right sub tree| = {0, 1}
    "
755,755,56,0.2102999985218048,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",25,0.051899999380111694,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional",55,0.013899999670684338,"datum, search, structure, remove, data, list, store, want, add, use","['link', 'list', 'method', 'guarantee', 'complexity', 'add']","in a linked list which of these methods has a guaranteed complexity of 1?
 add(o)
   "
756,756,56,0.21060000360012054,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",25,0.051899999380111694,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional",55,0.013700000010430813,"datum, search, structure, remove, data, list, store, want, add, use","['link', 'list', 'method', 'guarantee', 'complexity', 'add']","in a linked list which of these methods has a guaranteed complexity of 1?
 add(o)
   "
757,757,24,0.18289999663829803,"hash, element, table, bucket, use, function, close, key, store, insert",43,0.0674000009894371,"space, nlogn, worst, double, do, enough, arraylist, namortise, collection, efficiency",29,0.0560000017285347,"find, number, step, item, average, many, index, table, insert, hash","['linear_probe', 'scanning', 'hash', 'table', 'find', 'empty', 'space']","What is linear probing?
 scanning through a hash table to find empty space
   "
758,758,20,0.22210000455379486,"call, system, avoid, determine, matrix, engine, bugle, pagerank, inthis, involve",56,0.17829999327659607,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.06939999759197235,"for, follow, time, complexity, true, give, statement, function, correct, run","['search', 'engine', 'bugle', 'use', 'system', 'call', 'pagerank', 'determine', 'order', 'show', 'result', 'inthis', 'involve', 'solve', 'large', 'matrix', 'problem', 'use', 'size', 'follow', 'statement', 'false', 'algorithm', 'always', 'run', 'faster', 'algorithm', 'order']","A search engine 'Bugle' uses a system called PageRank to determine the order it shows results in.This involves solving a large matrix problem using an algorithm of order N2log(N) where the size of the matrix is N x N.Which one of the following statements is false?
   The algorithm will always run faster than another algorithm of order N4
 "
759,759,14,0.3578000068664551,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.011300000362098217,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.011099999770522118,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['follow', 'output', 'order', 'traversal', 'tree', 'processing', 'simply', 'print', 'node', 'value']","Which of the following is the output of In-order traversal on this tree: a / \ b e / \c d(Where the processing is simply printing the node value)
   c b d a e
 "
760,760,14,0.6237000226974487,"tree, binary, order, node, leave, right, follow, avl, search, traversal",39,0.04430000111460686,"node, sub, process, next, link, current, element, list, object, pointer",0,0.0,,"['consider', 'binary', 'tree', 'numeric', 'node', 'leave', 'sub', 'tree', 'consist', 'number', 'node', 'right', 'sub', 'tree', 'consist', 'number', 'great', 'nodethis', 'tree', 'empty', 'root', 'value', 'follow', 'number', 'insert', 'tree', 'order', 'leave', 'right', 'ie', 'insert', 'first', 'height', 'number', 'level', 'tree']","Consider a binary tree with numeric nodes where the left sub-tree consists of numbers less than the node, and the right sub-tree consists of numbers greater than the node.This tree is empty other than the root value: 10.The following numbers are inserted into the tree in order from left to right (i.e. 15 is inserted first):15, 6, 12, 4, 9, 11, 7, 8What is the height (number of levels) of the tree?
  5
  "
761,761,23,0.016899999231100082,"looping, letf, invent, queue, default, dump, bsta, legal, mergesort, worst_case",45,0.016899999231100082,"looping, letf, invent, queue, default, dump, bsta, legal, mergesort, worst_case",22,0.016899999231100082,"looping, letf, invent, queue, default, dump, bsta, legal, mergesort, worst_case",['looping'],"Which of these is not an elementary operation?
Looping over an array
    "
762,762,13,0.2046000063419342,"second, take, record, long, run, expect, likely, question, information, implementation",56,0.17679999768733978,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.05849999934434891,"for, follow, time, complexity, true, give, statement, function, correct, run","['implementation', 'selection', 'sort', 'run', 'for', 'sort', 'list', 'record', 'long', 'likely', 'run', 'sort', 'record']","An implementation of selection sort runs for 2s to sort a list of 1,000 records. How long will it likely run to sort 10,000 records?
  200s
  "
763,763,16,0.21060000360012054,"for, follow, time, complexity, true, give, statement, function, correct, run",13,0.1378999948501587,"second, take, record, long, run, expect, likely, question, information, implementation",29,0.05139999836683273,"find, number, step, item, average, many, index, table, insert, hash","['take', 'for', 'give', 'asymptotic', 'time', 'complexity', 'many', 'second', 'expect', 'take', 'for']","An algorithm takes 1s for n = 100. Given that its asymptotic time complexity is?(n2), how many seconds do you expect it to take for n = 800?
   64s
 "
764,764,16,0.18729999661445618,"for, follow, time, complexity, true, give, statement, function, correct, run",32,0.16120000183582306,"log, base, bottom, many, become, simplify, less, allow, level, multiple",14,0.07490000128746033,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['interpolation', 'search', 'improve', 'version', 'binary', 'search', 'give', 'time', 'complexity', 'log', 'follow', 'correctly', 'order', 'time', 'complexity', 'best', 'worst', 'for', 'large', 'log', 'log', 'log']","Interpolation search is an improved version of Binary search. Given that it has time complexity O(log(log n)), which of the following correctly orders the time complexities from best to worst, for large n.
     O(1), O(log(log n)), O(log n), O(n), O(nlogn)
"
765,765,24,0.46560001373291016,"hash, element, table, bucket, use, function, close, key, store, insert",29,0.03999999910593033,"find, number, step, item, average, many, index, table, insert, hash",0,0.0,,"['close', 'linear_probing', 'right', 'ie', 'direction', 'high', 'index', 'hash', 'function', 'form', 'hash', 'table', 'slot', 'if', 'insert', 'element', 'order', 'end']","You wish to use a standard closed hashtable with linear probing (to the right, i.e. in the direction of higher indices). The hash function has the form h(x) = (x*x) % 5 , and the hash table has slots 0, ... , 4. If you insert the elements 3, 2, 4, 1, 5 in that order, what does the hashtable look like at the end?
   2, 4, 1, 5, 3
 "
766,766,30,0.156700000166893,"operation, middle, link, array, perform, advantage, make, item, front, either",41,0.09359999746084213,"runtime, part, course, http, answerquestion, mainphpcmd, answer, conference, target, must",25,0.04520000144839287,"graph, edge, vertex, method, undirected, direct, main, direction, undirecte, directional","['main', 'advantage', 'consider', 'amortise', 'runtime', 'runtime', 'per', 'operation', 'pessimistic']","What is the main advantage of considering an amortised runtime?
 Worst-case runtime per operation can be too pessimistic.
   "
767,767,16,0.41499999165534973,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.0632999986410141,"tree, binary, order, node, leave, right, follow, avl, search, traversal",29,0.03539999946951866,"find, number, step, item, average, many, index, table, insert, hash","['for', 'loop', 'nest', 'asymptotic', 'time', 'complexity', 'find', 'multiplying', 'order', 'loop', 'if', 'for', 'loop', 'nest', 'big', 'complexity', 'give', 'high', 'order', 'loop']","When for loops are nested, the asymptotic time complexity can be found by multiplying the order of each loop. If the for loops are not nested, big-O complexity is given by...
the highest order of one of the loops.
    "
768,768,24,0.4844000041484833,"hash, element, table, bucket, use, function, close, key, store, insert",0,0.0,,0,0.0,,"['use', 'standard', 'closed', 'hashtable', 'linear_probing', 'right', 'hash', 'function', 'form', 'hash', 'table', 'slot', 'if', 'insert', 'element', 'order', 'end']","You are using a standard closed hashtable with linear probing (to the right). The hash function has the form h(x) = x % 5 and the hash table has slots 0,1,2,3,4. If you insert the elements 9,3,14,7,1 in this order, what does the hashtable look like at the end?
 14,1,7,3,9
   "
769,769,42,0.27709999680519104,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",16,0.07100000232458115,"for, follow, time, complexity, true, give, statement, function, correct, run",35,0.01119999960064888,"number, people, real, create, would, say, quickly, company, change, friend","['definition', 'lower', 'bind', 'big', 'omega', 'big', 'omega', 'constant', 'for']","What is the definition of a Lower Bound (Big-Omega)?
1) (""g(n) is Big-Omega of f(n)"") iff there are constants c>0 and n0>0 so that for all n>n0: g(n) = c f(n)
    "
770,770,29,0.37950000166893005,"find, number, step, item, average, many, index, table, insert, hash",16,0.04800000041723251,"for, follow, time, complexity, true, give, statement, function, correct, run",24,0.012600000016391277,"hash, element, table, bucket, use, function, close, key, store, insert","['give', 'particular', 'load', 'for', 'open', 'hash', 'table', 'average', 'number', 'step', 'insert', 'find', 'item']","Given a particular load L for an Open Hash Table, what is the average number of steps to insert or find an item?
 
   "
771,771,30,0.18950000405311584,"operation, middle, link, array, perform, advantage, make, item, front, either",24,0.14219999313354492,"hash, element, table, bucket, use, function, close, key, store, insert",55,0.11959999799728394,"datum, search, structure, remove, data, list, store, want, add, use","['follow', 'case', 'link', 'list', 'preferable', 'array', 'insert', 'new', 'element', 'front', 'remove', 'element', 'middle', 'get', 'th', 'element', 'either']","In which of the following cases is a linked list preferable to an array?1) Inserting a new element at the front of either2) Removing an element in the middle of either3) Getting the 200th element of either
 1 and 2
   "
772,772,30,0.18960000574588776,"operation, middle, link, array, perform, advantage, make, item, front, either",24,0.14229999482631683,"hash, element, table, bucket, use, function, close, key, store, insert",55,0.11980000138282776,"datum, search, structure, remove, data, list, store, want, add, use","['follow', 'case', 'link', 'list', 'preferable', 'array', 'insert', 'new', 'element', 'front', 'remove', 'element', 'middle', 'get', 'th', 'element', 'either']","In which of the following cases is a linked list preferable to an array?1) Inserting a new element at the front of either2) Removing an element in the middle of either3) Getting the 200th element of either
 1 and 2
   "
773,773,16,0.24390000104904175,"for, follow, time, complexity, true, give, statement, function, correct, run",42,0.023800000548362732,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",56,0.013100000098347664,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['theta', 'time', 'complexity', 'follow', 'for', 'for']","What is the theta time complexity of the following algorithm fragment (f(a,b))?for (int i=0; i<a+b; i++) {System.out.println(i);}for (int i=0; i<a*a*a; i++) {System.out.println(i);}
  
  "
774,774,14,0.2378000020980835,"tree, binary, order, node, leave, right, follow, avl, search, traversal",42,0.05000000074505806,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",29,0.017100000753998756,"find, number, step, item, average, many, index, table, insert, hash","['give', 'number', 'would', 'final', 'balanced', 'avl', 'tree']","Given the numbers [1,4,6,3,7,2,10]. What would be the final balanced AVL Tree?
  
  "
775,775,14,0.38839998841285706,"tree, binary, order, node, leave, right, follow, avl, search, traversal",20,0.04100000113248825,"call, system, avoid, determine, matrix, engine, bugle, pagerank, inthis, involve",55,0.010099999606609344,"datum, search, structure, remove, data, list, store, want, add, use","['binary', 'search', 'tree', 'left', 'subtree', 'right', 'subtree', 'differ', 'height', 'unit', 'call', 'avl', 'tree']","A binary search tree whose left subtree and right subtree differ in height by at most one unit is called..
 AVL Tree
   "
776,776,56,0.3490999937057495,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.06710000336170197,"for, follow, time, complexity, true, give, statement, function, correct, run",2,0.03970000147819519,"require, comparison, estimate, nee, minimum, identify, aka, clockwise, complexityo, outside","['follow', 'statement', 'false', 'selection', 'sort', 'average', 'time', 'complexity', 'stable', 'hard', 'implement', 'comparison', 'sort', 'algorithm']","Which are the following statements are false?
Selection sort has an average time complexity of O(n), is stable and is hard to implement in comparison with other sorting algorithms
    "
777,777,56,0.23549999296665192,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",29,0.10239999741315842,"find, number, step, item, average, many, index, table, insert, hash",49,0.04560000076889992,"int, result, return, term, many, num, body, function, heap, count","['give', 'int', 'array', 'many', 'step', 'take', 'sort', 'ascend', 'order', 'use', 'bubble', 'sort']","Given the int array 6, 5, 1, 4, 7, 8, 2, how many steps will it take to sort it in ascending order using bubble sort?
   6
 "
778,778,56,0.19050000607967377,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",4,0.013700000010430813,"looping, letf, invent, queue, default, dump, bsta, legal, mergesort, worst_case",5,0.013700000010430813,"looping, letf, invent, queue, default, dump, bsta, legal, mergesort, worst_case","['sort', 'stable', 'merge', 'sort']","which of these sorts is stable
  Merge sort
  "
779,779,56,0.12559999525547028,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",43,0.09179999679327011,"space, nlogn, worst, double, do, enough, arraylist, namortise, collection, efficiency",2,0.05050000175833702,"require, comparison, estimate, nee, minimum, identify, aka, clockwise, complexityo, outside","['definition', 'space', 'complexity', 'much', 'memory', 'space', 'algorithm', 'require']","What is the definition of Space Complexity?
 How much memory space an algorithm requires
   "
780,780,42,0.19059999287128448,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",16,0.12160000205039978,"for, follow, time, complexity, true, give, statement, function, correct, run",24,0.045899998396635056,"hash, element, table, bucket, use, function, close, key, store, insert","['big', 'theta', 'notation', 'calculate', 'time', 'complexity', 'for', 'exact', 'estimation']","When do you use Big-Theta notation when calculating time complexity?
  For exact estimation
  "
781,781,29,0.2712000012397766,"find, number, step, item, average, many, index, table, insert, hash",24,0.14000000059604645,"hash, element, table, bucket, use, function, close, key, store, insert",44,0.010200000368058681,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na","['s', 'average', 'number', 'step', 'find', 'item', 'anopen', 'hash', 'table', 'bucket', 'element', 'table']","Whats the average number of steps to find any items in anopen hash table of 1213 buckets with 1000 elements in the table?
  1.41
  "
782,782,16,0.18299999833106995,"for, follow, time, complexity, true, give, statement, function, correct, run",13,0.14800000190734863,"second, take, record, long, run, expect, likely, question, information, implementation",56,0.043299999088048935,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['follow', 'question', 'unanswerable', 'give', 'for', 'function', 'would', 'answerable', 'give', 'information']","which of the following questions is unanswerable given only that for functions f and gf(n) = ?(1)g(n) = O(n)but would be answerable given more information
   ?(g(n)) =O(g(n))
 "
783,783,14,0.2565000057220459,"tree, binary, order, node, leave, right, follow, avl, search, traversal",20,0.05169999971985817,"call, system, avoid, determine, matrix, engine, bugle, pagerank, inthis, involve",29,0.04659999907016754,"find, number, step, item, average, many, index, table, insert, hash","['need', 'binary', 'tree', 'height', 'balanced', 'avoid', 'formation', 'skew', 'tree']","Why we need to a binary tree which is height balanced?
to avoid formation of skew trees
    "
784,784,14,0.29750001430511475,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.2223999947309494,"for, follow, time, complexity, true, give, statement, function, correct, run",6,0.0502999983727932,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly","['follow', 'code', 'perform', 'partition', 'operation', 'correctly', 'quicksort', 'private', 'static', 'int', 'partition', 'high', 'int', 'leave', 'right', 'low', 'leave', 'low', 'right', 'high', 'while', 'leave', 'right', 'while', 'leave', 'leave', 'while', 'right', 'right', 'if', 'leave', 'right', 'swap', 'leave', 'right', 'return', 'right']","Which of the following code performs the partition operation correctly in QuickSort?
 private static int partition(int[] arr, int low, int high){int left, right, pivot_item = arr[low];left = low;right = high;while(left <= right){while(arr[left] <= pivot_item){left++;}while(arr[right] > pivot_item){right--;}if(left < right){swap(arr, left, right);}}arr[low] = arr[right];arr[right] = pivot_item;return right;}
   "
785,785,14,0.1662999987602234,"tree, binary, order, node, leave, right, follow, avl, search, traversal",55,0.14489999413490295,"datum, search, structure, remove, data, list, store, want, add, use",17,0.04520000144839287,"lane, skip, skiplist, combined, sum, organise, difference, many, exactly, assign","['follow', 'datum', 'structure', 'similar', 'skiplist', 'balanced', 'binary', 'search', 'tree']","which of the following data structure are similar to skipList?
   balanced binary search tree
 "
786,786,55,0.2134000062942505,"datum, search, structure, remove, data, list, store, want, add, use",16,0.13840000331401825,"for, follow, time, complexity, true, give, statement, function, correct, run",39,0.10809999704360962,"node, sub, process, next, link, current, element, list, object, pointer","['select', 'option', 'give', 'datum', 'structure', 'andcomplexity', 'for', 'search', 'time', 'check', 'contain', 'object', 'match', 'doubly', 'link', 'list', 'search', 'time', 'complexity', 'log']","Select the option where the given data structure andcomplexity for search time (check that it contains an object) do not match.
  Doubly Linked List has search time complexity O(Log(n))
  "
787,787,24,0.3743000030517578,"hash, element, table, bucket, use, function, close, key, store, insert",39,0.08540000021457672,"node, sub, process, next, link, current, element, list, object, pointer",16,0.07850000262260437,"for, follow, time, complexity, true, give, statement, function, correct, run","['follow', 'statement', 'open', 'hash', 'table', 'false', 'if', 'object', 'hashed', 'slot', 'already', 'full', 'object', 'put', 'next', 'available', 'slot', 'slot', 'map', 'open', 'hash', 'table']","Which of the following statements about open hash tables is false
 If an object is hashed to a slot that is already full then the object will be put in the next available slot after the slot mapped to in an open hash table.
   "
788,788,56,0.2167000025510788,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.12449999898672104,"for, follow, time, complexity, true, give, statement, function, correct, run",24,0.07530000060796738,"hash, element, table, bucket, use, function, close, key, store, insert","['implement', 'singly', 'link', 'list', 'follow', 'statement', 'true', 'insert', 'element', 'worst_case', 'time', 'complexity']","When implementing a singly linked list, which of the following statements is true?
   Inserting an element has worst case time complexity of
 "
789,789,16,0.23010000586509705,"for, follow, time, complexity, true, give, statement, function, correct, run",6,0.04910000041127205,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly",42,0.04899999871850014,"big, definition, bind, set, notation, omega, final, lecture, theta, exact","['big', 'complexity', 'follow', 'code', 'for', 'for', 'for', 'int']","What is the big O complexity f(n) of the following code?(A) for( int i = 0; i < n; i++){(B) for( int j = i; j < n; j++){(C) for( int k = 0; k < 4; k++){ System.out.println(""Hello World!""); } } }
 n2
   "
790,790,56,0.19050000607967377,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",4,0.013700000010430813,"looping, letf, invent, queue, default, dump, bsta, legal, mergesort, worst_case",5,0.013700000010430813,"looping, letf, invent, queue, default, dump, bsta, legal, mergesort, worst_case","['stable', 'sort', 'selection', 'sort']","Which of these is not an example of a stable sort?
  Selection Sort
  "
791,791,16,0.21559999883174896,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.05260000005364418,"tree, binary, order, node, leave, right, follow, avl, search, traversal",32,0.04190000146627426,"log, base, bottom, many, become, simplify, less, allow, level, multiple","['correct', 'order', 'for', 'runtime', 'complexity', 'class', 'fastest', 'slow', 'for', 'large', 'value', 'constant', 'log']","Which of these is the correct order for the runtime complexity classes - from fastest to slowest, for large values of n?
constant, log(n), sqrt(n), n, nlog(n), n^2, n^3, 2^n
    "
792,792,56,0.06120000034570694,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",21,0.05820000171661377,"choose, requirement, rule, carey, understand, meet, simple, possible, mind, define",14,0.05790000036358833,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['rule', 'sort', 'name']","Carey's two rules of sorting are:
#NAME?    "
793,793,16,0.1535000056028366,"for, follow, time, complexity, true, give, statement, function, correct, run",49,0.15109999477863312,"int, result, return, term, many, num, body, function, heap, count",42,0.029999999329447746,"big, definition, bind, set, notation, omega, final, lecture, theta, exact","['theta', 'complexity', 'int', 'int', 'for', 'for', 'int', 'return']","what is the theta complexity of this algorithm f(n)function int f(int n){ int c = 0; for (int i=1 i<n; i=i*2){ for (int j=0; j<i; j++){ c++; } } return c;}
   n
 "
794,794,29,0.17820000648498535,"find, number, step, item, average, many, index, table, insert, hash",56,0.17329999804496765,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.06589999794960022,"for, follow, time, complexity, true, give, statement, function, correct, run","['give', 'follow', 'sorted', 'list', 'number', 'use', 'binary', 'search', 'algorithm', 'many', 'comparison', 'would', 'take', 'determine', 'if', 'number', 'list', 'use', 'floor', 'function', 'for', 'find', 'middle', 'element', 'list']","Given the following sorted list of numbers:1, 2, 34, 45, 104, 287, 287, 299Using the binary search algorithm; how many comparisons would it take to determine if the number 0 is in the list (when using the floor function for finding the middle element of the list)?
 3
   "
795,795,56,0.2833000123500824,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",13,0.01269999984651804,"second, take, record, long, run, expect, likely, question, information, implementation",29,0.012299999594688416,"find, number, step, item, average, many, index, table, insert, hash","['stable', 'sort', 'sort', 'take', 'account', 'initial', 'ordering']","What is a stable sort?
  A sort which takes into account the initial ordering.
  "
796,796,39,0.4325000047683716,"node, sub, process, next, link, current, element, list, object, pointer",14,0.06840000301599503,"tree, binary, order, node, leave, right, follow, avl, search, traversal",16,0.010300000198185444,"for, follow, time, complexity, true, give, statement, function, correct, run","['insert', 'doubly', 'link', 'list', 'must', 'update', 'node', 'next', 'previous', 'pointerthe', 'previous', 'node', 'next', 'pointerthe', 'follow', 'node', 'previous', 'pointer']","When inserting a node in a doubly linked list, we must update:
 The new node's next and previous pointerThe previous node's next pointerThe following node's previous pointer
   "
797,797,56,0.22300000488758087,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.013899999670684338,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.013399999588727951,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['follow', 'sort', 'algorithm', 'stable', 'insertionsort']","Which of the following sorting algorithms is stable?
   InsertionSort
 "
798,798,55,0.1851000040769577,"datum, search, structure, remove, data, list, store, want, add, use",24,0.16060000658035278,"hash, element, table, bucket, use, function, close, key, store, insert",16,0.02810000069439411,"for, follow, time, complexity, true, give, statement, function, correct, run","['follow', 'data', 'structure', 'difficult', 'recommend', 'remove', 'value', 'close', 'hash', 'table']","In which of the following data structures is it difficult (not recommended) to remove values from?
   Closed hash tables (with Linear probing)
 "
799,799,29,0.28439998626708984,"find, number, step, item, average, many, index, table, insert, hash",24,0.08550000190734863,"hash, element, table, bucket, use, function, close, key, store, insert",16,0.05180000141263008,"for, follow, time, complexity, true, give, statement, function, correct, run","['give', 'particular', 'load', 'for', 'closed', 'hash', 'table', 'maximum', 'number', 'step', 'find', 'bucket']","Given a particular load L for a Closed Hash Table w LP, what is the maximum number of steps to find the bucket?
   1/(1-L)
 "
800,800,56,0.2825999855995178,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.014700000174343586,"for, follow, time, complexity, true, give, statement, function, correct, run",14,0.012299999594688416,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['follow', 'sort', 'algorithm', 'time', 'complexity', 'merge', 'sort']","Which of the following sorting algorithms does not have a worst case time complexity of O(n2)?
  Merge sort
  "
801,801,16,0.400299996137619,"for, follow, time, complexity, true, give, statement, function, correct, run",49,0.01140000019222498,"int, result, return, term, many, num, body, function, heap, count",56,0.010300000198185444,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['follow', 'bound', 'correct', 'for', 'run', 'time', 'follow', 'codefor', 'int', 'for', 'correct', 'wrong']","Which of the following bounds are correct for the run time of the following code?for ( int i = 0; i < n; i++) for ( int j = 0; j < n; j++) out.println(“Hapax Legomenon”)A)O( n2 )B)?( n2 )C) O(log n)D)O( n3)
   A & B are correct, C & D are wrong
 "
802,802,24,0.697700023651123,"hash, element, table, bucket, use, function, close, key, store, insert",16,0.06199999898672104,"for, follow, time, complexity, true, give, statement, function, correct, run",0,0.0,,"['suppose', 'give', 'element', 'definitely', 'hash', 'table', 'search', 'for', 'element', 'hash', 'table', 'linear_probe', 'calculate', 'bucket', 'for', 'element', 'key', 'use', 'hash', 'function', 'however', 'check', 'appropriate', 'bucket', 'contain', 'different', 'key', 'follow', 'possible', 'reason', 'for', 'thisa', 'element', 'insert', 'hash', 'table', 'get', 'write', 'element', 'bucket', 'element', 'place', 'bucket', 'calculate', 'hash', 'functionc', 'key', 'bucket', 'calculate', 'hash', 'key', 'force', 'move', 'bucket', 'bucket', 'already', 'fill']","Suppose you are given that an element is definitely in the Hash Table. You search for this element in the Hash Table with linear probing. You calculate the bucket for the element's key using the hash function. However, when you check the appropriate bucket it contains a different key. Which of the following are possible reasons for this?A) The element was inserted in the Hash Table but then got over-written by another element with the same bucket number.B) The element is placed below it's bucket calculated by the hash function.C) The other key had the same bucket calculated by the hash function.D) The other key was forced to move down to the bucket because it's own bucket was already filled.
  B C D
  "
803,803,24,0.33629998564720154,"hash, element, table, bucket, use, function, close, key, store, insert",16,0.04270000010728836,"for, follow, time, complexity, true, give, statement, function, correct, run",46,0.0421999990940094,"go, likely, stand, adventure, sven, configuration, must, boat, looping, amount","['for', 'hash', 'table', 'slot', 'already', 'contain', 'element', 'likely', 'go', 'collision', 'hash', 'table']","For a Hash Table with T slots already containing n elements how likely are there going to be collisions in the Hash Table?
   
 "
804,804,16,0.21549999713897705,"for, follow, time, complexity, true, give, statement, function, correct, run",44,0.18850000202655792,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na",14,0.039400000125169754,"tree, binary, order, node, leave, right, follow, avl, search, traversal","['for', 'constant', 'arrange', 'follow', 'time', 'complexity', 'function', 'order', 'slowest', 'fastest', 'for', 'large', 'number', 'input', 'na']","For some constants a<b<c arrange the following time complexity functions in order slowest to fastest for large number of input n.A) B)C) D) E)
     D B C A E
"
805,805,44,0.24230000376701355,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na",55,0.05290000140666962,"datum, search, structure, remove, data, list, store, want, add, use",56,0.013199999928474426,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['algorithm', 'number', 'instruction', 'use', 'size', 'input', 'datum']","What is ""time complexity"" of an algorithm?
     The number of instructions used by an algorithm as a function of the size of the input data.
"
806,806,44,0.10170000046491623,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na",55,0.10130000114440918,"datum, search, structure, remove, data, list, store, want, add, use",24,0.08950000256299973,"hash, element, table, bucket, use, function, close, key, store, insert","['suppose', 'search', 'for', 'element', 'sorted', 'list', 'size', 'use', 'binary', 'searchin', 'many', 'step', 'matter', 'element', 'look', 'for', 'find', 'log']","Suppose you are searching for an element in a sorted list of size x using binary search.In how many steps no matter what element we are looking for can we find it?
   log2(x)
 "
807,807,40,0.46630001068115234,"array, slow, problem, may, random, element, access, integer, anywhere, face",55,0.0210999995470047,"datum, search, structure, remove, data, list, store, want, add, use",32,0.014999999664723873,"log, base, bottom, many, become, simplify, less, allow, level, multiple","['problem', 'may', 'face', 'work', 'array', 'base', 'slow', 'add', 'element', 'endb', 'limit', 'remove', 'anywhere', 'listd', 'slow', 'random', 'access']","Which of these are problems one might face working with Array-based Lists?A) Slow to add an element at the endB) Limited capacityC) Slow to insert/remove anywhere in the listD) Slow random access
  B and C
  "
808,808,56,0.3797000050544739,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",14,0.010999999940395355,"tree, binary, order, node, leave, right, follow, avl, search, traversal",29,0.010999999940395355,"find, number, step, item, average, many, index, table, insert, hash","['many', 'iteration', 'bubble', 'sort', 'would', 'take', 'sort', 'follow', 'list', 'ascend', 'order']","How many iterations of the bubble sort algorithm would it take to sort the following list in ascending order?3, 1, 4, 5, 9 ,2, 6
  5
  "
809,809,16,0.21469999849796295,"for, follow, time, complexity, true, give, statement, function, correct, run",42,0.053199999034404755,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",21,0.013399999588727951,"choose, requirement, rule, carey, understand, meet, simple, possible, mind, define","['rule', 'for', 'big', 'statement', 'false', 'true']","Below are the rules for Big-O, are any of the statements A-D below FALSE?
     No, all of the above are TRUE.
"
810,810,49,0.4016000032424927,"int, result, return, term, many, num, body, function, heap, count",16,0.046300001442432404,"for, follow, time, complexity, true, give, statement, function, correct, run",0,0.0,,"['function', 'many', 'term', 'body', 'int', 'int', 'result', 'for', 'int', 'result', 'result', 'num', 'return', 'result']","Below is a function, how many elementary operations, in terms of n, are there in the body of the function?public int examQ(int num, int n){ int result = 0; for(int i=0; i<n; i++) { result = result + num; } return result;}
   4n + 4
 "
811,811,55,0.2167000025510788,"datum, search, structure, remove, data, list, store, want, add, use",56,0.06539999693632126,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",16,0.04780000075697899,"for, follow, time, complexity, true, give, statement, function, correct, run","['type', 'coordinate', 'group', 'data', 'structure', 'algorithm', 'interface', 'function']","What is an Abstract Data Type?
 A coordinated group of data structures, algorithms and interface functions
   "
812,812,24,0.4449999928474426,"hash, element, table, bucket, use, function, close, key, store, insert",55,0.14069999754428864,"datum, search, structure, remove, data, list, store, want, add, use",56,0.04749999940395355,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['imagine', 'empty', 'close', 'hashtable', 'use', 'linear_probe', 'right', 'counter', 'collisionsthis', 'close', 'hashtable', 'store', 'maximum', 'datum', 'bucket', 'label', 'ascend', 'order', 'use', 'hash', 'function', 'datum', 'store', 'bucket', 'store', 'follow', 'datum', 'leave', 'right', 'hashtable', 'order', 'would', 'data', 'store', 'insertion']","Imagine an empty closed hashtable that uses linear probing (to the right) to counter collisions.This closed hashtable can store a maximum of 5 data in 5 buckets labelled 0-4 in ascending order. It uses the hashing function f where:Where x is the data to be stored and f(x) is the bucket to store it in.If you were to insert the following data (from left to right) into this hashtable:6, 3, 2, 1, 5What order would the data be stored after insertion?
   1, 5, 6, 3, 2
 "
813,813,56,0.32600000500679016,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",41,0.06700000166893005,"runtime, part, course, http, answerquestion, mainphpcmd, answer, conference, target, must",16,0.06129999831318855,"for, follow, time, complexity, true, give, statement, function, correct, run","['consider', 'follow', 'runtime', 'for', 'list', 'sort', 'size', 'list', 'time', 'take', 'second', 'good', 'approximation', 'runtime', 'complexity', 'algorithm']","Consider the following runtimes for a list-sorting algorithm, with n as the size of the list and t as the time taken in seconds:n = 2000, t = 57n = 4000, t = 456n = 8000, t = 3648Which is the best approximation of the runtime complexity of the algorithm?
 ?()
   "
814,814,16,0.35760000348091125,"for, follow, time, complexity, true, give, statement, function, correct, run",56,0.012600000016391277,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would",44,0.01119999960064888,"input, size, large, number, use, slowest, algorithm, instruction, arrange, na","['function', 'refer', 'run', 'time', 'algorithm', 'for', 'awhich', 'follow', 'definitely', 'true']","2 functions refer to the run-times of 2 algorithms:f(n)>0, g(n)>0a>0, A>0g(n) = A f(n) for all n>aWhich of the following is definitely true?
 g(n) = O(f(n))
   "
815,815,16,0.311599999666214,"for, follow, time, complexity, true, give, statement, function, correct, run",24,0.011800000444054604,"hash, element, table, bucket, use, function, close, key, store, insert",56,0.011800000444054604,"sort, list, follow, algorithm, complexity, insertion, time, order, stable, would","['give', 'function', 'nlog', 'follow', 'statement', 'true', 'none', 'true']","Given three functions a(n) = 300n2, b(n)= 30nlog(n) and c(n)=n3- n2, which of the following statements is true?
     None of these are true
"
816,816,24,0.5473999977111816,"hash, element, table, bucket, use, function, close, key, store, insert",55,0.029400000348687172,"datum, search, structure, remove, data, list, store, want, add, use",0,0.0,,"['plan', 'store', 'datum', 'close', 'hash', 'table', 'linear_probe', 'right', 'hash', 'function', 'use', 'meaning', 'slot', 'hash', 'table', 'if', 'insert', 'element', 'hash', 'table', 'order', 'would', 'look_like', 'end']","You plan to store data in a closed hash table with linear probing to the right. The hash function you are using is h(x) = x % 8, meaning there are 8 slots in your hash table; 0,1,2,3,4,5,6,7. If you insert the elements 14, 21, 13, 10, 6, 9, 1, 18 into the hash table, in that order, what would it look like at the end?
 6, 9, 10, 1, 18, 21, 14, 13
   "
817,817,16,0.42570000886917114,"for, follow, time, complexity, true, give, statement, function, correct, run",42,0.03849999979138374,"big, definition, bind, set, notation, omega, final, lecture, theta, exact",0,0.0,,"['follow', 'correct', 'definition', 'for', 'function', 'asymptotic', 'time', 'complexity', 'give', 'byo', 'for', 'for', 'exist', 'constant', 'for']","Which of the following is the correct definition for a function f(n) having asymptotic time complexity given byO(n²)?[For f(n) > 0 for n>0]
   There exist constants c > 0 and n0 > 0 such that for all n > n0 : f(n) = cn2
 "
818,818,16,0.1995999962091446,"for, follow, time, complexity, true, give, statement, function, correct, run",6,0.10220000147819519,"code, fragment, runtime, get, void, position, if, nodenext, method, correctly",41,0.0333000011742115,"runtime, part, course, http, answerquestion, mainphpcmd, answer, conference, target, must","['runtime', 'for', 'follow', 'code', 'fragment', 'for', 'for', 'for']","The runtime for the following code fragment is . What is f(n)?for (int i=0; i<n; i++) for (int j=0; j<i/10; j++) for (int k=1; k<n; k=2*k) System.out.println(i);
  
  "
